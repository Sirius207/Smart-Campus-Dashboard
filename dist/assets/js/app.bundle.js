!function(t){function e(i){if(n[i])return n[i].exports;var r=n[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,e),r.l=!0,r.exports}var n={};e.m=t,e.c=n,e.d=function(t,n,i){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:i})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=133)}({133:function(t,e,n){"use strict";n(134),n(135),n(152),n(153),n(154),n(155),n(156)},134:function(t,e){},135:function(t,e,n){"use strict";n(136),n(148),n(97),n(151)},136:function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{default:t}}var r=i(n(137)),o=i(n(143)),s=i(n(147)),a=i(n(31)),u=i(n(95)),c=i(n(96));!function(){function t(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"medium",n='\n      <a href="'+t.link+'">\n        <h2 class="card-title">'+t.title+'</h2>\n        <img src="'+t.size[e]+'">\n      </a>',i='\n      <h1 align="right" class="chart-title--large"></h1>\n      <h2 align="right" class="chart-title--small"></h2>\n      <div\n        tag="'+t.questionId+'" id="vote" href="'+t.link+'">\n      </div>';return'\n      <div class="card grid-item grid-item--'+e+'">\n        <div class="card-inner">\n          '+(t.type.localeCompare("vote")?n:i)+'\n        </div>\n        <div class="card-removeBtn">X</div>\n      </div>'}var e=function(){var e=function(t){return function(){var e=t.apply(this,arguments);return new Promise(function(t,n){function i(r,o){try{var s=e[r](o),a=s.value}catch(t){return void n(t)}if(!s.done)return Promise.resolve(a).then(function(t){i("next",t)},function(t){i("throw",t)});t(a)}return i("next")})}}(regeneratorRuntime.mark(function e(){var n,i,l;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n=function(e){return e.reduce(function(e,n){var i=e;return i+=t(u.default[n.id],n.size)},"")}(c.default.order),(0,a.default)(".grid").append(n),i=document.querySelector(".grid"),l=new r.default(i,{itemSelector:".grid-item",columnWidth:".grid-sizer",percentPosition:!0,gutter:0}),e.next=6,new Promise(function(t){a.default.each((0,a.default)("[id=vote]"),function(e,n){a.default.get(""+n.getAttribute("href")+n.getAttribute("tag")+"/statistics",function(e){var i=new Morris.Donut({element:n,data:e.option}),r=n.previousElementSibling;r.previousElementSibling.innerText=""+e.title,r.innerText=""+e.question,n.addEventListener("click",function(){var t=JSON.parse(localStorage.getItem("userData"));window.location.href=t.email&&0!==t.email.length?""+n.getAttribute("href")+t.email+"/"+n.getAttribute("tag"):"#"}),t(i)})})});case 6:return(0,s.default)(i).on("progress",function(){l.layout()}),function(e){function n(t,e){var n=new o.default(e);t.bindDraggabillyEvents(n)}(0,a.default)(".grid").find(".grid-item").each(function(t,i){n(e,i)}),(0,a.default)(".grid").on("click",".card-removeBtn",function(t){e.remove(t.target.parentNode),e.shiftLayout()}),(0,a.default)(".cards-pool").on("click",".pool-btn",function(i){var r=i.target.dataset.id,o=(0,a.default)(t(u.default[r]));(0,a.default)(".grid").append(o);var s=o.find("[id=vote]");a.default.get(""+s.attr("href")+s.attr("tag")+"/statistics",function(t){var e=new Morris.Donut({element:s,data:t.option});return s.prev().text(""+t.title).prev().text(""+t.question),s.on("click",function(){var t=JSON.parse(localStorage.getItem("userData"));window.location.href=t.email&&0!==t.email.length?""+s.attr("href")+t.email+"/"+s.attr("tag"):"#"}),e});var c=(0,a.default)(".grid-item").last();e.appended(c),n(e,c[0]),i.target.parentNode.remove()})}(l),e.abrupt("return",(0,a.default)("[id=vote]"));case 9:case"end":return e.stop()}},e,this)}));return function(){return e.apply(this,arguments)}}();(0,a.default)(document).ready(function(){e(),(0,a.default)(".loader").remove()})}()},137:function(t,e,n){var i,r,o;!function(s,a){r=[n(50),n(94),n(66),n(141),n(142)],void 0===(o="function"==typeof(i=a)?i.apply(e,r):i)||(t.exports=o)}(window,function(t,e,n,i,r){"use strict";function o(t,e){return t.position.y-e.position.y||t.position.x-e.position.x}function s(t,e){return t.position.x-e.position.x||t.position.y-e.position.y}n.prototype.canFit=function(t){return this.width>=t.width-1&&this.height>=t.height-1};var a=e.create("packery");a.Item=r;var u=a.prototype;u._create=function(){e.prototype._create.call(this),this.packer=new i,this.shiftPacker=new i,this.isEnabled=!0,this.dragItemCount=0;var t=this;this.handleDraggabilly={dragStart:function(){t.itemDragStart(this.element)},dragMove:function(){t.itemDragMove(this.element,this.position.x,this.position.y)},dragEnd:function(){t.itemDragEnd(this.element)}},this.handleUIDraggable={start:function(e,n){n&&t.itemDragStart(e.currentTarget)},drag:function(e,n){n&&t.itemDragMove(e.currentTarget,n.position.left,n.position.top)},stop:function(e,n){n&&t.itemDragEnd(e.currentTarget)}}},u._resetLayout=function(){this.getSize(),this._getMeasurements();var t,e,n;this._getOption("horizontal")?(t=1/0,e=this.size.innerHeight+this.gutter,n="rightwardTopToBottom"):(t=this.size.innerWidth+this.gutter,e=1/0,n="downwardLeftToRight"),this.packer.width=this.shiftPacker.width=t,this.packer.height=this.shiftPacker.height=e,this.packer.sortDirection=this.shiftPacker.sortDirection=n,this.packer.reset(),this.maxY=0,this.maxX=0},u._getMeasurements=function(){this._getMeasurement("columnWidth","width"),this._getMeasurement("rowHeight","height"),this._getMeasurement("gutter","width")},u._getItemLayoutPosition=function(t){if(this._setRectSize(t.element,t.rect),this.isShifting||this.dragItemCount>0){var e=this._getPackMethod();this.packer[e](t.rect)}else this.packer.pack(t.rect);return this._setMaxXY(t.rect),t.rect},u.shiftLayout=function(){this.isShifting=!0,this.layout(),delete this.isShifting},u._getPackMethod=function(){return this._getOption("horizontal")?"rowPack":"columnPack"},u._setMaxXY=function(t){this.maxX=Math.max(t.x+t.width,this.maxX),this.maxY=Math.max(t.y+t.height,this.maxY)},u._setRectSize=function(e,n){var i=t(e),r=i.outerWidth,o=i.outerHeight;(r||o)&&(r=this._applyGridGutter(r,this.columnWidth),o=this._applyGridGutter(o,this.rowHeight)),n.width=Math.min(r,this.packer.width),n.height=Math.min(o,this.packer.height)},u._applyGridGutter=function(t,e){if(!e)return t+this.gutter;var n=t%(e+=this.gutter),i=n&&n<1?"round":"ceil";return t=Math[i](t/e)*e},u._getContainerSize=function(){return this._getOption("horizontal")?{width:this.maxX-this.gutter}:{height:this.maxY-this.gutter}},u._manageStamp=function(t){var e,i=this.getItem(t);if(i&&i.isPlacing)e=i.rect;else{var r=this._getElementOffset(t);e=new n({x:this._getOption("originLeft")?r.left:r.right,y:this._getOption("originTop")?r.top:r.bottom})}this._setRectSize(t,e),this.packer.placed(e),this._setMaxXY(e)},u.sortItemsByPosition=function(){var t=this._getOption("horizontal")?s:o;this.items.sort(t)},u.fit=function(t,e,n){var i=this.getItem(t);i&&(this.stamp(i.element),i.enablePlacing(),this.updateShiftTargets(i),e=void 0===e?i.rect.x:e,n=void 0===n?i.rect.y:n,this.shift(i,e,n),this._bindFitEvents(i),i.moveTo(i.rect.x,i.rect.y),this.shiftLayout(),this.unstamp(i.element),this.sortItemsByPosition(),i.disablePlacing())},u._bindFitEvents=function(t){function e(){2==++i&&n.dispatchEvent("fitComplete",null,[t])}var n=this,i=0;t.once("layout",e),this.once("layoutComplete",e)},u.resize=function(){this.isResizeBound&&this.needsResizeLayout()&&(this.options.shiftPercentResize?this.resizeShiftPercentLayout():this.layout())},u.needsResizeLayout=function(){var e=t(this.element),n=this._getOption("horizontal")?"innerHeight":"innerWidth";return e[n]!=this.size[n]},u.resizeShiftPercentLayout=function(){var e=this._getItemsForLayout(this.items),n=this._getOption("horizontal"),i=n?"y":"x",r=n?"height":"width",o=n?"rowHeight":"columnWidth",s=n?"innerHeight":"innerWidth",a=this[o];if(a=a&&a+this.gutter){this._getMeasurements();var u=this[o]+this.gutter;e.forEach(function(t){var e=Math.round(t.rect[i]/a);t.rect[i]=e*u})}else{var c=t(this.element)[s]+this.gutter,l=this.packer[r];e.forEach(function(t){t.rect[i]=t.rect[i]/l*c})}this.shiftLayout()},u.itemDragStart=function(t){if(this.isEnabled){this.stamp(t);var e=this.getItem(t);e&&(e.enablePlacing(),e.showDropPlaceholder(),this.dragItemCount++,this.updateShiftTargets(e))}},u.updateShiftTargets=function(t){this.shiftPacker.reset(),this._getBoundingRect();var e=this._getOption("originLeft"),i=this._getOption("originTop");this.stamps.forEach(function(t){var r=this.getItem(t);if(!r||!r.isPlacing){var o=this._getElementOffset(t),s=new n({x:e?o.left:o.right,y:i?o.top:o.bottom});this._setRectSize(t,s),this.shiftPacker.placed(s)}},this);var r=this._getOption("horizontal"),o=r?"rowHeight":"columnWidth",s=r?"height":"width";this.shiftTargetKeys=[],this.shiftTargets=[];var a,u=this[o];if(u=u&&u+this.gutter){var c=Math.ceil(t.rect[s]/u),l=Math.floor((this.shiftPacker[s]+this.gutter)/u);a=(l-c)*u;for(var h=0;h<l;h++){var f=r?0:h*u,d=r?h*u:0;this._addShiftTarget(f,d,a)}}else a=this.shiftPacker[s]+this.gutter-t.rect[s],this._addShiftTarget(0,0,a);var p=this._getItemsForLayout(this.items),g=this._getPackMethod();p.forEach(function(t){var e=t.rect;this._setRectSize(t.element,e),this.shiftPacker[g](e),this._addShiftTarget(e.x,e.y,a);var n=r?e.x+e.width:e.x,i=r?e.y:e.y+e.height;if(this._addShiftTarget(n,i,a),u)for(var o=Math.round(e[s]/u),c=1;c<o;c++){var l=r?n:e.x+u*c,h=r?e.y+u*c:i;this._addShiftTarget(l,h,a)}},this)},u._addShiftTarget=function(t,e,n){var i=this._getOption("horizontal")?e:t;if(!(0!==i&&i>n)){var r=t+","+e;-1!=this.shiftTargetKeys.indexOf(r)||(this.shiftTargetKeys.push(r),this.shiftTargets.push({x:t,y:e}))}},u.shift=function(t,e,n){var i,r=1/0,o={x:e,y:n};this.shiftTargets.forEach(function(t){var e=function(t,e){var n=e.x-t.x,i=e.y-t.y;return Math.sqrt(n*n+i*i)}(t,o);e<r&&(i=t,r=e)}),t.rect.x=i.x,t.rect.y=i.y},u.itemDragMove=function(t,e,n){function i(){o.shift(r,e,n),r.positionDropPlaceholder(),o.layout()}var r=this.isEnabled&&this.getItem(t);if(r){e-=this.size.paddingLeft,n-=this.size.paddingTop;var o=this,s=new Date;this._itemDragTime&&s-this._itemDragTime<120?(clearTimeout(this.dragTimeout),this.dragTimeout=setTimeout(i,120)):(i(),this._itemDragTime=s)}},u.itemDragEnd=function(t){function e(){2==++i&&(n.element.classList.remove("is-positioning-post-drag"),n.hideDropPlaceholder(),r.dispatchEvent("dragItemPositioned",null,[n]))}var n=this.isEnabled&&this.getItem(t);if(n){clearTimeout(this.dragTimeout),n.element.classList.add("is-positioning-post-drag");var i=0,r=this;n.once("layout",e),this.once("layoutComplete",e),n.moveTo(n.rect.x,n.rect.y),this.layout(),this.dragItemCount=Math.max(0,this.dragItemCount-1),this.sortItemsByPosition(),n.disablePlacing(),this.unstamp(n.element)}},u.bindDraggabillyEvents=function(t){this._bindDraggabillyEvents(t,"on")},u.unbindDraggabillyEvents=function(t){this._bindDraggabillyEvents(t,"off")},u._bindDraggabillyEvents=function(t,e){var n=this.handleDraggabilly;t[e]("dragStart",n.dragStart),t[e]("dragMove",n.dragMove),t[e]("dragEnd",n.dragEnd)},u.bindUIDraggableEvents=function(t){this._bindUIDraggableEvents(t,"on")},u.unbindUIDraggableEvents=function(t){this._bindUIDraggableEvents(t,"off")},u._bindUIDraggableEvents=function(t,e){var n=this.handleUIDraggable;t[e]("dragstart",n.start)[e]("drag",n.drag)[e]("dragstop",n.stop)};var c=u.destroy;return u.destroy=function(){c.apply(this,arguments),this.isEnabled=!1},a.Rect=n,a.Packer=i,a})},138:function(t,e,n){var i,r;!function(o,s){i=[n(139)],void 0===(r=function(t){return s(o,t)}.apply(e,i))||(t.exports=r)}(window,function(t,e){"use strict";var n={};n.extend=function(t,e){for(var n in e)t[n]=e[n];return t},n.modulo=function(t,e){return(t%e+e)%e},n.makeArray=function(t){var e=[];if(Array.isArray(t))e=t;else if(t&&"object"==typeof t&&"number"==typeof t.length)for(var n=0;n<t.length;n++)e.push(t[n]);else e.push(t);return e},n.removeFrom=function(t,e){var n=t.indexOf(e);-1!=n&&t.splice(n,1)},n.getParent=function(t,n){for(;t.parentNode&&t!=document.body;)if(t=t.parentNode,e(t,n))return t},n.getQueryElement=function(t){return"string"==typeof t?document.querySelector(t):t},n.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},n.filterFindElements=function(t,i){var r=[];return(t=n.makeArray(t)).forEach(function(t){if(t instanceof HTMLElement)if(i){e(t,i)&&r.push(t);for(var n=t.querySelectorAll(i),o=0;o<n.length;o++)r.push(n[o])}else r.push(t)}),r},n.debounceMethod=function(t,e,n){var i=t.prototype[e],r=e+"Timeout";t.prototype[e]=function(){var t=this[r];t&&clearTimeout(t);var e=arguments,o=this;this[r]=setTimeout(function(){i.apply(o,e),delete o[r]},n||100)}},n.docReady=function(t){var e=document.readyState;"complete"==e||"interactive"==e?setTimeout(t):document.addEventListener("DOMContentLoaded",t)},n.toDashed=function(t){return t.replace(/(.)([A-Z])/g,function(t,e,n){return e+"-"+n}).toLowerCase()};var i=t.console;return n.htmlInit=function(e,r){n.docReady(function(){var o=n.toDashed(r),s="data-"+o,a=document.querySelectorAll("["+s+"]"),u=document.querySelectorAll(".js-"+o),c=n.makeArray(a).concat(n.makeArray(u)),l=s+"-options",h=t.jQuery;c.forEach(function(t){var n,o=t.getAttribute(s)||t.getAttribute(l);try{n=o&&JSON.parse(o)}catch(e){return void(i&&i.error("Error parsing "+s+" on "+t.className+": "+e))}var a=new e(t,n);h&&h.data(t,r,a)})})},n})},139:function(t,e,n){var i,r;!function(o,s){"use strict";void 0===(r="function"==typeof(i=s)?i.call(e,n,e,t):i)||(t.exports=r)}(window,function(){"use strict";var t=function(){var t=window.Element.prototype;if(t.matches)return"matches";if(t.matchesSelector)return"matchesSelector";for(var e=["webkit","moz","ms","o"],n=0;n<e.length;n++){var i=e[n]+"MatchesSelector";if(t[i])return i}}();return function(e,n){return e[t](n)}})},140:function(t,e,n){var i,r,o;!function(s,a){r=[n(65),n(50)],void 0===(o="function"==typeof(i=a)?i.apply(e,r):i)||(t.exports=o)}(window,function(t,e){"use strict";function n(t,e){t&&(this.element=t,this.layout=e,this.position={x:0,y:0},this._create())}var i=document.documentElement.style,r="string"==typeof i.transition?"transition":"WebkitTransition",o="string"==typeof i.transform?"transform":"WebkitTransform",s={WebkitTransition:"webkitTransitionEnd",transition:"transitionend"}[r],a={transform:o,transition:r,transitionDuration:r+"Duration",transitionProperty:r+"Property",transitionDelay:r+"Delay"},u=n.prototype=Object.create(t.prototype);u.constructor=n,u._create=function(){this._transn={ingProperties:{},clean:{},onEnd:{}},this.css({position:"absolute"})},u.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},u.getSize=function(){this.size=e(this.element)},u.css=function(t){var e=this.element.style;for(var n in t)e[a[n]||n]=t[n]},u.getPosition=function(){var t=getComputedStyle(this.element),e=this.layout._getOption("originLeft"),n=this.layout._getOption("originTop"),i=t[e?"left":"right"],r=t[n?"top":"bottom"],o=parseFloat(i),s=parseFloat(r),a=this.layout.size;-1!=i.indexOf("%")&&(o=o/100*a.width),-1!=r.indexOf("%")&&(s=s/100*a.height),o=isNaN(o)?0:o,s=isNaN(s)?0:s,o-=e?a.paddingLeft:a.paddingRight,s-=n?a.paddingTop:a.paddingBottom,this.position.x=o,this.position.y=s},u.layoutPosition=function(){var t=this.layout.size,e={},n=this.layout._getOption("originLeft"),i=this.layout._getOption("originTop"),r=n?"paddingLeft":"paddingRight",o=n?"left":"right",s=n?"right":"left",a=this.position.x+t[r];e[o]=this.getXValue(a),e[s]="";var u=i?"paddingTop":"paddingBottom",c=i?"top":"bottom",l=i?"bottom":"top",h=this.position.y+t[u];e[c]=this.getYValue(h),e[l]="",this.css(e),this.emitEvent("layout",[this])},u.getXValue=function(t){var e=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&!e?t/this.layout.size.width*100+"%":t+"px"},u.getYValue=function(t){var e=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&e?t/this.layout.size.height*100+"%":t+"px"},u._transitionTo=function(t,e){this.getPosition();var n=this.position.x,i=this.position.y,r=t==this.position.x&&e==this.position.y;if(this.setPosition(t,e),!r||this.isTransitioning){var o=t-n,s=e-i,a={};a.transform=this.getTranslate(o,s),this.transition({to:a,onTransitionEnd:{transform:this.layoutPosition},isCleaning:!0})}else this.layoutPosition()},u.getTranslate=function(t,e){var n=this.layout._getOption("originLeft"),i=this.layout._getOption("originTop");return t=n?t:-t,e=i?e:-e,"translate3d("+t+"px, "+e+"px, 0)"},u.goTo=function(t,e){this.setPosition(t,e),this.layoutPosition()},u.moveTo=u._transitionTo,u.setPosition=function(t,e){this.position.x=parseFloat(t),this.position.y=parseFloat(e)},u._nonTransition=function(t){this.css(t.to),t.isCleaning&&this._removeStyles(t.to);for(var e in t.onTransitionEnd)t.onTransitionEnd[e].call(this)},u.transition=function(t){if(parseFloat(this.layout.options.transitionDuration)){var e=this._transn;for(var n in t.onTransitionEnd)e.onEnd[n]=t.onTransitionEnd[n];for(n in t.to)e.ingProperties[n]=!0,t.isCleaning&&(e.clean[n]=!0);t.from&&(this.css(t.from),this.element.offsetHeight),this.enableTransition(t.to),this.css(t.to),this.isTransitioning=!0}else this._nonTransition(t)};var c="opacity,"+function(t){return t.replace(/([A-Z])/g,function(t){return"-"+t.toLowerCase()})}(o);u.enableTransition=function(){if(!this.isTransitioning){var t=this.layout.options.transitionDuration;t="number"==typeof t?t+"ms":t,this.css({transitionProperty:c,transitionDuration:t,transitionDelay:this.staggerDelay||0}),this.element.addEventListener(s,this,!1)}},u.onwebkitTransitionEnd=function(t){this.ontransitionend(t)},u.onotransitionend=function(t){this.ontransitionend(t)};var l={"-webkit-transform":"transform"};u.ontransitionend=function(t){if(t.target===this.element){var e=this._transn,n=l[t.propertyName]||t.propertyName;delete e.ingProperties[n],function(t){for(var e in t)return!1;return!0}(e.ingProperties)&&this.disableTransition(),n in e.clean&&(this.element.style[t.propertyName]="",delete e.clean[n]),n in e.onEnd&&(e.onEnd[n].call(this),delete e.onEnd[n]),this.emitEvent("transitionEnd",[this])}},u.disableTransition=function(){this.removeTransitionStyles(),this.element.removeEventListener(s,this,!1),this.isTransitioning=!1},u._removeStyles=function(t){var e={};for(var n in t)e[n]="";this.css(e)};var h={transitionProperty:"",transitionDuration:"",transitionDelay:""};return u.removeTransitionStyles=function(){this.css(h)},u.stagger=function(t){t=isNaN(t)?0:t,this.staggerDelay=t+"ms"},u.removeElem=function(){this.element.parentNode.removeChild(this.element),this.css({display:""}),this.emitEvent("remove",[this])},u.remove=function(){r&&parseFloat(this.layout.options.transitionDuration)?(this.once("transitionEnd",function(){this.removeElem()}),this.hide()):this.removeElem()},u.reveal=function(){delete this.isHidden,this.css({display:""});var t=this.layout.options,e={};e[this.getHideRevealTransitionEndProperty("visibleStyle")]=this.onRevealTransitionEnd,this.transition({from:t.hiddenStyle,to:t.visibleStyle,isCleaning:!0,onTransitionEnd:e})},u.onRevealTransitionEnd=function(){this.isHidden||this.emitEvent("reveal")},u.getHideRevealTransitionEndProperty=function(t){var e=this.layout.options[t];if(e.opacity)return"opacity";for(var n in e)return n},u.hide=function(){this.isHidden=!0,this.css({display:""});var t=this.layout.options,e={};e[this.getHideRevealTransitionEndProperty("hiddenStyle")]=this.onHideTransitionEnd,this.transition({from:t.visibleStyle,to:t.hiddenStyle,isCleaning:!0,onTransitionEnd:e})},u.onHideTransitionEnd=function(){this.isHidden&&(this.css({display:"none"}),this.emitEvent("hide"))},u.destroy=function(){this.css({position:"",left:"",right:"",top:"",bottom:"",transition:"",transform:""})},n})},141:function(t,e,n){var i,r,o;!function(s,a){r=[n(66)],void 0===(o="function"==typeof(i=a)?i.apply(e,r):i)||(t.exports=o)}(window,function(t){"use strict";function e(t,e,n){this.width=t||0,this.height=e||0,this.sortDirection=n||"downwardLeftToRight",this.reset()}var n=e.prototype;n.reset=function(){this.spaces=[];var e=new t({x:0,y:0,width:this.width,height:this.height});this.spaces.push(e),this.sorter=i[this.sortDirection]||i.downwardLeftToRight},n.pack=function(t){for(var e=0;e<this.spaces.length;e++){var n=this.spaces[e];if(n.canFit(t)){this.placeInSpace(t,n);break}}},n.columnPack=function(t){for(var e=0;e<this.spaces.length;e++){var n=this.spaces[e];if(n.x<=t.x&&n.x+n.width>=t.x+t.width&&n.height>=t.height-.01){t.y=n.y,this.placed(t);break}}},n.rowPack=function(t){for(var e=0;e<this.spaces.length;e++){var n=this.spaces[e];if(n.y<=t.y&&n.y+n.height>=t.y+t.height&&n.width>=t.width-.01){t.x=n.x,this.placed(t);break}}},n.placeInSpace=function(t,e){t.x=e.x,t.y=e.y,this.placed(t)},n.placed=function(t){for(var e=[],n=0;n<this.spaces.length;n++){var i=this.spaces[n],r=i.getMaximalFreeRects(t);r?e.push.apply(e,r):e.push(i)}this.spaces=e,this.mergeSortSpaces()},n.mergeSortSpaces=function(){e.mergeRects(this.spaces),this.spaces.sort(this.sorter)},n.addSpace=function(t){this.spaces.push(t),this.mergeSortSpaces()},e.mergeRects=function(t){var e=0,n=t[e];t:for(;n;){for(var i=0,r=t[e+i];r;){if(r==n)i++;else{if(r.contains(n)){t.splice(e,1),n=t[e];continue t}n.contains(r)?t.splice(e+i,1):i++}r=t[e+i]}n=t[++e]}return t};var i={downwardLeftToRight:function(t,e){return t.y-e.y||t.x-e.x},rightwardTopToBottom:function(t,e){return t.x-e.x||t.y-e.y}};return e})},142:function(t,e,n){var i,r,o;!function(s,a){r=[n(94),n(66)],void 0===(o="function"==typeof(i=a)?i.apply(e,r):i)||(t.exports=o)}(window,function(t,e){"use strict";var n="string"==typeof document.documentElement.style.transform?"transform":"WebkitTransform",i=function(){t.Item.apply(this,arguments)},r=i.prototype=Object.create(t.Item.prototype),o=r._create;r._create=function(){o.call(this),this.rect=new e};var s=r.moveTo;return r.moveTo=function(t,e){var n=Math.abs(this.position.x-t),i=Math.abs(this.position.y-e);this.layout.dragItemCount&&!this.isPlacing&&!this.isTransitioning&&n<1&&i<1?this.goTo(t,e):s.apply(this,arguments)},r.enablePlacing=function(){this.removeTransitionStyles(),this.isTransitioning&&n&&(this.element.style[n]="none"),this.isTransitioning=!1,this.getSize(),this.layout._setRectSize(this.element,this.rect),this.isPlacing=!0},r.disablePlacing=function(){this.isPlacing=!1},r.removeElem=function(){this.element.parentNode.removeChild(this.element),this.layout.packer.addSpace(this.rect),this.emitEvent("remove",[this])},r.showDropPlaceholder=function(){var t=this.dropPlaceholder;t||((t=this.dropPlaceholder=document.createElement("div")).className="packery-drop-placeholder",t.style.position="absolute"),t.style.width=this.size.width+"px",t.style.height=this.size.height+"px",this.positionDropPlaceholder(),this.layout.element.appendChild(t)},r.positionDropPlaceholder=function(){this.dropPlaceholder.style[n]="translate("+this.rect.x+"px, "+this.rect.y+"px)"},r.hideDropPlaceholder=function(){var t=this.dropPlaceholder.parentNode;t&&t.removeChild(this.dropPlaceholder)},i})},143:function(t,e,n){var i,r;!function(o,s){i=[n(50),n(144)],void 0===(r=function(t,e){return s(o,t,e)}.apply(e,i))||(t.exports=r)}(window,function(t,e,n){"use strict";function i(t,e){for(var n in e)t[n]=e[n];return t}function r(t,e){this.element="string"==typeof t?s.querySelector(t):t,l&&(this.$element=l(this.element)),this.options=i({},this.constructor.defaults),this.option(e),this._create()}function o(t,e,n){return n=n||"round",e?Math[n](t/e)*e:t}var s=t.document,a=t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame,u=0;a||(a=function(t){var e=(new Date).getTime(),n=Math.max(0,16-(e-u)),i=setTimeout(t,n);return u=e+n,i});var c="string"==typeof s.documentElement.style.transform?"transform":"WebkitTransform",l=t.jQuery,h=r.prototype=Object.create(n.prototype);r.defaults={},h.option=function(t){i(this.options,t)};var f={relative:!0,absolute:!0,fixed:!0};return h._create=function(){this.position={},this._getPosition(),this.startPoint={x:0,y:0},this.dragPoint={x:0,y:0},this.startPosition=i({},this.position);var t=getComputedStyle(this.element);f[t.position]||(this.element.style.position="relative"),this.enable(),this.setHandles()},h.setHandles=function(){this.handles=this.options.handle?this.element.querySelectorAll(this.options.handle):[this.element],this.bindHandles()},h.dispatchEvent=function(e,n,i){var r=[n].concat(i);this.emitEvent(e,r);var o=t.jQuery;if(o&&this.$element)if(n){var s=o.Event(n);s.type=e,this.$element.trigger(s,i)}else this.$element.trigger(e,i)},h._getPosition=function(){var t=getComputedStyle(this.element),e=this._getPositionCoord(t.left,"width"),n=this._getPositionCoord(t.top,"height");this.position.x=isNaN(e)?0:e,this.position.y=isNaN(n)?0:n,this._addTransformPosition(t)},h._getPositionCoord=function(t,n){if(-1!=t.indexOf("%")){var i=e(this.element.parentNode);return i?parseFloat(t)/100*i[n]:0}return parseInt(t,10)},h._addTransformPosition=function(t){var e=t[c];if(0===e.indexOf("matrix")){var n=e.split(","),i=0===e.indexOf("matrix3d")?12:4,r=parseInt(n[i],10),o=parseInt(n[i+1],10);this.position.x+=r,this.position.y+=o}},h.pointerDown=function(t,e){this._dragPointerDown(t,e);var n=s.activeElement;n&&n.blur&&n!=s.body&&n.blur(),this._bindPostStartEvents(t),this.element.classList.add("is-pointer-down"),this.dispatchEvent("pointerDown",t,[e])},h.pointerMove=function(t,e){var n=this._dragPointerMove(t,e);this.dispatchEvent("pointerMove",t,[e,n]),this._dragMove(t,e,n)},h.dragStart=function(t,e){this.isEnabled&&(this._getPosition(),this.measureContainment(),this.startPosition.x=this.position.x,this.startPosition.y=this.position.y,this.setLeftTop(),this.dragPoint.x=0,this.dragPoint.y=0,this.element.classList.add("is-dragging"),this.dispatchEvent("dragStart",t,[e]),this.animate())},h.measureContainment=function(){var t=this.options.containment;if(t){var n=function(t){return t instanceof HTMLElement}(t)?t:"string"==typeof t?s.querySelector(t):this.element.parentNode,i=e(this.element),r=e(n),o=this.element.getBoundingClientRect(),a=n.getBoundingClientRect(),u=r.borderLeftWidth+r.borderRightWidth,c=r.borderTopWidth+r.borderBottomWidth,l=this.relativeStartPosition={x:o.left-(a.left+r.borderLeftWidth),y:o.top-(a.top+r.borderTopWidth)};this.containSize={width:r.width-u-l.x-i.width,height:r.height-c-l.y-i.height}}},h.dragMove=function(t,e,n){if(this.isEnabled){var i=n.x,r=n.y,s=this.options.grid,a=s&&s[0],u=s&&s[1];i=o(i,a),r=o(r,u),i=this.containDrag("x",i,a),r=this.containDrag("y",r,u),i="y"==this.options.axis?0:i,r="x"==this.options.axis?0:r,this.position.x=this.startPosition.x+i,this.position.y=this.startPosition.y+r,this.dragPoint.x=i,this.dragPoint.y=r,this.dispatchEvent("dragMove",t,[e,n])}},h.containDrag=function(t,e,n){if(!this.options.containment)return e;var i="x"==t?"width":"height",r=o(-this.relativeStartPosition[t],n,"ceil"),s=this.containSize[i];return s=o(s,n,"floor"),Math.min(s,Math.max(r,e))},h.pointerUp=function(t,e){this.element.classList.remove("is-pointer-down"),this.dispatchEvent("pointerUp",t,[e]),this._dragPointerUp(t,e)},h.dragEnd=function(t,e){this.isEnabled&&(c&&(this.element.style[c]="",this.setLeftTop()),this.element.classList.remove("is-dragging"),this.dispatchEvent("dragEnd",t,[e]))},h.animate=function(){if(this.isDragging){this.positionDrag();var t=this;a(function(){t.animate()})}},h.setLeftTop=function(){this.element.style.left=this.position.x+"px",this.element.style.top=this.position.y+"px"},h.positionDrag=function(){this.element.style[c]="translate3d( "+this.dragPoint.x+"px, "+this.dragPoint.y+"px, 0)"},h.staticClick=function(t,e){this.dispatchEvent("staticClick",t,[e])},h.enable=function(){this.isEnabled=!0},h.disable=function(){this.isEnabled=!1,this.isDragging&&this.dragEnd()},h.destroy=function(){this.disable(),this.element.style[c]="",this.element.style.left="",this.element.style.top="",this.element.style.position="",this.unbindHandles(),this.$element&&this.$element.removeData("draggabilly")},h._init=function(){},l&&l.bridget&&l.bridget("draggabilly",r),r})},144:function(t,e,n){var i,r;!function(o,s){i=[n(145)],void 0===(r=function(t){return s(o,t)}.apply(e,i))||(t.exports=r)}(window,function(t,e){"use strict";function n(){}function i(){}var r=i.prototype=Object.create(e.prototype);r.bindHandles=function(){this._bindHandles(!0)},r.unbindHandles=function(){this._bindHandles(!1)};var o=t.navigator;return r._bindHandles=function(t){t=void 0===t||!!t;var e;e=o.pointerEnabled?function(e){e.style.touchAction=t?"none":""}:o.msPointerEnabled?function(e){e.style.msTouchAction=t?"none":""}:n;for(var i=t?"addEventListener":"removeEventListener",r=0;r<this.handles.length;r++){var s=this.handles[r];this._bindStartEvent(s,t),e(s),s[i]("click",this)}},r.pointerDown=function(t,e){if("INPUT"==t.target.nodeName&&"range"==t.target.type)return this.isPointerDown=!1,void delete this.pointerIdentifier;this._dragPointerDown(t,e);var n=document.activeElement;n&&n.blur&&n.blur(),this._bindPostStartEvents(t),this.emitEvent("pointerDown",[t,e])},r._dragPointerDown=function(t,n){this.pointerDownPoint=e.getPointerPoint(n),this.canPreventDefaultOnPointerDown(t,n)&&t.preventDefault()},r.canPreventDefaultOnPointerDown=function(t){return"SELECT"!=t.target.nodeName},r.pointerMove=function(t,e){var n=this._dragPointerMove(t,e);this.emitEvent("pointerMove",[t,e,n]),this._dragMove(t,e,n)},r._dragPointerMove=function(t,n){var i=e.getPointerPoint(n),r={x:i.x-this.pointerDownPoint.x,y:i.y-this.pointerDownPoint.y};return!this.isDragging&&this.hasDragStarted(r)&&this._dragStart(t,n),r},r.hasDragStarted=function(t){return Math.abs(t.x)>3||Math.abs(t.y)>3},r.pointerUp=function(t,e){this.emitEvent("pointerUp",[t,e]),this._dragPointerUp(t,e)},r._dragPointerUp=function(t,e){this.isDragging?this._dragEnd(t,e):this._staticClick(t,e)},r._dragStart=function(t,n){this.isDragging=!0,this.dragStartPoint=e.getPointerPoint(n),this.isPreventingClicks=!0,this.dragStart(t,n)},r.dragStart=function(t,e){this.emitEvent("dragStart",[t,e])},r._dragMove=function(t,e,n){this.isDragging&&this.dragMove(t,e,n)},r.dragMove=function(t,e,n){t.preventDefault(),this.emitEvent("dragMove",[t,e,n])},r._dragEnd=function(t,e){this.isDragging=!1,setTimeout(function(){delete this.isPreventingClicks}.bind(this)),this.dragEnd(t,e)},r.dragEnd=function(t,e){this.emitEvent("dragEnd",[t,e])},r.onclick=function(t){this.isPreventingClicks&&t.preventDefault()},r._staticClick=function(t,e){if(!this.isIgnoringMouseUp||"mouseup"!=t.type){var n=t.target.nodeName;"INPUT"!=n&&"TEXTAREA"!=n||t.target.focus(),this.staticClick(t,e),"mouseup"!=t.type&&(this.isIgnoringMouseUp=!0,setTimeout(function(){delete this.isIgnoringMouseUp}.bind(this),400))}},r.staticClick=function(t,e){this.emitEvent("staticClick",[t,e])},i.getPointerPoint=e.getPointerPoint,i})},145:function(t,e,n){var i,r;!function(o,s){i=[n(146)],void 0===(r=function(t){return s(o,t)}.apply(e,i))||(t.exports=r)}(window,function(t,e){"use strict";function n(){}var i=n.prototype=Object.create(e.prototype);i.bindStartEvent=function(t){this._bindStartEvent(t,!0)},i.unbindStartEvent=function(t){this._bindStartEvent(t,!1)},i._bindStartEvent=function(e,n){var i=(n=void 0===n||!!n)?"addEventListener":"removeEventListener";t.navigator.pointerEnabled?e[i]("pointerdown",this):t.navigator.msPointerEnabled?e[i]("MSPointerDown",this):(e[i]("mousedown",this),e[i]("touchstart",this))},i.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},i.getTouch=function(t){for(var e=0;e<t.length;e++){var n=t[e];if(n.identifier==this.pointerIdentifier)return n}},i.onmousedown=function(t){var e=t.button;e&&0!==e&&1!==e||this._pointerDown(t,t)},i.ontouchstart=function(t){this._pointerDown(t,t.changedTouches[0])},i.onMSPointerDown=i.onpointerdown=function(t){this._pointerDown(t,t)},i._pointerDown=function(t,e){this.isPointerDown||(this.isPointerDown=!0,this.pointerIdentifier=void 0!==e.pointerId?e.pointerId:e.identifier,this.pointerDown(t,e))},i.pointerDown=function(t,e){this._bindPostStartEvents(t),this.emitEvent("pointerDown",[t,e])};var r={mousedown:["mousemove","mouseup"],touchstart:["touchmove","touchend","touchcancel"],pointerdown:["pointermove","pointerup","pointercancel"],MSPointerDown:["MSPointerMove","MSPointerUp","MSPointerCancel"]};return i._bindPostStartEvents=function(e){if(e){var n=r[e.type];n.forEach(function(e){t.addEventListener(e,this)},this),this._boundPointerEvents=n}},i._unbindPostStartEvents=function(){this._boundPointerEvents&&(this._boundPointerEvents.forEach(function(e){t.removeEventListener(e,this)},this),delete this._boundPointerEvents)},i.onmousemove=function(t){this._pointerMove(t,t)},i.onMSPointerMove=i.onpointermove=function(t){t.pointerId==this.pointerIdentifier&&this._pointerMove(t,t)},i.ontouchmove=function(t){var e=this.getTouch(t.changedTouches);e&&this._pointerMove(t,e)},i._pointerMove=function(t,e){this.pointerMove(t,e)},i.pointerMove=function(t,e){this.emitEvent("pointerMove",[t,e])},i.onmouseup=function(t){this._pointerUp(t,t)},i.onMSPointerUp=i.onpointerup=function(t){t.pointerId==this.pointerIdentifier&&this._pointerUp(t,t)},i.ontouchend=function(t){var e=this.getTouch(t.changedTouches);e&&this._pointerUp(t,e)},i._pointerUp=function(t,e){this._pointerDone(),this.pointerUp(t,e)},i.pointerUp=function(t,e){this.emitEvent("pointerUp",[t,e])},i._pointerDone=function(){this.isPointerDown=!1,delete this.pointerIdentifier,this._unbindPostStartEvents(),this.pointerDone()},i.pointerDone=function(){},i.onMSPointerCancel=i.onpointercancel=function(t){t.pointerId==this.pointerIdentifier&&this._pointerCancel(t,t)},i.ontouchcancel=function(t){var e=this.getTouch(t.changedTouches);e&&this._pointerCancel(t,e)},i._pointerCancel=function(t,e){this._pointerDone(),this.pointerCancel(t,e)},i.pointerCancel=function(t,e){this.emitEvent("pointerCancel",[t,e])},n.getPointerPoint=function(t){return{x:t.pageX,y:t.pageY}},n})},146:function(t,e,n){var i,r;!function(o,s){void 0===(r="function"==typeof(i=s)?i.call(e,n,e,t):i)||(t.exports=r)}("undefined"!=typeof window&&window,function(){"use strict";function t(){}var e=t.prototype;return e.on=function(t,e){if(t&&e){var n=this._events=this._events||{},i=n[t]=n[t]||[];return-1==i.indexOf(e)&&i.push(e),this}},e.once=function(t,e){if(t&&e){this.on(t,e);var n=this._onceEvents=this._onceEvents||{};return(n[t]=n[t]||{})[e]=!0,this}},e.off=function(t,e){var n=this._events&&this._events[t];if(n&&n.length){var i=n.indexOf(e);return-1!=i&&n.splice(i,1),this}},e.emitEvent=function(t,e){var n=this._events&&this._events[t];if(n&&n.length){var i=0,r=n[i];e=e||[];for(var o=this._onceEvents&&this._onceEvents[t];r;){var s=o&&o[r];s&&(this.off(t,r),delete o[r]),r.apply(this,e),r=n[i+=s?0:1]}return this}},t})},147:function(t,e,n){var i,r;!function(o,s){"use strict";i=[n(65)],void 0===(r=function(t){return s(o,t)}.apply(e,i))||(t.exports=r)}("undefined"!=typeof window?window:this,function(t,e){"use strict";function n(t,e){for(var n in e)t[n]=e[n];return t}function i(t,e,r){if(!(this instanceof i))return new i(t,e,r);var o=t;"string"==typeof t&&(o=document.querySelectorAll(t)),o?(this.elements=function(t){return Array.isArray(t)?t:"object"==typeof t&&"number"==typeof t.length?u.call(t):[t]}(o),this.options=n({},this.options),"function"==typeof e?r=e:n(this.options,e),r&&this.on("always",r),this.getImages(),s&&(this.jqDeferred=new s.Deferred),setTimeout(this.check.bind(this))):a.error("Bad element for imagesLoaded "+(o||t))}function r(t){this.img=t}function o(t,e){this.url=t,this.element=e,this.img=new Image}var s=t.jQuery,a=t.console,u=Array.prototype.slice;(i.prototype=Object.create(e.prototype)).options={},i.prototype.getImages=function(){this.images=[],this.elements.forEach(this.addElementImages,this)},i.prototype.addElementImages=function(t){"IMG"==t.nodeName&&this.addImage(t),!0===this.options.background&&this.addElementBackgroundImages(t);var e=t.nodeType;if(e&&c[e]){for(var n=t.querySelectorAll("img"),i=0;i<n.length;i++){var r=n[i];this.addImage(r)}if("string"==typeof this.options.background){var o=t.querySelectorAll(this.options.background);for(i=0;i<o.length;i++){var s=o[i];this.addElementBackgroundImages(s)}}}};var c={1:!0,9:!0,11:!0};return i.prototype.addElementBackgroundImages=function(t){var e=getComputedStyle(t);if(e)for(var n=/url\((['"])?(.*?)\1\)/gi,i=n.exec(e.backgroundImage);null!==i;){var r=i&&i[2];r&&this.addBackground(r,t),i=n.exec(e.backgroundImage)}},i.prototype.addImage=function(t){var e=new r(t);this.images.push(e)},i.prototype.addBackground=function(t,e){var n=new o(t,e);this.images.push(n)},i.prototype.check=function(){function t(t,n,i){setTimeout(function(){e.progress(t,n,i)})}var e=this;this.progressedCount=0,this.hasAnyBroken=!1,this.images.length?this.images.forEach(function(e){e.once("progress",t),e.check()}):this.complete()},i.prototype.progress=function(t,e,n){this.progressedCount++,this.hasAnyBroken=this.hasAnyBroken||!t.isLoaded,this.emitEvent("progress",[this,t,e]),this.jqDeferred&&this.jqDeferred.notify&&this.jqDeferred.notify(this,t),this.progressedCount==this.images.length&&this.complete(),this.options.debug&&a&&a.log("progress: "+n,t,e)},i.prototype.complete=function(){var t=this.hasAnyBroken?"fail":"done";if(this.isComplete=!0,this.emitEvent(t,[this]),this.emitEvent("always",[this]),this.jqDeferred){var e=this.hasAnyBroken?"reject":"resolve";this.jqDeferred[e](this)}},r.prototype=Object.create(e.prototype),r.prototype.check=function(){this.getIsImageComplete()?this.confirm(0!==this.img.naturalWidth,"naturalWidth"):(this.proxyImage=new Image,this.proxyImage.addEventListener("load",this),this.proxyImage.addEventListener("error",this),this.img.addEventListener("load",this),this.img.addEventListener("error",this),this.proxyImage.src=this.img.src)},r.prototype.getIsImageComplete=function(){return this.img.complete&&this.img.naturalWidth},r.prototype.confirm=function(t,e){this.isLoaded=t,this.emitEvent("progress",[this,this.img,e])},r.prototype.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},r.prototype.onload=function(){this.confirm(!0,"onload"),this.unbindEvents()},r.prototype.onerror=function(){this.confirm(!1,"onerror"),this.unbindEvents()},r.prototype.unbindEvents=function(){this.proxyImage.removeEventListener("load",this),this.proxyImage.removeEventListener("error",this),this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},o.prototype=Object.create(r.prototype),o.prototype.check=function(){this.img.addEventListener("load",this),this.img.addEventListener("error",this),this.img.src=this.url,this.getIsImageComplete()&&(this.confirm(0!==this.img.naturalWidth,"naturalWidth"),this.unbindEvents())},o.prototype.unbindEvents=function(){this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},o.prototype.confirm=function(t,e){this.isLoaded=t,this.emitEvent("progress",[this,this.element,e])},i.makeJQueryPlugin=function(e){(e=e||t.jQuery)&&((s=e).fn.imagesLoaded=function(t,e){return new i(this,t,e).jqDeferred.promise(s(this))})},i.makeJQueryPlugin(),i})},148:function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{default:t}}var r=i(n(31)),o=i(n(95)),s=i(n(96));!function(){function t(t){return!e.includes(t.id)}var e=s.default.usedID;!function(){var e=Object.values(o.default).filter(t).reduce(function(t,e){var n=t;return n+=function(t){return'\n                      <li class="pool-item">\n                        <button data-id="'+t.id+'" class="btn btn--reset pool-btn">'+t.title+"</button>\n                      </li>\n                    "}(e)},"");(0,r.default)(".cards-pool  ul").append(e)}()}()},149:function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{default:t}}var r=i(n(31)),o=i(n(150)),s=i(n(97));!function(){function t(){(0,r.default)(".navbar-nav").append(o.default.authNavItemTemplate()),(0,r.default)("header").append(o.default.userMenuTemplate()+o.default.setupFormTemplate())}function e(){(0,r.default)(".navbar-nav").append(o.default.unAuthNavItemTemplate()),(0,r.default)("header").append(o.default.signupFormTemplate()+o.default.loginFormTemplate())}!function(){(0,s.default)()?t():e()}()}()},150:function(t,e,n){"use strict";function i(t){return'\n    <div class="form-row">\n      <div class="inputGroup">\n        <span class="input-label">'+t.label+'</span>\n        <input class="input-box" type="'+t.type+'" name="'+t.label+'">\n      </div>\n    </div>\n  '}function r(t,e){return'\n    <div class="popover authForm-pop '+t.url+'-pop">\n      <div class="popover-inner">\n        <h2 class="form-title">'+t.title+'</h2>\n        <form id="form--'+t.url+'">\n          '+e.map(i).join("")+'\n          <div class="form-row">\n            <div id="errorMsg--'+t.url+'" class="flash-error"></div>\n          </div>\n          <div class="form-row">\n            <button id="btn--'+t.url+'" class="btn--submit">Submit</button>\n          </div>\n        </form>\n      </div>\n    </div>'}Object.defineProperty(e,"__esModule",{value:!0}),e.default={loginFormTemplate:function(){return r({url:"login",method:"post",title:"Login"},[{label:"email",type:"email"},{label:"password",type:"password"}])},signupFormTemplate:function(){return r({url:"signup",method:"post",title:"Signup"},[{label:"nickname",type:"text"},{label:"email",type:"email"},{label:"password",type:"password"}])},userMenuTemplate:function(){return' \n    <div class="popover avatar-pop">\n      <div class="popover-inner">\n        <ul class="list">\n          <li class="list-item"><a class="btn" href="#">Profile</a></li>\n          <li class="list-item"><button id="menu--setup" class="btn btn--reset" >Setting</button></li>\n          <li class="list-item"><button id="btn--logout" class="btn btn--reset" >Logout</button></li>\n        </ul>\n      </div>\n    </div>'},authNavItemTemplate:function(){return'\n    <li class="nav-item">\n      <button id="menu--topAvatar" class="btn btn--reset">\n        <div class="avatar">\n          <img class="avatar-img" src="./assets/media/avatar.svg" alt="avatar">\n        </div>\n      </button>\n    </li>'},unAuthNavItemTemplate:function(){return'\n    <li class="nav-item"><button id="menu--signup" class="btn btn--reset btn--icon">Signup</button></li>\n    <li class="nav-item"><button id="menu--login" class="btn btn--reset btn--icon">Login</button></li>\n  '},setupFormTemplate:function(){return r({url:"setup",method:"post",title:"Setup"},[{label:"zapperId",type:"text"}])}}},151:function(t,e,n){"use strict";var i=function(t){return t&&t.__esModule?t:{default:t}}(n(31));!function(){function t(t){(0,i.default)(t[0]).removeClass("pop--active"),(0,i.default)(t[1]).toggleClass("pop--active")}(0,i.default)("#menu--topAvatar").click(function(){t([".setup-pop",".avatar-pop"])}),(0,i.default)("#menu--signup").click(function(){t([".login-pop",".signup-pop"])}),(0,i.default)("#menu--login").click(function(){t([".signup-pop",".login-pop"])}),(0,i.default)("#menu--setup").click(function(){t([".avatar-pop",".setup-pop"])}),(0,i.default)(".cards-pool--switch button").click(function(){(0,i.default)(".cards-pool").toggleClass("pool--active"),(0,i.default)(".cards-pool--switch").toggleClass("switch--active");var t=(0,i.default)(".cards-pool").hasClass("pool--active")?"v":"+";(0,i.default)(".cards-pool--switch button").text(t)})}()},152:function(t,e,n){t.exports=n.p+"./assets/media/path.png"},153:function(t,e,n){t.exports=n.p+"./assets/media/zapper.png"},154:function(t,e,n){t.exports=n.p+"./assets/media/map.png"},155:function(t,e,n){t.exports=n.p+"./assets/media/avatar.svg"},156:function(t,e,n){t.exports=n.p+"./assets/media/logo.png"},31:function(t,e,n){var i;!function(e,n){"use strict";"object"==typeof t&&"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,function(n,r){"use strict";function o(t,e){var n=(e=e||K).createElement("script");n.text=t,e.head.appendChild(n).parentNode.removeChild(n)}function s(t){var e=!!t&&"length"in t&&t.length,n=lt.type(t);return"function"!==n&&!lt.isWindow(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}function a(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}function u(t,e,n){return lt.isFunction(e)?lt.grep(t,function(t,i){return!!e.call(t,i,t)!==n}):e.nodeType?lt.grep(t,function(t){return t===e!==n}):"string"!=typeof e?lt.grep(t,function(t){return it.call(e,t)>-1!==n}):bt.test(e)?lt.filter(e,t,n):(e=lt.filter(e,t),lt.grep(t,function(t){return it.call(e,t)>-1!==n&&1===t.nodeType}))}function c(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function l(t){return t}function h(t){throw t}function f(t,e,n,i){var r;try{t&&lt.isFunction(r=t.promise)?r.call(t).done(e).fail(n):t&&lt.isFunction(r=t.then)?r.call(t,e,n):e.apply(void 0,[t].slice(i))}catch(t){n.apply(void 0,[t])}}function d(){K.removeEventListener("DOMContentLoaded",d),n.removeEventListener("load",d),lt.ready()}function p(){this.expando=lt.expando+p.uid++}function g(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(At,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(i))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:Nt.test(t)?JSON.parse(t):t)}(n)}catch(t){}It.set(t,e,n)}else n=void 0;return n}function m(t,e,n,i){var r,o=1,s=20,a=i?function(){return i.cur()}:function(){return lt.css(t,e,"")},u=a(),c=n&&n[3]||(lt.cssNumber[e]?"":"px"),l=(lt.cssNumber[e]||"px"!==c&&+u)&&Mt.exec(lt.css(t,e));if(l&&l[3]!==c){c=c||l[3],n=n||[],l=+u||1;do{l/=o=o||".5",lt.style(t,e,l+c)}while(o!==(o=a()/u)&&1!==o&&--s)}return n&&(l=+l||+u||0,r=n[1]?l+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=l,i.end=r)),r}function v(t){var e,n=t.ownerDocument,i=t.nodeName,r=zt[i];return r||(e=n.body.appendChild(n.createElement(i)),r=lt.css(e,"display"),e.parentNode.removeChild(e),"none"===r&&(r="block"),zt[i]=r,r)}function y(t,e){for(var n,i,r=[],o=0,s=t.length;o<s;o++)(i=t[o]).style&&(n=i.style.display,e?("none"===n&&(r[o]=Lt.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&Rt(i)&&(r[o]=v(i))):"none"!==n&&(r[o]="none",Lt.set(i,"display",n)));for(o=0;o<s;o++)null!=r[o]&&(t[o].style.display=r[o]);return t}function x(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&a(t,e)?lt.merge([t],n):n}function b(t,e){for(var n=0,i=t.length;n<i;n++)Lt.set(t[n],"globalEval",!e||Lt.get(e[n],"globalEval"))}function w(t,e,n,i,r){for(var o,s,a,u,c,l,h=e.createDocumentFragment(),f=[],d=0,p=t.length;d<p;d++)if((o=t[d])||0===o)if("object"===lt.type(o))lt.merge(f,o.nodeType?[o]:o);else if($t.test(o)){for(s=s||h.appendChild(e.createElement("div")),a=(Ft.exec(o)||["",""])[1].toLowerCase(),u=Bt[a]||Bt._default,s.innerHTML=u[1]+lt.htmlPrefilter(o)+u[2],l=u[0];l--;)s=s.lastChild;lt.merge(f,s.childNodes),(s=h.firstChild).textContent=""}else f.push(e.createTextNode(o));for(h.textContent="",d=0;o=f[d++];)if(i&&lt.inArray(o,i)>-1)r&&r.push(o);else if(c=lt.contains(o.ownerDocument,o),s=x(h.appendChild(o),"script"),c&&b(s),n)for(l=0;o=s[l++];)Wt.test(o.type||"")&&n.push(o);return h}function T(){return!0}function E(){return!1}function S(){try{return K.activeElement}catch(t){}}function k(t,e,n,i,r,o){var s,a;if("object"==typeof e){"string"!=typeof n&&(i=i||n,n=void 0);for(a in e)k(t,a,n,i,e[a],o);return t}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=E;else if(!r)return t;return 1===o&&(s=r,(r=function(t){return lt().off(t),s.apply(this,arguments)}).guid=s.guid||(s.guid=lt.guid++)),t.each(function(){lt.event.add(this,e,r,i,n)})}function C(t,e){return a(t,"table")&&a(11!==e.nodeType?e:e.firstChild,"tr")?lt(">tbody",t)[0]||t:t}function D(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function _(t){var e=Kt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function P(t,e){var n,i,r,o,s,a,u,c;if(1===e.nodeType){if(Lt.hasData(t)&&(o=Lt.access(t),s=Lt.set(e,o),c=o.events)){delete s.handle,s.events={};for(r in c)for(n=0,i=c[r].length;n<i;n++)lt.event.add(e,r,c[r][n])}It.hasData(t)&&(a=It.access(t),u=lt.extend({},a),It.set(e,u))}}function L(t,e){var n=e.nodeName.toLowerCase();"input"===n&&Ht.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function I(t,e,n,i){e=et.apply([],e);var r,s,a,u,c,l,h=0,f=t.length,d=f-1,p=e[0],g=lt.isFunction(p);if(g||f>1&&"string"==typeof p&&!ct.checkClone&&Jt.test(p))return t.each(function(r){var o=t.eq(r);g&&(e[0]=p.call(this,r,o.html())),I(o,e,n,i)});if(f&&(r=w(e,t[0].ownerDocument,!1,t,i),s=r.firstChild,1===r.childNodes.length&&(r=s),s||i)){for(u=(a=lt.map(x(r,"script"),D)).length;h<f;h++)c=r,h!==d&&(c=lt.clone(c,!0,!0),u&&lt.merge(a,x(c,"script"))),n.call(t[h],c,h);if(u)for(l=a[a.length-1].ownerDocument,lt.map(a,_),h=0;h<u;h++)c=a[h],Wt.test(c.type||"")&&!Lt.access(c,"globalEval")&&lt.contains(l,c)&&(c.src?lt._evalUrl&&lt._evalUrl(c.src):o(c.textContent.replace(Zt,""),l))}return t}function N(t,e,n){for(var i,r=e?lt.filter(e,t):t,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||lt.cleanData(x(i)),i.parentNode&&(n&&lt.contains(i.ownerDocument,i)&&b(x(i,"script")),i.parentNode.removeChild(i));return t}function A(t,e,n){var i,r,o,s,a=t.style;return(n=n||ne(t))&&(""!==(s=n.getPropertyValue(e)||n[e])||lt.contains(t.ownerDocument,t)||(s=lt.style(t,e)),!ct.pixelMarginRight()&&ee.test(s)&&te.test(e)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o)),void 0!==s?s+"":s}function j(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}function M(t){var e=lt.cssProps[t];return e||(e=lt.cssProps[t]=function(t){if(t in ue)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=ae.length;n--;)if((t=ae[n]+e)in ue)return t}(t)||t),e}function O(t,e,n){var i=Mt.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function R(t,e,n,i,r){var o,s=0;for(o=n===(i?"border":"content")?4:"width"===e?1:0;o<4;o+=2)"margin"===n&&(s+=lt.css(t,n+Ot[o],!0,r)),i?("content"===n&&(s-=lt.css(t,"padding"+Ot[o],!0,r)),"margin"!==n&&(s-=lt.css(t,"border"+Ot[o]+"Width",!0,r))):(s+=lt.css(t,"padding"+Ot[o],!0,r),"padding"!==n&&(s+=lt.css(t,"border"+Ot[o]+"Width",!0,r)));return s}function q(t,e,n){var i,r=ne(t),o=A(t,e,r),s="border-box"===lt.css(t,"boxSizing",!1,r);return ee.test(o)?o:(i=s&&(ct.boxSizingReliable()||o===t.style[e]),"auto"===o&&(o=t["offset"+e[0].toUpperCase()+e.slice(1)]),(o=parseFloat(o)||0)+R(t,e,n||(s?"border":"content"),i,r)+"px")}function z(t,e,n,i,r){return new z.prototype.init(t,e,n,i,r)}function H(){le&&(!1===K.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(H):n.setTimeout(H,lt.fx.interval),lt.fx.tick())}function F(){return n.setTimeout(function(){ce=void 0}),ce=lt.now()}function W(t,e){var n,i=0,r={height:t};for(e=e?1:0;i<4;i+=2-e)r["margin"+(n=Ot[i])]=r["padding"+n]=t;return e&&(r.opacity=r.width=t),r}function B(t,e,n){for(var i,r=($.tweeners[e]||[]).concat($.tweeners["*"]),o=0,s=r.length;o<s;o++)if(i=r[o].call(n,e,t))return i}function $(t,e,n){var i,r,o=0,s=$.prefilters.length,a=lt.Deferred().always(function(){delete u.elem}),u=function(){if(r)return!1;for(var e=ce||F(),n=Math.max(0,c.startTime+c.duration-e),i=1-(n/c.duration||0),o=0,s=c.tweens.length;o<s;o++)c.tweens[o].run(i);return a.notifyWith(t,[c,i,n]),i<1&&s?n:(s||a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c]),!1)},c=a.promise({elem:t,props:lt.extend({},e),opts:lt.extend(!0,{specialEasing:{},easing:lt.easing._default},n),originalProperties:e,originalOptions:n,startTime:ce||F(),duration:n.duration,tweens:[],createTween:function(e,n){var i=lt.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(i),i},stop:function(e){var n=0,i=e?c.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)c.tweens[n].run(1);return e?(a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c,e])):a.rejectWith(t,[c,e]),this}}),l=c.props;for((!function(t,e){var n,i,r,o,s;for(n in t)if(i=lt.camelCase(n),r=e[i],o=t[n],Array.isArray(o)&&(r=o[1],o=t[n]=o[0]),n!==i&&(t[i]=o,delete t[n]),(s=lt.cssHooks[i])&&"expand"in s){o=s.expand(o),delete t[i];for(n in o)n in t||(t[n]=o[n],e[n]=r)}else e[i]=r}(l,c.opts.specialEasing));o<s;o++)if(i=$.prefilters[o].call(c,t,l,c.opts))return lt.isFunction(i.stop)&&(lt._queueHooks(c.elem,c.opts.queue).stop=lt.proxy(i.stop,i)),i;return lt.map(l,B,c),lt.isFunction(c.opts.start)&&c.opts.start.call(t,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),lt.fx.timer(lt.extend(u,{elem:t,anim:c,queue:c.opts.queue})),c}function U(t){return(t.match(kt)||[]).join(" ")}function X(t){return t.getAttribute&&t.getAttribute("class")||""}function V(t,e,n,i){var r;if(Array.isArray(e))lt.each(e,function(e,r){n||Te.test(t)?i(t,r):V(t+"["+("object"==typeof r&&null!=r?e:"")+"]",r,n,i)});else if(n||"object"!==lt.type(e))i(t,e);else for(r in e)V(t+"["+r+"]",e[r],n,i)}function G(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,r=0,o=e.toLowerCase().match(kt)||[];if(lt.isFunction(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function Q(t,e,n,i){function r(a){var u;return o[a]=!0,lt.each(t[a]||[],function(t,a){var c=a(e,n,i);return"string"!=typeof c||s||o[c]?s?!(u=c):void 0:(e.dataTypes.unshift(c),r(c),!1)}),u}var o={},s=t===Ae;return r(e.dataTypes[0])||!o["*"]&&r("*")}function Y(t,e){var n,i,r=lt.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((r[n]?t:i||(i={}))[n]=e[n]);return i&&lt.extend(!0,t,i),t}var J=[],K=n.document,Z=Object.getPrototypeOf,tt=J.slice,et=J.concat,nt=J.push,it=J.indexOf,rt={},ot=rt.toString,st=rt.hasOwnProperty,at=st.toString,ut=at.call(Object),ct={},lt=function(t,e){return new lt.fn.init(t,e)},ht=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ft=/^-ms-/,dt=/-([a-z])/g,pt=function(t,e){return e.toUpperCase()};lt.fn=lt.prototype={jquery:"3.2.1",constructor:lt,length:0,toArray:function(){return tt.call(this)},get:function(t){return null==t?tt.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=lt.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return lt.each(this,t)},map:function(t){return this.pushStack(lt.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(tt.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:nt,sort:J.sort,splice:J.splice},lt.extend=lt.fn.extend=function(){var t,e,n,i,r,o,s=arguments[0]||{},a=1,u=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||lt.isFunction(s)||(s={}),a===u&&(s=this,a--);a<u;a++)if(null!=(t=arguments[a]))for(e in t)n=s[e],s!==(i=t[e])&&(c&&i&&(lt.isPlainObject(i)||(r=Array.isArray(i)))?(r?(r=!1,o=n&&Array.isArray(n)?n:[]):o=n&&lt.isPlainObject(n)?n:{},s[e]=lt.extend(c,o,i)):void 0!==i&&(s[e]=i));return s},lt.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===lt.type(t)},isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=lt.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==ot.call(t)||(e=Z(t))&&("function"!=typeof(n=st.call(e,"constructor")&&e.constructor)||at.call(n)!==ut))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?rt[ot.call(t)]||"object":typeof t},globalEval:function(t){o(t)},camelCase:function(t){return t.replace(ft,"ms-").replace(dt,pt)},each:function(t,e){var n,i=0;if(s(t))for(n=t.length;i<n&&!1!==e.call(t[i],i,t[i]);i++);else for(i in t)if(!1===e.call(t[i],i,t[i]))break;return t},trim:function(t){return null==t?"":(t+"").replace(ht,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(s(Object(t))?lt.merge(n,"string"==typeof t?[t]:t):nt.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:it.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,r=t.length;i<n;i++)t[r++]=e[i];return t.length=r,t},grep:function(t,e,n){for(var i=[],r=0,o=t.length,s=!n;r<o;r++)!e(t[r],r)!==s&&i.push(t[r]);return i},map:function(t,e,n){var i,r,o=0,a=[];if(s(t))for(i=t.length;o<i;o++)null!=(r=e(t[o],o,n))&&a.push(r);else for(o in t)null!=(r=e(t[o],o,n))&&a.push(r);return et.apply([],a)},guid:1,proxy:function(t,e){var n,i,r;if("string"==typeof e&&(n=t[e],e=t,t=n),lt.isFunction(t))return i=tt.call(arguments,2),r=function(){return t.apply(e||this,i.concat(tt.call(arguments)))},r.guid=t.guid=t.guid||lt.guid++,r},now:Date.now,support:ct}),"function"==typeof Symbol&&(lt.fn[Symbol.iterator]=J[Symbol.iterator]),lt.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){rt["[object "+e+"]"]=e.toLowerCase()});var gt=function(t){function e(t,e,n,i){var r,o,s,a,u,l,f,d=e&&e.ownerDocument,p=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return n;if(!i&&((e?e.ownerDocument||e:R)!==P&&_(e),e=e||P,I)){if(11!==p&&(u=dt.exec(t)))if(r=u[1]){if(9===p){if(!(s=e.getElementById(r)))return n;if(s.id===r)return n.push(s),n}else if(d&&(s=d.getElementById(r))&&M(e,s)&&s.id===r)return n.push(s),n}else{if(u[2])return G.apply(n,e.getElementsByTagName(t)),n;if((r=u[3])&&y.getElementsByClassName&&e.getElementsByClassName)return G.apply(n,e.getElementsByClassName(r)),n}if(y.qsa&&!W[t+" "]&&(!N||!N.test(t))){if(1!==p)d=e,f=t;else if("object"!==e.nodeName.toLowerCase()){for((a=e.getAttribute("id"))?a=a.replace(vt,yt):e.setAttribute("id",a=O),o=(l=T(t)).length;o--;)l[o]="#"+a+" "+h(l[o]);f=l.join(","),d=pt.test(t)&&c(e.parentNode)||e}if(f)try{return G.apply(n,d.querySelectorAll(f)),n}catch(t){}finally{a===O&&e.removeAttribute("id")}}}return S(t.replace(it,"$1"),e,n,i)}function n(){function t(n,i){return e.push(n+" ")>x.cacheLength&&delete t[e.shift()],t[n+" "]=i}var e=[];return t}function i(t){return t[O]=!0,t}function r(t){var e=P.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var n=t.split("|"),i=n.length;i--;)x.attrHandle[n[i]]=e}function s(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function a(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&bt(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function u(t){return i(function(e){return e=+e,i(function(n,i){for(var r,o=t([],n.length,e),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))})})}function c(t){return t&&void 0!==t.getElementsByTagName&&t}function l(){}function h(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function f(t,e,n){var i=e.dir,r=e.next,o=r||i,s=n&&"parentNode"===o,a=z++;return e.first?function(e,n,r){for(;e=e[i];)if(1===e.nodeType||s)return t(e,n,r);return!1}:function(e,n,u){var c,l,h,f=[q,a];if(u){for(;e=e[i];)if((1===e.nodeType||s)&&t(e,n,u))return!0}else for(;e=e[i];)if(1===e.nodeType||s)if(h=e[O]||(e[O]={}),l=h[e.uniqueID]||(h[e.uniqueID]={}),r&&r===e.nodeName.toLowerCase())e=e[i]||e;else{if((c=l[o])&&c[0]===q&&c[1]===a)return f[2]=c[2];if(l[o]=f,f[2]=t(e,n,u))return!0}return!1}}function d(t){return t.length>1?function(e,n,i){for(var r=t.length;r--;)if(!t[r](e,n,i))return!1;return!0}:t[0]}function p(t,e,n,i,r){for(var o,s=[],a=0,u=t.length,c=null!=e;a<u;a++)(o=t[a])&&(n&&!n(o,i,r)||(s.push(o),c&&e.push(a)));return s}function g(t,n,r,o,s,a){return o&&!o[O]&&(o=g(o)),s&&!s[O]&&(s=g(s,a)),i(function(i,a,u,c){var l,h,f,d=[],g=[],m=a.length,v=i||function(t,n,i){for(var r=0,o=n.length;r<o;r++)e(t,n[r],i);return i}(n||"*",u.nodeType?[u]:u,[]),y=!t||!i&&n?v:p(v,d,t,u,c),x=r?s||(i?t:m||o)?[]:a:y;if(r&&r(y,x,u,c),o)for(l=p(x,g),o(l,[],u,c),h=l.length;h--;)(f=l[h])&&(x[g[h]]=!(y[g[h]]=f));if(i){if(s||t){if(s){for(l=[],h=x.length;h--;)(f=x[h])&&l.push(y[h]=f);s(null,x=[],l,c)}for(h=x.length;h--;)(f=x[h])&&(l=s?Y(i,f):d[h])>-1&&(i[l]=!(a[l]=f))}}else x=p(x===a?x.splice(m,x.length):x),s?s(null,a,x,c):G.apply(a,x)})}function m(t){for(var e,n,i,r=t.length,o=x.relative[t[0].type],s=o||x.relative[" "],a=o?1:0,u=f(function(t){return t===e},s,!0),c=f(function(t){return Y(e,t)>-1},s,!0),l=[function(t,n,i){var r=!o&&(i||n!==k)||((e=n).nodeType?u(t,n,i):c(t,n,i));return e=null,r}];a<r;a++)if(n=x.relative[t[a].type])l=[f(d(l),n)];else{if((n=x.filter[t[a].type].apply(null,t[a].matches))[O]){for(i=++a;i<r&&!x.relative[t[i].type];i++);return g(a>1&&d(l),a>1&&h(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(it,"$1"),n,a<i&&m(t.slice(a,i)),i<r&&m(t=t.slice(i)),i<r&&h(t))}l.push(n)}return d(l)}var v,y,x,b,w,T,E,S,k,C,D,_,P,L,I,N,A,j,M,O="sizzle"+1*new Date,R=t.document,q=0,z=0,H=n(),F=n(),W=n(),B=function(t,e){return t===e&&(D=!0),0},$={}.hasOwnProperty,U=[],X=U.pop,V=U.push,G=U.push,Q=U.slice,Y=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",K="[\\x20\\t\\r\\n\\f]",Z="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",tt="\\["+K+"*("+Z+")(?:"+K+"*([*^$|!~]?=)"+K+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+Z+"))|)"+K+"*\\]",et=":("+Z+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+tt+")*)|.*)\\)|)",nt=new RegExp(K+"+","g"),it=new RegExp("^"+K+"+|((?:^|[^\\\\])(?:\\\\.)*)"+K+"+$","g"),rt=new RegExp("^"+K+"*,"+K+"*"),ot=new RegExp("^"+K+"*([>+~]|"+K+")"+K+"*"),st=new RegExp("="+K+"*([^\\]'\"]*?)"+K+"*\\]","g"),at=new RegExp(et),ut=new RegExp("^"+Z+"$"),ct={ID:new RegExp("^#("+Z+")"),CLASS:new RegExp("^\\.("+Z+")"),TAG:new RegExp("^("+Z+"|[*])"),ATTR:new RegExp("^"+tt),PSEUDO:new RegExp("^"+et),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+K+"*(even|odd|(([+-]|)(\\d*)n|)"+K+"*(?:([+-]|)"+K+"*(\\d+)|))"+K+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+K+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+K+"*((?:-\\d)?\\d*)"+K+"*\\)|)(?=[^-]|$)","i")},lt=/^(?:input|select|textarea|button)$/i,ht=/^h\d$/i,ft=/^[^{]+\{\s*\[native \w/,dt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,pt=/[+~]/,gt=new RegExp("\\\\([\\da-f]{1,6}"+K+"?|("+K+")|.)","ig"),mt=function(t,e,n){var i="0x"+e-65536;return i!=i||n?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},vt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,yt=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},xt=function(){_()},bt=f(function(t){return!0===t.disabled&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{G.apply(U=Q.call(R.childNodes),R.childNodes),U[R.childNodes.length].nodeType}catch(t){G={apply:U.length?function(t,e){V.apply(t,Q.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}y=e.support={},w=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},_=e.setDocument=function(t){var e,n,i=t?t.ownerDocument||t:R;return i!==P&&9===i.nodeType&&i.documentElement?(P=i,L=P.documentElement,I=!w(P),R!==P&&(n=P.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",xt,!1):n.attachEvent&&n.attachEvent("onunload",xt)),y.attributes=r(function(t){return t.className="i",!t.getAttribute("className")}),y.getElementsByTagName=r(function(t){return t.appendChild(P.createComment("")),!t.getElementsByTagName("*").length}),y.getElementsByClassName=ft.test(P.getElementsByClassName),y.getById=r(function(t){return L.appendChild(t).id=O,!P.getElementsByName||!P.getElementsByName(O).length}),y.getById?(x.filter.ID=function(t){var e=t.replace(gt,mt);return function(t){return t.getAttribute("id")===e}},x.find.ID=function(t,e){if(void 0!==e.getElementById&&I){var n=e.getElementById(t);return n?[n]:[]}}):(x.filter.ID=function(t){var e=t.replace(gt,mt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},x.find.ID=function(t,e){if(void 0!==e.getElementById&&I){var n,i,r,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(r=e.getElementsByName(t),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),x.find.TAG=y.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):y.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],r=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},x.find.CLASS=y.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&I)return e.getElementsByClassName(t)},A=[],N=[],(y.qsa=ft.test(P.querySelectorAll))&&(r(function(t){L.appendChild(t).innerHTML="<a id='"+O+"'></a><select id='"+O+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&N.push("[*^$]="+K+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||N.push("\\["+K+"*(?:value|"+J+")"),t.querySelectorAll("[id~="+O+"-]").length||N.push("~="),t.querySelectorAll(":checked").length||N.push(":checked"),t.querySelectorAll("a#"+O+"+*").length||N.push(".#.+[+~]")}),r(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=P.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&N.push("name"+K+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&N.push(":enabled",":disabled"),L.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&N.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),N.push(",.*:")})),(y.matchesSelector=ft.test(j=L.matches||L.webkitMatchesSelector||L.mozMatchesSelector||L.oMatchesSelector||L.msMatchesSelector))&&r(function(t){y.disconnectedMatch=j.call(t,"*"),j.call(t,"[s!='']:x"),A.push("!=",et)}),N=N.length&&new RegExp(N.join("|")),A=A.length&&new RegExp(A.join("|")),e=ft.test(L.compareDocumentPosition),M=e||ft.test(L.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},B=e?function(t,e){if(t===e)return D=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!y.sortDetached&&e.compareDocumentPosition(t)===n?t===P||t.ownerDocument===R&&M(R,t)?-1:e===P||e.ownerDocument===R&&M(R,e)?1:C?Y(C,t)-Y(C,e):0:4&n?-1:1)}:function(t,e){if(t===e)return D=!0,0;var n,i=0,r=t.parentNode,o=e.parentNode,a=[t],u=[e];if(!r||!o)return t===P?-1:e===P?1:r?-1:o?1:C?Y(C,t)-Y(C,e):0;if(r===o)return s(t,e);for(n=t;n=n.parentNode;)a.unshift(n);for(n=e;n=n.parentNode;)u.unshift(n);for(;a[i]===u[i];)i++;return i?s(a[i],u[i]):a[i]===R?-1:u[i]===R?1:0},P):P},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==P&&_(t),n=n.replace(st,"='$1']"),y.matchesSelector&&I&&!W[n+" "]&&(!A||!A.test(n))&&(!N||!N.test(n)))try{var i=j.call(t,n);if(i||y.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){}return e(n,P,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==P&&_(t),M(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==P&&_(t);var n=x.attrHandle[e.toLowerCase()],i=n&&$.call(x.attrHandle,e.toLowerCase())?n(t,e,!I):void 0;return void 0!==i?i:y.attributes||!I?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},e.escape=function(t){return(t+"").replace(vt,yt)},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],i=0,r=0;if(D=!y.detectDuplicates,C=!y.sortStable&&t.slice(0),t.sort(B),D){for(;e=t[r++];)e===t[r]&&(i=n.push(r));for(;i--;)t.splice(n[i],1)}return C=null,t},b=e.getText=function(t){var e,n="",i=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=b(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[i++];)n+=b(e);return n},(x=e.selectors={cacheLength:50,createPseudo:i,match:ct,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(gt,mt),t[3]=(t[3]||t[4]||t[5]||"").replace(gt,mt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return ct.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&at.test(n)&&(e=T(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(gt,mt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=H[t+" "];return e||(e=new RegExp("(^|"+K+")"+t+"("+K+"|$)"))&&H(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,i){return function(r){var o=e.attr(r,t);return null==o?"!="===n:!n||(o+="","="===n?o===i:"!="===n?o!==i:"^="===n?i&&0===o.indexOf(i):"*="===n?i&&o.indexOf(i)>-1:"$="===n?i&&o.slice(-i.length)===i:"~="===n?(" "+o.replace(nt," ")+" ").indexOf(i)>-1:"|="===n&&(o===i||o.slice(0,i.length+1)===i+"-"))}},CHILD:function(t,e,n,i,r){var o="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===i&&0===r?function(t){return!!t.parentNode}:function(e,n,u){var c,l,h,f,d,p,g=o!==s?"nextSibling":"previousSibling",m=e.parentNode,v=a&&e.nodeName.toLowerCase(),y=!u&&!a,x=!1;if(m){if(o){for(;g;){for(f=e;f=f[g];)if(a?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;p=g="only"===t&&!p&&"nextSibling"}return!0}if(p=[s?m.firstChild:m.lastChild],s&&y){for(x=(d=(c=(l=(h=(f=m)[O]||(f[O]={}))[f.uniqueID]||(h[f.uniqueID]={}))[t]||[])[0]===q&&c[1])&&c[2],f=d&&m.childNodes[d];f=++d&&f&&f[g]||(x=d=0)||p.pop();)if(1===f.nodeType&&++x&&f===e){l[t]=[q,d,x];break}}else if(y&&(x=d=(c=(l=(h=(f=e)[O]||(f[O]={}))[f.uniqueID]||(h[f.uniqueID]={}))[t]||[])[0]===q&&c[1]),!1===x)for(;(f=++d&&f&&f[g]||(x=d=0)||p.pop())&&((a?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++x||(y&&((l=(h=f[O]||(f[O]={}))[f.uniqueID]||(h[f.uniqueID]={}))[t]=[q,x]),f!==e)););return(x-=r)===i||x%i==0&&x/i>=0}}},PSEUDO:function(t,n){var r,o=x.pseudos[t]||x.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[O]?o(n):o.length>1?(r=[t,t,"",n],x.setFilters.hasOwnProperty(t.toLowerCase())?i(function(t,e){for(var i,r=o(t,n),s=r.length;s--;)t[i=Y(t,r[s])]=!(e[i]=r[s])}):function(t){return o(t,0,r)}):o}},pseudos:{not:i(function(t){var e=[],n=[],r=E(t.replace(it,"$1"));return r[O]?i(function(t,e,n,i){for(var o,s=r(t,null,i,[]),a=t.length;a--;)(o=s[a])&&(t[a]=!(e[a]=o))}):function(t,i,o){return e[0]=t,r(e,null,o,n),e[0]=null,!n.pop()}}),has:i(function(t){return function(n){return e(t,n).length>0}}),contains:i(function(t){return t=t.replace(gt,mt),function(e){return(e.textContent||e.innerText||b(e)).indexOf(t)>-1}}),lang:i(function(t){return ut.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(gt,mt).toLowerCase(),function(e){var n;do{if(n=I?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===L},focus:function(t){return t===P.activeElement&&(!P.hasFocus||P.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:a(!1),disabled:a(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!x.pseudos.empty(t)},header:function(t){return ht.test(t.nodeName)},input:function(t){return lt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:u(function(){return[0]}),last:u(function(t,e){return[e-1]}),eq:u(function(t,e,n){return[n<0?n+e:n]}),even:u(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:u(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:u(function(t,e,n){for(var i=n<0?n+e:n;--i>=0;)t.push(i);return t}),gt:u(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}}).pseudos.nth=x.pseudos.eq;for(v in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[v]=function(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}(v);for(v in{submit:!0,reset:!0})x.pseudos[v]=function(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}(v);return l.prototype=x.filters=x.pseudos,x.setFilters=new l,T=e.tokenize=function(t,n){var i,r,o,s,a,u,c,l=F[t+" "];if(l)return n?0:l.slice(0);for(a=t,u=[],c=x.preFilter;a;){i&&!(r=rt.exec(a))||(r&&(a=a.slice(r[0].length)||a),u.push(o=[])),i=!1,(r=ot.exec(a))&&(i=r.shift(),o.push({value:i,type:r[0].replace(it," ")}),a=a.slice(i.length));for(s in x.filter)!(r=ct[s].exec(a))||c[s]&&!(r=c[s](r))||(i=r.shift(),o.push({value:i,type:s,matches:r}),a=a.slice(i.length));if(!i)break}return n?a.length:a?e.error(t):F(t,u).slice(0)},E=e.compile=function(t,n){var r,o=[],s=[],a=W[t+" "];if(!a){for(n||(n=T(t)),r=n.length;r--;)(a=m(n[r]))[O]?o.push(a):s.push(a);(a=W(t,function(t,n){var r=n.length>0,o=t.length>0,s=function(i,s,a,u,c){var l,h,f,d=0,g="0",m=i&&[],v=[],y=k,b=i||o&&x.find.TAG("*",c),w=q+=null==y?1:Math.random()||.1,T=b.length;for(c&&(k=s===P||s||c);g!==T&&null!=(l=b[g]);g++){if(o&&l){for(h=0,s||l.ownerDocument===P||(_(l),a=!I);f=t[h++];)if(f(l,s||P,a)){u.push(l);break}c&&(q=w)}r&&((l=!f&&l)&&d--,i&&m.push(l))}if(d+=g,r&&g!==d){for(h=0;f=n[h++];)f(m,v,s,a);if(i){if(d>0)for(;g--;)m[g]||v[g]||(v[g]=X.call(u));v=p(v)}G.apply(u,v),c&&!i&&v.length>0&&d+n.length>1&&e.uniqueSort(u)}return c&&(q=w,k=y),m};return r?i(s):s}(s,o))).selector=t}return a},S=e.select=function(t,e,n,i){var r,o,s,a,u,l="function"==typeof t&&t,f=!i&&T(t=l.selector||t);if(n=n||[],1===f.length){if((o=f[0]=f[0].slice(0)).length>2&&"ID"===(s=o[0]).type&&9===e.nodeType&&I&&x.relative[o[1].type]){if(!(e=(x.find.ID(s.matches[0].replace(gt,mt),e)||[])[0]))return n;l&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(r=ct.needsContext.test(t)?0:o.length;r--&&(s=o[r],!x.relative[a=s.type]);)if((u=x.find[a])&&(i=u(s.matches[0].replace(gt,mt),pt.test(o[0].type)&&c(e.parentNode)||e))){if(o.splice(r,1),!(t=i.length&&h(o)))return G.apply(n,i),n;break}}return(l||E(t,f))(i,e,!I,n,!e||pt.test(t)&&c(e.parentNode)||e),n},y.sortStable=O.split("").sort(B).join("")===O,y.detectDuplicates=!!D,_(),y.sortDetached=r(function(t){return 1&t.compareDocumentPosition(P.createElement("fieldset"))}),r(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),y.attributes&&r(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),r(function(t){return null==t.getAttribute("disabled")})||o(J,function(t,e,n){var i;if(!n)return!0===t[e]?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),e}(n);lt.find=gt,lt.expr=gt.selectors,lt.expr[":"]=lt.expr.pseudos,lt.uniqueSort=lt.unique=gt.uniqueSort,lt.text=gt.getText,lt.isXMLDoc=gt.isXML,lt.contains=gt.contains,lt.escapeSelector=gt.escape;var mt=function(t,e,n){for(var i=[],r=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&lt(t).is(n))break;i.push(t)}return i},vt=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},yt=lt.expr.match.needsContext,xt=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,bt=/^.[^:#\[\.,]*$/;lt.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?lt.find.matchesSelector(i,t)?[i]:[]:lt.find.matches(t,lt.grep(e,function(t){return 1===t.nodeType}))},lt.fn.extend({find:function(t){var e,n,i=this.length,r=this;if("string"!=typeof t)return this.pushStack(lt(t).filter(function(){for(e=0;e<i;e++)if(lt.contains(r[e],this))return!0}));for(n=this.pushStack([]),e=0;e<i;e++)lt.find(t,r[e],n);return i>1?lt.uniqueSort(n):n},filter:function(t){return this.pushStack(u(this,t||[],!1))},not:function(t){return this.pushStack(u(this,t||[],!0))},is:function(t){return!!u(this,"string"==typeof t&&yt.test(t)?lt(t):t||[],!1).length}});var wt,Tt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(lt.fn.init=function(t,e,n){var i,r;if(!t)return this;if(n=n||wt,"string"==typeof t){if(!(i="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:Tt.exec(t))||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof lt?e[0]:e,lt.merge(this,lt.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:K,!0)),xt.test(i[1])&&lt.isPlainObject(e))for(i in e)lt.isFunction(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return(r=K.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):lt.isFunction(t)?void 0!==n.ready?n.ready(t):t(lt):lt.makeArray(t,this)}).prototype=lt.fn,wt=lt(K);var Et=/^(?:parents|prev(?:Until|All))/,St={children:!0,contents:!0,next:!0,prev:!0};lt.fn.extend({has:function(t){var e=lt(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(lt.contains(this,e[t]))return!0})},closest:function(t,e){var n,i=0,r=this.length,o=[],s="string"!=typeof t&&lt(t);if(!yt.test(t))for(;i<r;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&lt.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?lt.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?it.call(lt(t),this[0]):it.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(lt.uniqueSort(lt.merge(this.get(),lt(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),lt.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return mt(t,"parentNode")},parentsUntil:function(t,e,n){return mt(t,"parentNode",n)},next:function(t){return c(t,"nextSibling")},prev:function(t){return c(t,"previousSibling")},nextAll:function(t){return mt(t,"nextSibling")},prevAll:function(t){return mt(t,"previousSibling")},nextUntil:function(t,e,n){return mt(t,"nextSibling",n)},prevUntil:function(t,e,n){return mt(t,"previousSibling",n)},siblings:function(t){return vt((t.parentNode||{}).firstChild,t)},children:function(t){return vt(t.firstChild)},contents:function(t){return a(t,"iframe")?t.contentDocument:(a(t,"template")&&(t=t.content||t),lt.merge([],t.childNodes))}},function(t,e){lt.fn[t]=function(n,i){var r=lt.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=lt.filter(i,r)),this.length>1&&(St[t]||lt.uniqueSort(r),Et.test(t)&&r.reverse()),this.pushStack(r)}});var kt=/[^\x20\t\r\n\f]+/g;lt.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return lt.each(t.match(kt)||[],function(t,n){e[n]=!0}),e}(t):lt.extend({},t);var e,n,i,r,o=[],s=[],a=-1,u=function(){for(r=r||t.once,i=e=!0;s.length;a=-1)for(n=s.shift();++a<o.length;)!1===o[a].apply(n[0],n[1])&&t.stopOnFalse&&(a=o.length,n=!1);t.memory||(n=!1),e=!1,r&&(o=n?[]:"")},c={add:function(){return o&&(n&&!e&&(a=o.length-1,s.push(n)),function e(n){lt.each(n,function(n,i){lt.isFunction(i)?t.unique&&c.has(i)||o.push(i):i&&i.length&&"string"!==lt.type(i)&&e(i)})}(arguments),n&&!e&&u()),this},remove:function(){return lt.each(arguments,function(t,e){for(var n;(n=lt.inArray(e,o,n))>-1;)o.splice(n,1),n<=a&&a--}),this},has:function(t){return t?lt.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=s=[],n||e||(o=n=""),this},locked:function(){return!!r},fireWith:function(t,n){return r||(n=[t,(n=n||[]).slice?n.slice():n],s.push(n),e||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},lt.extend({Deferred:function(t){var e=[["notify","progress",lt.Callbacks("memory"),lt.Callbacks("memory"),2],["resolve","done",lt.Callbacks("once memory"),lt.Callbacks("once memory"),0,"resolved"],["reject","fail",lt.Callbacks("once memory"),lt.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return r.then(null,t)},pipe:function(){var t=arguments;return lt.Deferred(function(n){lt.each(e,function(e,i){var r=lt.isFunction(t[i[4]])&&t[i[4]];o[i[1]](function(){var t=r&&r.apply(this,arguments);t&&lt.isFunction(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[t]:arguments)})}),t=null}).promise()},then:function(t,i,r){function o(t,e,i,r){return function(){var a=this,u=arguments,c=function(){var n,c;if(!(t<s)){if((n=i.apply(a,u))===e.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,lt.isFunction(c)?r?c.call(n,o(s,e,l,r),o(s,e,h,r)):(s++,c.call(n,o(s,e,l,r),o(s,e,h,r),o(s,e,l,e.notifyWith))):(i!==l&&(a=void 0,u=[n]),(r||e.resolveWith)(a,u))}},f=r?c:function(){try{c()}catch(n){lt.Deferred.exceptionHook&&lt.Deferred.exceptionHook(n,f.stackTrace),t+1>=s&&(i!==h&&(a=void 0,u=[n]),e.rejectWith(a,u))}};t?f():(lt.Deferred.getStackHook&&(f.stackTrace=lt.Deferred.getStackHook()),n.setTimeout(f))}}var s=0;return lt.Deferred(function(n){e[0][3].add(o(0,n,lt.isFunction(r)?r:l,n.notifyWith)),e[1][3].add(o(0,n,lt.isFunction(t)?t:l)),e[2][3].add(o(0,n,lt.isFunction(i)?i:h))}).promise()},promise:function(t){return null!=t?lt.extend(t,r):r}},o={};return lt.each(e,function(t,n){var s=n[2],a=n[5];r[n[1]]=s.add,a&&s.add(function(){i=a},e[3-t][2].disable,e[0][2].lock),s.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=s.fireWith}),r.promise(o),t&&t.call(o,o),o},when:function(t){var e=arguments.length,n=e,i=Array(n),r=tt.call(arguments),o=lt.Deferred(),s=function(t){return function(n){i[t]=this,r[t]=arguments.length>1?tt.call(arguments):n,--e||o.resolveWith(i,r)}};if(e<=1&&(f(t,o.done(s(n)).resolve,o.reject,!e),"pending"===o.state()||lt.isFunction(r[n]&&r[n].then)))return o.then();for(;n--;)f(r[n],s(n),o.reject);return o.promise()}});var Ct=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;lt.Deferred.exceptionHook=function(t,e){n.console&&n.console.warn&&t&&Ct.test(t.name)&&n.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},lt.readyException=function(t){n.setTimeout(function(){throw t})};var Dt=lt.Deferred();lt.fn.ready=function(t){return Dt.then(t).catch(function(t){lt.readyException(t)}),this},lt.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--lt.readyWait:lt.isReady)||(lt.isReady=!0,!0!==t&&--lt.readyWait>0||Dt.resolveWith(K,[lt]))}}),lt.ready.then=Dt.then,"complete"===K.readyState||"loading"!==K.readyState&&!K.documentElement.doScroll?n.setTimeout(lt.ready):(K.addEventListener("DOMContentLoaded",d),n.addEventListener("load",d));var _t=function(t,e,n,i,r,o,s){var a=0,u=t.length,c=null==n;if("object"===lt.type(n)){r=!0;for(a in n)_t(t,e,a,n[a],!0,o,s)}else if(void 0!==i&&(r=!0,lt.isFunction(i)||(s=!0),c&&(s?(e.call(t,i),e=null):(c=e,e=function(t,e,n){return c.call(lt(t),n)})),e))for(;a<u;a++)e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)));return r?t:c?e.call(t):u?e(t[0],n):o},Pt=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};p.uid=1,p.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Pt(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,r=this.cache(t);if("string"==typeof e)r[lt.camelCase(e)]=n;else for(i in e)r[lt.camelCase(i)]=e[i];return r},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][lt.camelCase(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i=t[this.expando];if(void 0!==i){if(void 0!==e){n=(e=Array.isArray(e)?e.map(lt.camelCase):(e=lt.camelCase(e))in i?[e]:e.match(kt)||[]).length;for(;n--;)delete i[e[n]]}(void 0===e||lt.isEmptyObject(i))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!lt.isEmptyObject(e)}};var Lt=new p,It=new p,Nt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,At=/[A-Z]/g;lt.extend({hasData:function(t){return It.hasData(t)||Lt.hasData(t)},data:function(t,e,n){return It.access(t,e,n)},removeData:function(t,e){It.remove(t,e)},_data:function(t,e,n){return Lt.access(t,e,n)},_removeData:function(t,e){Lt.remove(t,e)}}),lt.fn.extend({data:function(t,e){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0===t){if(this.length&&(r=It.get(o),1===o.nodeType&&!Lt.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=lt.camelCase(i.slice(5)),g(o,i,r[i]));Lt.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof t?this.each(function(){It.set(this,t)}):_t(this,function(e){var n;if(o&&void 0===e){if(void 0!==(n=It.get(o,t)))return n;if(void 0!==(n=g(o,t)))return n}else this.each(function(){It.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){It.remove(this,t)})}}),lt.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=Lt.get(t,e),n&&(!i||Array.isArray(n)?i=Lt.access(t,e,lt.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=lt.queue(t,e),i=n.length,r=n.shift(),o=lt._queueHooks(t,e),s=function(){lt.dequeue(t,e)};"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===e&&n.unshift("inprogress"),delete o.stop,r.call(t,s,o)),!i&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return Lt.get(t,n)||Lt.access(t,n,{empty:lt.Callbacks("once memory").add(function(){Lt.remove(t,[e+"queue",n])})})}}),lt.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?lt.queue(this[0],t):void 0===e?this:this.each(function(){var n=lt.queue(this,t,e);lt._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&lt.dequeue(this,t)})},dequeue:function(t){return this.each(function(){lt.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,r=lt.Deferred(),o=this,s=this.length,a=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)(n=Lt.get(o[s],t+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(e)}});var jt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Mt=new RegExp("^(?:([+-])=|)("+jt+")([a-z%]*)$","i"),Ot=["Top","Right","Bottom","Left"],Rt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&lt.contains(t.ownerDocument,t)&&"none"===lt.css(t,"display")},qt=function(t,e,n,i){var r,o,s={};for(o in e)s[o]=t.style[o],t.style[o]=e[o];r=n.apply(t,i||[]);for(o in e)t.style[o]=s[o];return r},zt={};lt.fn.extend({show:function(){return y(this,!0)},hide:function(){return y(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Rt(this)?lt(this).show():lt(this).hide()})}});var Ht=/^(?:checkbox|radio)$/i,Ft=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Wt=/^$|\/(?:java|ecma)script/i,Bt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Bt.optgroup=Bt.option,Bt.tbody=Bt.tfoot=Bt.colgroup=Bt.caption=Bt.thead,Bt.th=Bt.td;var $t=/<|&#?\w+;/;!function(){var t=K.createDocumentFragment().appendChild(K.createElement("div")),e=K.createElement("input");e.setAttribute("type","radio"),e.setAttribute("checked","checked"),e.setAttribute("name","t"),t.appendChild(e),ct.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",ct.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Ut=K.documentElement,Xt=/^key/,Vt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Gt=/^([^.]*)(?:\.(.+)|)/;lt.event={global:{},add:function(t,e,n,i,r){var o,s,a,u,c,l,h,f,d,p,g,m=Lt.get(t);if(m)for(n.handler&&(n=(o=n).handler,r=o.selector),r&&lt.find.matchesSelector(Ut,r),n.guid||(n.guid=lt.guid++),(u=m.events)||(u=m.events={}),(s=m.handle)||(s=m.handle=function(e){return void 0!==lt&&lt.event.triggered!==e.type?lt.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(kt)||[""]).length;c--;)d=g=(a=Gt.exec(e[c])||[])[1],p=(a[2]||"").split(".").sort(),d&&(h=lt.event.special[d]||{},d=(r?h.delegateType:h.bindType)||d,h=lt.event.special[d]||{},l=lt.extend({type:d,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&lt.expr.match.needsContext.test(r),namespace:p.join(".")},o),(f=u[d])||((f=u[d]=[]).delegateCount=0,h.setup&&!1!==h.setup.call(t,i,p,s)||t.addEventListener&&t.addEventListener(d,s)),h.add&&(h.add.call(t,l),l.handler.guid||(l.handler.guid=n.guid)),r?f.splice(f.delegateCount++,0,l):f.push(l),lt.event.global[d]=!0)},remove:function(t,e,n,i,r){var o,s,a,u,c,l,h,f,d,p,g,m=Lt.hasData(t)&&Lt.get(t);if(m&&(u=m.events)){for(c=(e=(e||"").match(kt)||[""]).length;c--;)if(a=Gt.exec(e[c])||[],d=g=a[1],p=(a[2]||"").split(".").sort(),d){for(h=lt.event.special[d]||{},f=u[d=(i?h.delegateType:h.bindType)||d]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=f.length;o--;)l=f[o],!r&&g!==l.origType||n&&n.guid!==l.guid||a&&!a.test(l.namespace)||i&&i!==l.selector&&("**"!==i||!l.selector)||(f.splice(o,1),l.selector&&f.delegateCount--,h.remove&&h.remove.call(t,l));s&&!f.length&&(h.teardown&&!1!==h.teardown.call(t,p,m.handle)||lt.removeEvent(t,d,m.handle),delete u[d])}else for(d in u)lt.event.remove(t,d+e[c],n,i,!0);lt.isEmptyObject(u)&&Lt.remove(t,"handle events")}},dispatch:function(t){var e,n,i,r,o,s,a=lt.event.fix(t),u=new Array(arguments.length),c=(Lt.get(this,"events")||{})[a.type]||[],l=lt.event.special[a.type]||{};for(u[0]=a,e=1;e<arguments.length;e++)u[e]=arguments[e];if(a.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,a)){for(s=lt.event.handlers.call(this,a,c),e=0;(r=s[e++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(i=((lt.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,u))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,a),a.result}},handlers:function(t,e){var n,i,r,o,s,a=[],u=e.delegateCount,c=t.target;if(u&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(o=[],s={},n=0;n<u;n++)void 0===s[r=(i=e[n]).selector+" "]&&(s[r]=i.needsContext?lt(r,this).index(c)>-1:lt.find(r,this,null,[c]).length),s[r]&&o.push(i);o.length&&a.push({elem:c,handlers:o})}return c=this,u<e.length&&a.push({elem:c,handlers:e.slice(u)}),a},addProp:function(t,e){Object.defineProperty(lt.Event.prototype,t,{enumerable:!0,configurable:!0,get:lt.isFunction(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[lt.expando]?t:new lt.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==S()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===S()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&a(this,"input"))return this.click(),!1},_default:function(t){return a(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},lt.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},lt.Event=function(t,e){if(!(this instanceof lt.Event))return new lt.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?T:E,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&lt.extend(this,e),this.timeStamp=t&&t.timeStamp||lt.now(),this[lt.expando]=!0},lt.Event.prototype={constructor:lt.Event,isDefaultPrevented:E,isPropagationStopped:E,isImmediatePropagationStopped:E,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=T,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=T,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=T,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},lt.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Xt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&Vt.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},lt.event.addProp),lt.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){lt.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=t.relatedTarget,r=t.handleObj;return i&&(i===this||lt.contains(this,i))||(t.type=r.origType,n=r.handler.apply(this,arguments),t.type=e),n}}}),lt.fn.extend({on:function(t,e,n,i){return k(this,t,e,n,i)},one:function(t,e,n,i){return k(this,t,e,n,i,1)},off:function(t,e,n){var i,r;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,lt(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=E),this.each(function(){lt.event.remove(this,t,n,e)})}});var Qt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Yt=/<script|<style|<link/i,Jt=/checked\s*(?:[^=]|=\s*.checked.)/i,Kt=/^true\/(.*)/,Zt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;lt.extend({htmlPrefilter:function(t){return t.replace(Qt,"<$1></$2>")},clone:function(t,e,n){var i,r,o,s,a=t.cloneNode(!0),u=lt.contains(t.ownerDocument,t);if(!(ct.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||lt.isXMLDoc(t)))for(s=x(a),i=0,r=(o=x(t)).length;i<r;i++)L(o[i],s[i]);if(e)if(n)for(o=o||x(t),s=s||x(a),i=0,r=o.length;i<r;i++)P(o[i],s[i]);else P(t,a);return(s=x(a,"script")).length>0&&b(s,!u&&x(t,"script")),a},cleanData:function(t){for(var e,n,i,r=lt.event.special,o=0;void 0!==(n=t[o]);o++)if(Pt(n)){if(e=n[Lt.expando]){if(e.events)for(i in e.events)r[i]?lt.event.remove(n,i):lt.removeEvent(n,i,e.handle);n[Lt.expando]=void 0}n[It.expando]&&(n[It.expando]=void 0)}}}),lt.fn.extend({detach:function(t){return N(this,t,!0)},remove:function(t){return N(this,t)},text:function(t){return _t(this,function(t){return void 0===t?lt.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return I(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||C(this,t).appendChild(t)})},prepend:function(){return I(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=C(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return I(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return I(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(lt.cleanData(x(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return lt.clone(this,t,e)})},html:function(t){return _t(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Yt.test(t)&&!Bt[(Ft.exec(t)||["",""])[1].toLowerCase()]){t=lt.htmlPrefilter(t);try{for(;n<i;n++)1===(e=this[n]||{}).nodeType&&(lt.cleanData(x(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return I(this,arguments,function(e){var n=this.parentNode;lt.inArray(this,t)<0&&(lt.cleanData(x(this)),n&&n.replaceChild(e,this))},t)}}),lt.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){lt.fn[t]=function(t){for(var n,i=[],r=lt(t),o=r.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),lt(r[s])[e](n),nt.apply(i,n.get());return this.pushStack(i)}});var te=/^margin/,ee=new RegExp("^("+jt+")(?!px)[a-z%]+$","i"),ne=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)};!function(){function t(){if(a){a.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Ut.appendChild(s);var t=n.getComputedStyle(a);e="1%"!==t.top,o="2px"===t.marginLeft,i="4px"===t.width,a.style.marginRight="50%",r="4px"===t.marginRight,Ut.removeChild(s),a=null}}var e,i,r,o,s=K.createElement("div"),a=K.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",ct.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(a),lt.extend(ct,{pixelPosition:function(){return t(),e},boxSizingReliable:function(){return t(),i},pixelMarginRight:function(){return t(),r},reliableMarginLeft:function(){return t(),o}}))}();var ie=/^(none|table(?!-c[ea]).+)/,re=/^--/,oe={position:"absolute",visibility:"hidden",display:"block"},se={letterSpacing:"0",fontWeight:"400"},ae=["Webkit","Moz","ms"],ue=K.createElement("div").style;lt.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=A(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,o,s,a=lt.camelCase(e),u=re.test(e),c=t.style;if(u||(e=M(a)),s=lt.cssHooks[e]||lt.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(t,!1,i))?r:c[e];"string"==(o=typeof n)&&(r=Mt.exec(n))&&r[1]&&(n=m(t,e,r),o="number"),null!=n&&n==n&&("number"===o&&(n+=r&&r[3]||(lt.cssNumber[a]?"":"px")),ct.clearCloneStyle||""!==n||0!==e.indexOf("background")||(c[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,i))||(u?c.setProperty(e,n):c[e]=n))}},css:function(t,e,n,i){var r,o,s,a=lt.camelCase(e);return re.test(e)||(e=M(a)),(s=lt.cssHooks[e]||lt.cssHooks[a])&&"get"in s&&(r=s.get(t,!0,n)),void 0===r&&(r=A(t,e,i)),"normal"===r&&e in se&&(r=se[e]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),lt.each(["height","width"],function(t,e){lt.cssHooks[e]={get:function(t,n,i){if(n)return!ie.test(lt.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?q(t,e,i):qt(t,oe,function(){return q(t,e,i)})},set:function(t,n,i){var r,o=i&&ne(t),s=i&&R(t,e,i,"border-box"===lt.css(t,"boxSizing",!1,o),o);return s&&(r=Mt.exec(n))&&"px"!==(r[3]||"px")&&(t.style[e]=n,n=lt.css(t,e)),O(0,n,s)}}}),lt.cssHooks.marginLeft=j(ct.reliableMarginLeft,function(t,e){if(e)return(parseFloat(A(t,"marginLeft"))||t.getBoundingClientRect().left-qt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),lt.each({margin:"",padding:"",border:"Width"},function(t,e){lt.cssHooks[t+e]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[t+Ot[i]+e]=o[i]||o[i-2]||o[0];return r}},te.test(t)||(lt.cssHooks[t+e].set=O)}),lt.fn.extend({css:function(t,e){return _t(this,function(t,e,n){var i,r,o={},s=0;if(Array.isArray(e)){for(i=ne(t),r=e.length;s<r;s++)o[e[s]]=lt.css(t,e[s],!1,i);return o}return void 0!==n?lt.style(t,e,n):lt.css(t,e)},t,e,arguments.length>1)}}),lt.Tween=z,(z.prototype={constructor:z,init:function(t,e,n,i,r,o){this.elem=t,this.prop=n,this.easing=r||lt.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=o||(lt.cssNumber[n]?"":"px")},cur:function(){var t=z.propHooks[this.prop];return t&&t.get?t.get(this):z.propHooks._default.get(this)},run:function(t){var e,n=z.propHooks[this.prop];return this.options.duration?this.pos=e=lt.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):z.propHooks._default.set(this),this}}).init.prototype=z.prototype,(z.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=lt.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){lt.fx.step[t.prop]?lt.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[lt.cssProps[t.prop]]&&!lt.cssHooks[t.prop]?t.elem[t.prop]=t.now:lt.style(t.elem,t.prop,t.now+t.unit)}}}).scrollTop=z.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},lt.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},lt.fx=z.prototype.init,lt.fx.step={};var ce,le,he=/^(?:toggle|show|hide)$/,fe=/queueHooks$/;lt.Animation=lt.extend($,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return m(n.elem,t,Mt.exec(e),n),n}]},tweener:function(t,e){lt.isFunction(t)?(e=t,t=["*"]):t=t.match(kt);for(var n,i=0,r=t.length;i<r;i++)n=t[i],$.tweeners[n]=$.tweeners[n]||[],$.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var i,r,o,s,a,u,c,l,h="width"in e||"height"in e,f=this,d={},p=t.style,g=t.nodeType&&Rt(t),m=Lt.get(t,"fxshow");n.queue||(null==(s=lt._queueHooks(t,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,f.always(function(){f.always(function(){s.unqueued--,lt.queue(t,"fx").length||s.empty.fire()})}));for(i in e)if(r=e[i],he.test(r)){if(delete e[i],o=o||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!m||void 0===m[i])continue;g=!0}d[i]=m&&m[i]||lt.style(t,i)}if((u=!lt.isEmptyObject(e))||!lt.isEmptyObject(d)){h&&1===t.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(c=m&&m.display)&&(c=Lt.get(t,"display")),"none"===(l=lt.css(t,"display"))&&(c?l=c:(y([t],!0),c=t.style.display||c,l=lt.css(t,"display"),y([t]))),("inline"===l||"inline-block"===l&&null!=c)&&"none"===lt.css(t,"float")&&(u||(f.done(function(){p.display=c}),null==c&&(l=p.display,c="none"===l?"":l)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",f.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),u=!1;for(i in d)u||(m?"hidden"in m&&(g=m.hidden):m=Lt.access(t,"fxshow",{display:c}),o&&(m.hidden=!g),g&&y([t],!0),f.done(function(){g||y([t]),Lt.remove(t,"fxshow");for(i in d)lt.style(t,i,d[i])})),u=B(g?m[i]:0,i,f),i in m||(m[i]=u.start,g&&(u.end=u.start,u.start=0))}}],prefilter:function(t,e){e?$.prefilters.unshift(t):$.prefilters.push(t)}}),lt.speed=function(t,e,n){var i=t&&"object"==typeof t?lt.extend({},t):{complete:n||!n&&e||lt.isFunction(t)&&t,duration:t,easing:n&&e||e&&!lt.isFunction(e)&&e};return lt.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in lt.fx.speeds?i.duration=lt.fx.speeds[i.duration]:i.duration=lt.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){lt.isFunction(i.old)&&i.old.call(this),i.queue&&lt.dequeue(this,i.queue)},i},lt.fn.extend({fadeTo:function(t,e,n,i){return this.filter(Rt).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var r=lt.isEmptyObject(t),o=lt.speed(e,n,i),s=function(){var e=$(this,lt.extend({},t),o);(r||Lt.get(this,"finish"))&&e.stop(!0)};return s.finish=s,r||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var e=!0,r=null!=t&&t+"queueHooks",o=lt.timers,s=Lt.get(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&fe.test(r)&&i(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=t&&o[r].queue!==t||(o[r].anim.stop(n),e=!1,o.splice(r,1));!e&&n||lt.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var e,n=Lt.get(this),i=n[t+"queue"],r=n[t+"queueHooks"],o=lt.timers,s=i?i.length:0;for(n.finish=!0,lt.queue(this,t,[]),r&&r.stop&&r.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<s;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),lt.each(["toggle","show","hide"],function(t,e){var n=lt.fn[e];lt.fn[e]=function(t,i,r){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(W(e,!0),t,i,r)}}),lt.each({slideDown:W("show"),slideUp:W("hide"),slideToggle:W("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){lt.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),lt.timers=[],lt.fx.tick=function(){var t,e=0,n=lt.timers;for(ce=lt.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||lt.fx.stop(),ce=void 0},lt.fx.timer=function(t){lt.timers.push(t),lt.fx.start()},lt.fx.interval=13,lt.fx.start=function(){le||(le=!0,H())},lt.fx.stop=function(){le=null},lt.fx.speeds={slow:600,fast:200,_default:400},lt.fn.delay=function(t,e){return t=lt.fx?lt.fx.speeds[t]||t:t,e=e||"fx",this.queue(e,function(e,i){var r=n.setTimeout(e,t);i.stop=function(){n.clearTimeout(r)}})},function(){var t=K.createElement("input"),e=K.createElement("select").appendChild(K.createElement("option"));t.type="checkbox",ct.checkOn=""!==t.value,ct.optSelected=e.selected,(t=K.createElement("input")).value="t",t.type="radio",ct.radioValue="t"===t.value}();var de,pe=lt.expr.attrHandle;lt.fn.extend({attr:function(t,e){return _t(this,lt.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){lt.removeAttr(this,t)})}}),lt.extend({attr:function(t,e,n){var i,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?lt.prop(t,e,n):(1===o&&lt.isXMLDoc(t)||(r=lt.attrHooks[e.toLowerCase()]||(lt.expr.match.bool.test(e)?de:void 0)),void 0!==n?null===n?void lt.removeAttr(t,e):r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:(t.setAttribute(e,n+""),n):r&&"get"in r&&null!==(i=r.get(t,e))?i:null==(i=lt.find.attr(t,e))?void 0:i)},attrHooks:{type:{set:function(t,e){if(!ct.radioValue&&"radio"===e&&a(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i=0,r=e&&e.match(kt);if(r&&1===t.nodeType)for(;n=r[i++];)t.removeAttribute(n)}}),de={set:function(t,e,n){return!1===e?lt.removeAttr(t,n):t.setAttribute(n,n),n}},lt.each(lt.expr.match.bool.source.match(/\w+/g),function(t,e){var n=pe[e]||lt.find.attr;pe[e]=function(t,e,i){var r,o,s=e.toLowerCase();return i||(o=pe[s],pe[s]=r,r=null!=n(t,e,i)?s:null,pe[s]=o),r}});var ge=/^(?:input|select|textarea|button)$/i,me=/^(?:a|area)$/i;lt.fn.extend({prop:function(t,e){return _t(this,lt.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[lt.propFix[t]||t]})}}),lt.extend({prop:function(t,e,n){var i,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&lt.isXMLDoc(t)||(e=lt.propFix[e]||e,r=lt.propHooks[e]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:t[e]=n:r&&"get"in r&&null!==(i=r.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=lt.find.attr(t,"tabindex");return e?parseInt(e,10):ge.test(t.nodeName)||me.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),ct.optSelected||(lt.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),lt.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){lt.propFix[this.toLowerCase()]=this}),lt.fn.extend({addClass:function(t){var e,n,i,r,o,s,a,u=0;if(lt.isFunction(t))return this.each(function(e){lt(this).addClass(t.call(this,e,X(this)))});if("string"==typeof t&&t)for(e=t.match(kt)||[];n=this[u++];)if(r=X(n),i=1===n.nodeType&&" "+U(r)+" "){for(s=0;o=e[s++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(a=U(i))&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,i,r,o,s,a,u=0;if(lt.isFunction(t))return this.each(function(e){lt(this).removeClass(t.call(this,e,X(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(kt)||[];n=this[u++];)if(r=X(n),i=1===n.nodeType&&" "+U(r)+" "){for(s=0;o=e[s++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");r!==(a=U(i))&&n.setAttribute("class",a)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):lt.isFunction(t)?this.each(function(n){lt(this).toggleClass(t.call(this,n,X(this),e),e)}):this.each(function(){var e,i,r,o;if("string"===n)for(i=0,r=lt(this),o=t.match(kt)||[];e=o[i++];)r.hasClass(e)?r.removeClass(e):r.addClass(e);else void 0!==t&&"boolean"!==n||((e=X(this))&&Lt.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":Lt.get(this,"__className__")||""))})},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&(" "+U(X(n))+" ").indexOf(e)>-1)return!0;return!1}});var ve=/\r/g;lt.fn.extend({val:function(t){var e,n,i,r=this[0];return arguments.length?(i=lt.isFunction(t),this.each(function(n){var r;1===this.nodeType&&(null==(r=i?t.call(this,n,lt(this).val()):t)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=lt.map(r,function(t){return null==t?"":t+""})),(e=lt.valHooks[this.type]||lt.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))})):r?(e=lt.valHooks[r.type]||lt.valHooks[r.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(ve,""):null==n?"":n:void 0}}),lt.extend({valHooks:{option:{get:function(t){var e=lt.find.attr(t,"value");return null!=e?e:U(lt.text(t))}},select:{get:function(t){var e,n,i,r=t.options,o=t.selectedIndex,s="select-one"===t.type,u=s?null:[],c=s?o+1:r.length;for(i=o<0?c:s?o:0;i<c;i++)if(((n=r[i]).selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!a(n.parentNode,"optgroup"))){if(e=lt(n).val(),s)return e;u.push(e)}return u},set:function(t,e){for(var n,i,r=t.options,o=lt.makeArray(e),s=r.length;s--;)((i=r[s]).selected=lt.inArray(lt.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),lt.each(["radio","checkbox"],function(){lt.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=lt.inArray(lt(t).val(),e)>-1}},ct.checkOn||(lt.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var ye=/^(?:focusinfocus|focusoutblur)$/;lt.extend(lt.event,{trigger:function(t,e,i,r){var o,s,a,u,c,l,h,f=[i||K],d=st.call(t,"type")?t.type:t,p=st.call(t,"namespace")?t.namespace.split("."):[];if(s=a=i=i||K,3!==i.nodeType&&8!==i.nodeType&&!ye.test(d+lt.event.triggered)&&(d.indexOf(".")>-1&&(d=(p=d.split(".")).shift(),p.sort()),c=d.indexOf(":")<0&&"on"+d,t=t[lt.expando]?t:new lt.Event(d,"object"==typeof t&&t),t.isTrigger=r?2:3,t.namespace=p.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),e=null==e?[t]:lt.makeArray(e,[t]),h=lt.event.special[d]||{},r||!h.trigger||!1!==h.trigger.apply(i,e))){if(!r&&!h.noBubble&&!lt.isWindow(i)){for(u=h.delegateType||d,ye.test(u+d)||(s=s.parentNode);s;s=s.parentNode)f.push(s),a=s;a===(i.ownerDocument||K)&&f.push(a.defaultView||a.parentWindow||n)}for(o=0;(s=f[o++])&&!t.isPropagationStopped();)t.type=o>1?u:h.bindType||d,(l=(Lt.get(s,"events")||{})[t.type]&&Lt.get(s,"handle"))&&l.apply(s,e),(l=c&&s[c])&&l.apply&&Pt(s)&&(t.result=l.apply(s,e),!1===t.result&&t.preventDefault());return t.type=d,r||t.isDefaultPrevented()||h._default&&!1!==h._default.apply(f.pop(),e)||!Pt(i)||c&&lt.isFunction(i[d])&&!lt.isWindow(i)&&((a=i[c])&&(i[c]=null),lt.event.triggered=d,i[d](),lt.event.triggered=void 0,a&&(i[c]=a)),t.result}},simulate:function(t,e,n){var i=lt.extend(new lt.Event,n,{type:t,isSimulated:!0});lt.event.trigger(i,null,e)}}),lt.fn.extend({trigger:function(t,e){return this.each(function(){lt.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return lt.event.trigger(t,e,n,!0)}}),lt.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){lt.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),lt.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),ct.focusin="onfocusin"in n,ct.focusin||lt.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){lt.event.simulate(e,t.target,lt.event.fix(t))};lt.event.special[e]={setup:function(){var i=this.ownerDocument||this,r=Lt.access(i,e);r||i.addEventListener(t,n,!0),Lt.access(i,e,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=Lt.access(i,e)-1;r?Lt.access(i,e,r):(i.removeEventListener(t,n,!0),Lt.remove(i,e))}}});var xe=n.location,be=lt.now(),we=/\?/;lt.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||lt.error("Invalid XML: "+t),e};var Te=/\[\]$/,Ee=/\r?\n/g,Se=/^(?:submit|button|image|reset|file)$/i,ke=/^(?:input|select|textarea|keygen)/i;lt.param=function(t,e){var n,i=[],r=function(t,e){var n=lt.isFunction(e)?e():e;i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(t)||t.jquery&&!lt.isPlainObject(t))lt.each(t,function(){r(this.name,this.value)});else for(n in t)V(n,t[n],e,r);return i.join("&")},lt.fn.extend({serialize:function(){return lt.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=lt.prop(this,"elements");return t?lt.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!lt(this).is(":disabled")&&ke.test(this.nodeName)&&!Se.test(t)&&(this.checked||!Ht.test(t))}).map(function(t,e){var n=lt(this).val();return null==n?null:Array.isArray(n)?lt.map(n,function(t){return{name:e.name,value:t.replace(Ee,"\r\n")}}):{name:e.name,value:n.replace(Ee,"\r\n")}}).get()}});var Ce=/%20/g,De=/#.*$/,_e=/([?&])_=[^&]*/,Pe=/^(.*?):[ \t]*([^\r\n]*)$/gm,Le=/^(?:GET|HEAD)$/,Ie=/^\/\//,Ne={},Ae={},je="*/".concat("*"),Me=K.createElement("a");Me.href=xe.href,lt.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:xe.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(xe.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":je,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":lt.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Y(Y(t,lt.ajaxSettings),e):Y(lt.ajaxSettings,t)},ajaxPrefilter:G(Ne),ajaxTransport:G(Ae),ajax:function(t,e){function i(t,e,i,a){var c,f,d,b,w,T=e;l||(l=!0,u&&n.clearTimeout(u),r=void 0,s=a||"",E.readyState=t>0?4:0,c=t>=200&&t<300||304===t,i&&(b=function(t,e,n){for(var i,r,o,s,a=t.contents,u=t.dataTypes;"*"===u[0];)u.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){u.unshift(r);break}if(u[0]in n)o=u[0];else{for(r in n){if(!u[0]||t.converters[r+" "+u[0]]){o=r;break}s||(s=r)}o=o||s}if(o)return o!==u[0]&&u.unshift(o),n[o]}(p,E,i)),b=function(t,e,n,i){var r,o,s,a,u,c={},l=t.dataTypes.slice();if(l[1])for(s in t.converters)c[s.toLowerCase()]=t.converters[s];for(o=l.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!u&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),u=o,o=l.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(s=c[u+" "+o]||c["* "+o]))for(r in c)if((a=r.split(" "))[1]===o&&(s=c[u+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[r]:!0!==c[r]&&(o=a[0],l.unshift(a[1]));break}if(!0!==s)if(s&&t.throws)e=s(e);else try{e=s(e)}catch(t){return{state:"parsererror",error:s?t:"No conversion from "+u+" to "+o}}}return{state:"success",data:e}}(p,b,E,c),c?(p.ifModified&&((w=E.getResponseHeader("Last-Modified"))&&(lt.lastModified[o]=w),(w=E.getResponseHeader("etag"))&&(lt.etag[o]=w)),204===t||"HEAD"===p.type?T="nocontent":304===t?T="notmodified":(T=b.state,f=b.data,c=!(d=b.error))):(d=T,!t&&T||(T="error",t<0&&(t=0))),E.status=t,E.statusText=(e||T)+"",c?v.resolveWith(g,[f,T,E]):v.rejectWith(g,[E,T,d]),E.statusCode(x),x=void 0,h&&m.trigger(c?"ajaxSuccess":"ajaxError",[E,p,c?f:d]),y.fireWith(g,[E,T]),h&&(m.trigger("ajaxComplete",[E,p]),--lt.active||lt.event.trigger("ajaxStop")))}"object"==typeof t&&(e=t,t=void 0),e=e||{};var r,o,s,a,u,c,l,h,f,d,p=lt.ajaxSetup({},e),g=p.context||p,m=p.context&&(g.nodeType||g.jquery)?lt(g):lt.event,v=lt.Deferred(),y=lt.Callbacks("once memory"),x=p.statusCode||{},b={},w={},T="canceled",E={readyState:0,getResponseHeader:function(t){var e;if(l){if(!a)for(a={};e=Pe.exec(s);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return l?s:null},setRequestHeader:function(t,e){return null==l&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,b[t]=e),this},overrideMimeType:function(t){return null==l&&(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(l)E.always(t[E.status]);else for(e in t)x[e]=[x[e],t[e]];return this},abort:function(t){var e=t||T;return r&&r.abort(e),i(0,e),this}};if(v.promise(E),p.url=((t||p.url||xe.href)+"").replace(Ie,xe.protocol+"//"),p.type=e.method||e.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(kt)||[""],null==p.crossDomain){c=K.createElement("a");try{c.href=p.url,c.href=c.href,p.crossDomain=Me.protocol+"//"+Me.host!=c.protocol+"//"+c.host}catch(t){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=lt.param(p.data,p.traditional)),Q(Ne,p,e,E),l)return E;(h=lt.event&&p.global)&&0==lt.active++&&lt.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Le.test(p.type),o=p.url.replace(De,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Ce,"+")):(d=p.url.slice(o.length),p.data&&(o+=(we.test(o)?"&":"?")+p.data,delete p.data),!1===p.cache&&(o=o.replace(_e,"$1"),d=(we.test(o)?"&":"?")+"_="+be+++d),p.url=o+d),p.ifModified&&(lt.lastModified[o]&&E.setRequestHeader("If-Modified-Since",lt.lastModified[o]),lt.etag[o]&&E.setRequestHeader("If-None-Match",lt.etag[o])),(p.data&&p.hasContent&&!1!==p.contentType||e.contentType)&&E.setRequestHeader("Content-Type",p.contentType),E.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+je+"; q=0.01":""):p.accepts["*"]);for(f in p.headers)E.setRequestHeader(f,p.headers[f]);if(p.beforeSend&&(!1===p.beforeSend.call(g,E,p)||l))return E.abort();if(T="abort",y.add(p.complete),E.done(p.success),E.fail(p.error),r=Q(Ae,p,e,E)){if(E.readyState=1,h&&m.trigger("ajaxSend",[E,p]),l)return E;p.async&&p.timeout>0&&(u=n.setTimeout(function(){E.abort("timeout")},p.timeout));try{l=!1,r.send(b,i)}catch(t){if(l)throw t;i(-1,t)}}else i(-1,"No Transport");return E},getJSON:function(t,e,n){return lt.get(t,e,n,"json")},getScript:function(t,e){return lt.get(t,void 0,e,"script")}}),lt.each(["get","post"],function(t,e){lt[e]=function(t,n,i,r){return lt.isFunction(n)&&(r=r||i,i=n,n=void 0),lt.ajax(lt.extend({url:t,type:e,dataType:r,data:n,success:i},lt.isPlainObject(t)&&t))}}),lt._evalUrl=function(t){return lt.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},lt.fn.extend({wrapAll:function(t){var e;return this[0]&&(lt.isFunction(t)&&(t=t.call(this[0])),e=lt(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return lt.isFunction(t)?this.each(function(e){lt(this).wrapInner(t.call(this,e))}):this.each(function(){var e=lt(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=lt.isFunction(t);return this.each(function(n){lt(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){lt(this).replaceWith(this.childNodes)}),this}}),lt.expr.pseudos.hidden=function(t){return!lt.expr.pseudos.visible(t)},lt.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},lt.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var Oe={0:200,1223:204},Re=lt.ajaxSettings.xhr();ct.cors=!!Re&&"withCredentials"in Re,ct.ajax=Re=!!Re,lt.ajaxTransport(function(t){var e,i;if(ct.cors||Re&&!t.crossDomain)return{send:function(r,o){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(s in r)a.setRequestHeader(s,r[s]);e=function(t){return function(){e&&(e=i=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Oe[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=e(),i=a.onerror=e("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout(function(){e&&i()})},e=e("abort");try{a.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}}),lt.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),lt.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return lt.globalEval(t),t}}}),lt.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),lt.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(i,r){e=lt("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&r("error"===t.type?404:200,t.type)}),K.head.appendChild(e[0])},abort:function(){n&&n()}}}});var qe=[],ze=/(=)\?(?=&|$)|\?\?/;lt.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=qe.pop()||lt.expando+"_"+be++;return this[t]=!0,t}}),lt.ajaxPrefilter("json jsonp",function(t,e,i){var r,o,s,a=!1!==t.jsonp&&(ze.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&ze.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=lt.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(ze,"$1"+r):!1!==t.jsonp&&(t.url+=(we.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return s||lt.error(r+" was not called"),s[0]},t.dataTypes[0]="json",o=n[r],n[r]=function(){s=arguments},i.always(function(){void 0===o?lt(n).removeProp(r):n[r]=o,t[r]&&(t.jsonpCallback=e.jsonpCallback,qe.push(r)),s&&lt.isFunction(o)&&o(s[0]),s=o=void 0}),"script"}),ct.createHTMLDocument=function(){var t=K.implementation.createHTMLDocument("").body;return t.innerHTML="<form></form><form></form>",2===t.childNodes.length}(),lt.parseHTML=function(t,e,n){if("string"!=typeof t)return[];"boolean"==typeof e&&(n=e,e=!1);var i,r,o;return e||(ct.createHTMLDocument?((i=(e=K.implementation.createHTMLDocument("")).createElement("base")).href=K.location.href,e.head.appendChild(i)):e=K),r=xt.exec(t),o=!n&&[],r?[e.createElement(r[1])]:(r=w([t],e,o),o&&o.length&&lt(o).remove(),lt.merge([],r.childNodes))},lt.fn.load=function(t,e,n){var i,r,o,s=this,a=t.indexOf(" ");return a>-1&&(i=U(t.slice(a)),t=t.slice(0,a)),lt.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(r="POST"),s.length>0&&lt.ajax({url:t,type:r||"GET",dataType:"html",data:e}).done(function(t){o=arguments,s.html(i?lt("<div>").append(lt.parseHTML(t)).find(i):t)}).always(n&&function(t,e){s.each(function(){n.apply(this,o||[t.responseText,e,t])})}),this},lt.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){lt.fn[e]=function(t){return this.on(e,t)}}),lt.expr.pseudos.animated=function(t){return lt.grep(lt.timers,function(e){return t===e.elem}).length},lt.offset={setOffset:function(t,e,n){var i,r,o,s,a,u,c=lt.css(t,"position"),l=lt(t),h={};"static"===c&&(t.style.position="relative"),a=l.offset(),o=lt.css(t,"top"),u=lt.css(t,"left"),("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1?(s=(i=l.position()).top,r=i.left):(s=parseFloat(o)||0,r=parseFloat(u)||0),lt.isFunction(e)&&(e=e.call(t,n,lt.extend({},a))),null!=e.top&&(h.top=e.top-a.top+s),null!=e.left&&(h.left=e.left-a.left+r),"using"in e?e.using.call(t,h):l.css(h)}},lt.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){lt.offset.setOffset(this,t,e)});var e,n,i,r,o=this[0];return o?o.getClientRects().length?(i=o.getBoundingClientRect(),e=o.ownerDocument,n=e.documentElement,r=e.defaultView,{top:i.top+r.pageYOffset-n.clientTop,left:i.left+r.pageXOffset-n.clientLeft}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n=this[0],i={top:0,left:0};return"fixed"===lt.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),a(t[0],"html")||(i=t.offset()),i={top:i.top+lt.css(t[0],"borderTopWidth",!0),left:i.left+lt.css(t[0],"borderLeftWidth",!0)}),{top:e.top-i.top-lt.css(n,"marginTop",!0),left:e.left-i.left-lt.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===lt.css(t,"position");)t=t.offsetParent;return t||Ut})}}),lt.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;lt.fn[t]=function(i){return _t(this,function(t,i,r){var o;if(lt.isWindow(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===r)return o?o[e]:t[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):t[i]=r},t,i,arguments.length)}}),lt.each(["top","left"],function(t,e){lt.cssHooks[e]=j(ct.pixelPosition,function(t,n){if(n)return n=A(t,e),ee.test(n)?lt(t).position()[e]+"px":n})}),lt.each({Height:"height",Width:"width"},function(t,e){lt.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){lt.fn[i]=function(r,o){var s=arguments.length&&(n||"boolean"!=typeof r),a=n||(!0===r||!0===o?"margin":"border");return _t(this,function(e,n,r){var o;return lt.isWindow(e)?0===i.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===r?lt.css(e,n,a):lt.style(e,n,r,a)},e,s?r:void 0,s)}})}),lt.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),lt.holdReady=function(t){t?lt.readyWait++:lt.ready(!0)},lt.isArray=Array.isArray,lt.parseJSON=JSON.parse,lt.nodeName=a,void 0===(i=function(){return lt}.apply(e,[]))||(t.exports=i);var He=n.jQuery,Fe=n.$;return lt.noConflict=function(t){return n.$===lt&&(n.$=Fe),t&&n.jQuery===lt&&(n.jQuery=He),lt},r||(n.jQuery=n.$=lt),lt})},50:function(t,e,n){var i;!function(r,o){"use strict";void 0===(i=function(){return o()}.call(e,n,e,t))||(t.exports=i)}(window,function(){"use strict";function t(t){var e=parseFloat(t);return-1==t.indexOf("%")&&!isNaN(e)&&e}function e(t){var e=getComputedStyle(t);return e||r("Style returned "+e+". Are you running this code in a hidden iframe on Firefox? See http://bit.ly/getsizebug1"),e}function n(r){if(function(){if(!a){a=!0;var r=document.createElement("div");r.style.width="200px",r.style.padding="1px 2px 3px 4px",r.style.borderStyle="solid",r.style.borderWidth="1px 2px 3px 4px",r.style.boxSizing="border-box";var o=document.body||document.documentElement;o.appendChild(r);var s=e(r);n.isBoxSizeOuter=i=200==t(s.width),o.removeChild(r)}}(),"string"==typeof r&&(r=document.querySelector(r)),r&&"object"==typeof r&&r.nodeType){var u=e(r);if("none"==u.display)return function(){for(var t={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},e=0;e<s;e++)t[o[e]]=0;return t}();var c={};c.width=r.offsetWidth,c.height=r.offsetHeight;for(var l=c.isBorderBox="border-box"==u.boxSizing,h=0;h<s;h++){var f=o[h],d=u[f],p=parseFloat(d);c[f]=isNaN(p)?0:p}var g=c.paddingLeft+c.paddingRight,m=c.paddingTop+c.paddingBottom,v=c.marginLeft+c.marginRight,y=c.marginTop+c.marginBottom,x=c.borderLeftWidth+c.borderRightWidth,b=c.borderTopWidth+c.borderBottomWidth,w=l&&i,T=t(u.width);!1!==T&&(c.width=T+(w?0:g+x));var E=t(u.height);return!1!==E&&(c.height=E+(w?0:m+b)),c.innerWidth=c.width-(g+x),c.innerHeight=c.height-(m+b),c.outerWidth=c.width+v,c.outerHeight=c.height+y,c}}var i,r="undefined"==typeof console?function(){}:function(t){console.error(t)},o=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"],s=o.length,a=!1;return n})},65:function(t,e,n){var i,r;!function(o,s){void 0===(r="function"==typeof(i=s)?i.call(e,n,e,t):i)||(t.exports=r)}("undefined"!=typeof window&&window,function(){"use strict";function t(){}var e=t.prototype;return e.on=function(t,e){if(t&&e){var n=this._events=this._events||{},i=n[t]=n[t]||[];return-1==i.indexOf(e)&&i.push(e),this}},e.once=function(t,e){if(t&&e){this.on(t,e);var n=this._onceEvents=this._onceEvents||{};return(n[t]=n[t]||{})[e]=!0,this}},e.off=function(t,e){var n=this._events&&this._events[t];if(n&&n.length){var i=n.indexOf(e);return-1!=i&&n.splice(i,1),this}},e.emitEvent=function(t,e){var n=this._events&&this._events[t];if(n&&n.length){n=n.slice(0),e=e||[];for(var i=this._onceEvents&&this._onceEvents[t],r=0;r<n.length;r++){var o=n[r];i&&i[o]&&(this.off(t,o),delete i[o]),o.apply(this,e)}return this}},e.allOff=function(){delete this._events,delete this._onceEvents},t})},66:function(t,e,n){var i,r;!function(o,s){void 0===(r="function"==typeof(i=s)?i.call(e,n,e,t):i)||(t.exports=r)}(window,function(){"use strict";function t(e){for(var n in t.defaults)this[n]=t.defaults[n];for(n in e)this[n]=e[n]}t.defaults={x:0,y:0,width:0,height:0};var e=t.prototype;return e.contains=function(t){var e=t.width||0,n=t.height||0;return this.x<=t.x&&this.y<=t.y&&this.x+this.width>=t.x+e&&this.y+this.height>=t.y+n},e.overlaps=function(t){var e=this.x+this.width,n=this.y+this.height,i=t.x+t.width,r=t.y+t.height;return this.x<i&&e>t.x&&this.y<r&&n>t.y},e.getMaximalFreeRects=function(e){if(!this.overlaps(e))return!1;var n,i=[],r=this.x+this.width,o=this.y+this.height,s=e.x+e.width,a=e.y+e.height;return this.y<e.y&&(n=new t({x:this.x,y:this.y,width:this.width,height:e.y-this.y}),i.push(n)),r>s&&(n=new t({x:s,y:this.y,width:r-s,height:this.height}),i.push(n)),o>a&&(n=new t({x:this.x,y:a,width:this.width,height:o-a}),i.push(n)),this.x<e.x&&(n=new t({x:this.x,y:this.y,width:e.x-this.x,height:this.height}),i.push(n)),i},e.canFit=function(t){return this.width>=t.width&&this.height>=t.height},t})},94:function(t,e,n){var i,r;!function(o,s){"use strict";i=[n(65),n(50),n(138),n(140)],void 0===(r=function(t,e,n,i){return s(o,t,e,n,i)}.apply(e,i))||(t.exports=r)}(window,function(t,e,n,i,r){"use strict";function o(t,e){var n=i.getQueryElement(t);if(n){this.element=n,u&&(this.$element=u(this.element)),this.options=i.extend({},this.constructor.defaults),this.option(e);var r=++l;this.element.outlayerGUID=r,h[r]=this,this._create(),this._getOption("initLayout")&&this.layout()}else a&&a.error("Bad element for "+this.constructor.namespace+": "+(n||t))}function s(t){function e(){t.apply(this,arguments)}return e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e}var a=t.console,u=t.jQuery,c=function(){},l=0,h={};o.namespace="outlayer",o.Item=r,o.defaults={containerStyle:{position:"relative"},initLayout:!0,originLeft:!0,originTop:!0,resize:!0,resizeContainer:!0,transitionDuration:"0.4s",hiddenStyle:{opacity:0,transform:"scale(0.001)"},visibleStyle:{opacity:1,transform:"scale(1)"}};var f=o.prototype;i.extend(f,e.prototype),f.option=function(t){i.extend(this.options,t)},f._getOption=function(t){var e=this.constructor.compatOptions[t];return e&&void 0!==this.options[e]?this.options[e]:this.options[t]},o.compatOptions={initLayout:"isInitLayout",horizontal:"isHorizontal",layoutInstant:"isLayoutInstant",originLeft:"isOriginLeft",originTop:"isOriginTop",resize:"isResizeBound",resizeContainer:"isResizingContainer"},f._create=function(){this.reloadItems(),this.stamps=[],this.stamp(this.options.stamp),i.extend(this.element.style,this.options.containerStyle),this._getOption("resize")&&this.bindResize()},f.reloadItems=function(){this.items=this._itemize(this.element.children)},f._itemize=function(t){for(var e=this._filterFindItemElements(t),n=this.constructor.Item,i=[],r=0;r<e.length;r++){var o=new n(e[r],this);i.push(o)}return i},f._filterFindItemElements=function(t){return i.filterFindElements(t,this.options.itemSelector)},f.getItemElements=function(){return this.items.map(function(t){return t.element})},f.layout=function(){this._resetLayout(),this._manageStamps();var t=this._getOption("layoutInstant"),e=void 0!==t?t:!this._isLayoutInited;this.layoutItems(this.items,e),this._isLayoutInited=!0},f._init=f.layout,f._resetLayout=function(){this.getSize()},f.getSize=function(){this.size=n(this.element)},f._getMeasurement=function(t,e){var i,r=this.options[t];r?("string"==typeof r?i=this.element.querySelector(r):r instanceof HTMLElement&&(i=r),this[t]=i?n(i)[e]:r):this[t]=0},f.layoutItems=function(t,e){t=this._getItemsForLayout(t),this._layoutItems(t,e),this._postLayout()},f._getItemsForLayout=function(t){return t.filter(function(t){return!t.isIgnored})},f._layoutItems=function(t,e){if(this._emitCompleteOnItems("layout",t),t&&t.length){var n=[];t.forEach(function(t){var i=this._getItemLayoutPosition(t);i.item=t,i.isInstant=e||t.isLayoutInstant,n.push(i)},this),this._processLayoutQueue(n)}},f._getItemLayoutPosition=function(){return{x:0,y:0}},f._processLayoutQueue=function(t){this.updateStagger(),t.forEach(function(t,e){this._positionItem(t.item,t.x,t.y,t.isInstant,e)},this)},f.updateStagger=function(){var t=this.options.stagger;if(null!==t&&void 0!==t)return this.stagger=function(t){if("number"==typeof t)return t;var e=t.match(/(^\d*\.?\d*)(\w*)/),n=e&&e[1],i=e&&e[2];return n.length?(n=parseFloat(n))*(d[i]||1):0}(t),this.stagger;this.stagger=0},f._positionItem=function(t,e,n,i,r){i?t.goTo(e,n):(t.stagger(r*this.stagger),t.moveTo(e,n))},f._postLayout=function(){this.resizeContainer()},f.resizeContainer=function(){if(this._getOption("resizeContainer")){var t=this._getContainerSize();t&&(this._setContainerMeasure(t.width,!0),this._setContainerMeasure(t.height,!1))}},f._getContainerSize=c,f._setContainerMeasure=function(t,e){if(void 0!==t){var n=this.size;n.isBorderBox&&(t+=e?n.paddingLeft+n.paddingRight+n.borderLeftWidth+n.borderRightWidth:n.paddingBottom+n.paddingTop+n.borderTopWidth+n.borderBottomWidth),t=Math.max(t,0),this.element.style[e?"width":"height"]=t+"px"}},f._emitCompleteOnItems=function(t,e){function n(){r.dispatchEvent(t+"Complete",null,[e])}function i(){++s==o&&n()}var r=this,o=e.length;if(e&&o){var s=0;e.forEach(function(e){e.once(t,i)})}else n()},f.dispatchEvent=function(t,e,n){var i=e?[e].concat(n):n;if(this.emitEvent(t,i),u)if(this.$element=this.$element||u(this.element),e){var r=u.Event(e);r.type=t,this.$element.trigger(r,n)}else this.$element.trigger(t,n)},f.ignore=function(t){var e=this.getItem(t);e&&(e.isIgnored=!0)},f.unignore=function(t){var e=this.getItem(t);e&&delete e.isIgnored},f.stamp=function(t){(t=this._find(t))&&(this.stamps=this.stamps.concat(t),t.forEach(this.ignore,this))},f.unstamp=function(t){(t=this._find(t))&&t.forEach(function(t){i.removeFrom(this.stamps,t),this.unignore(t)},this)},f._find=function(t){if(t)return"string"==typeof t&&(t=this.element.querySelectorAll(t)),t=i.makeArray(t)},f._manageStamps=function(){this.stamps&&this.stamps.length&&(this._getBoundingRect(),this.stamps.forEach(this._manageStamp,this))},f._getBoundingRect=function(){var t=this.element.getBoundingClientRect(),e=this.size;this._boundingRect={left:t.left+e.paddingLeft+e.borderLeftWidth,top:t.top+e.paddingTop+e.borderTopWidth,right:t.right-(e.paddingRight+e.borderRightWidth),bottom:t.bottom-(e.paddingBottom+e.borderBottomWidth)}},f._manageStamp=c,f._getElementOffset=function(t){var e=t.getBoundingClientRect(),i=this._boundingRect,r=n(t);return{left:e.left-i.left-r.marginLeft,top:e.top-i.top-r.marginTop,right:i.right-e.right-r.marginRight,bottom:i.bottom-e.bottom-r.marginBottom}},f.handleEvent=i.handleEvent,f.bindResize=function(){t.addEventListener("resize",this),this.isResizeBound=!0},f.unbindResize=function(){t.removeEventListener("resize",this),this.isResizeBound=!1},f.onresize=function(){this.resize()},i.debounceMethod(o,"onresize",100),f.resize=function(){this.isResizeBound&&this.needsResizeLayout()&&this.layout()},f.needsResizeLayout=function(){var t=n(this.element);return this.size&&t&&t.innerWidth!==this.size.innerWidth},f.addItems=function(t){var e=this._itemize(t);return e.length&&(this.items=this.items.concat(e)),e},f.appended=function(t){var e=this.addItems(t);e.length&&(this.layoutItems(e,!0),this.reveal(e))},f.prepended=function(t){var e=this._itemize(t);if(e.length){var n=this.items.slice(0);this.items=e.concat(n),this._resetLayout(),this._manageStamps(),this.layoutItems(e,!0),this.reveal(e),this.layoutItems(n)}},f.reveal=function(t){if(this._emitCompleteOnItems("reveal",t),t&&t.length){var e=this.updateStagger();t.forEach(function(t,n){t.stagger(n*e),t.reveal()})}},f.hide=function(t){if(this._emitCompleteOnItems("hide",t),t&&t.length){var e=this.updateStagger();t.forEach(function(t,n){t.stagger(n*e),t.hide()})}},f.revealItemElements=function(t){var e=this.getItems(t);this.reveal(e)},f.hideItemElements=function(t){var e=this.getItems(t);this.hide(e)},f.getItem=function(t){for(var e=0;e<this.items.length;e++){var n=this.items[e];if(n.element==t)return n}},f.getItems=function(t){var e=[];return(t=i.makeArray(t)).forEach(function(t){var n=this.getItem(t);n&&e.push(n)},this),e},f.remove=function(t){var e=this.getItems(t);this._emitCompleteOnItems("remove",e),e&&e.length&&e.forEach(function(t){t.remove(),i.removeFrom(this.items,t)},this)},f.destroy=function(){var t=this.element.style;t.height="",t.position="",t.width="",this.items.forEach(function(t){t.destroy()}),this.unbindResize();var e=this.element.outlayerGUID;delete h[e],delete this.element.outlayerGUID,u&&u.removeData(this.element,this.constructor.namespace)},o.data=function(t){var e=(t=i.getQueryElement(t))&&t.outlayerGUID;return e&&h[e]},o.create=function(t,e){var n=s(o);return n.defaults=i.extend({},o.defaults),i.extend(n.defaults,e),n.compatOptions=i.extend({},o.compatOptions),n.namespace=t,n.data=o.data,n.Item=s(r),i.htmlInit(n,t),u&&u.bridget&&u.bridget(t,n),n};var d={ms:1,s:1e3};return o.Item=r,o})},95:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={1:{id:1,title:"物聯網蚊媒地圖",type:"image",size:{small:"https://smartcampus.csie.ncku.edu.tw/media/images/screenshot/zapper.png",medium:"./assets/media/map.png",large:"https://smartcampus.csie.ncku.edu.tw/media/images/screenshot/zapper.png"},link:"https://mosquitokiller.csie.ncku.edu.tw/zapperTown/"},2:{id:2,title:"我的捕蚊燈",type:"image",size:{small:"https://fakeimg.pl/200x400/",medium:"https://fakeimg.pl/400x400/",large:"./assets/media/zapper.png"},link:"#"},3:{id:3,title:"校園導覽路徑",type:"image",size:{small:"https://fakeimg.pl/200x200/",medium:"https://fakeimg.pl/400x200/",large:"./assets/media/path.png"},defaultSize:"large",link:"https://smartcampus.csie.ncku.edu.tw/heatview/"},4:{id:4,title:"Vote-a",type:"vote",questionId:"5a260bc273e4501c0ccae797",size:{small:"https://fakeimg.pl/200x600/",medium:"https://fakeimg.pl/400x600/",large:"https://fakeimg.pl/600x600/"},link:"https://90828d2f.ngrok.io/students/"},5:{id:5,title:"Vote-b",type:"vote",questionId:"5a4ce12512529532a4a58b29",size:{small:"https://fakeimg.pl/200x200/",medium:"https://fakeimg.pl/400x200/",large:"https://fakeimg.pl/600x200/"},link:"https://90828d2f.ngrok.io/students/"},6:{id:6,title:"你贊成系K館的成立嗎？",type:"vote",questionId:"5a260bc273e4501c0ccae797",size:{small:"https://fakeimg.pl/200x200/",medium:"https://fakeimg.pl/400x200/",large:"https://fakeimg.pl/600x200/"},link:"https://90828d2f.ngrok.io/students/"}}},96:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={order:[{id:1,size:"medium"},{id:5,size:"medium"},{id:4,size:"medium"},{id:2,size:"large"},{id:3,size:"large"}],usedID:[1,2,3,5,4]}},97:function(t,e,n){"use strict";function i(t){return function(){var e=t.apply(this,arguments);return new Promise(function(t,n){function i(r,o){try{var s=e[r](o),a=s.value}catch(t){return void n(t)}if(!s.done)return Promise.resolve(a).then(function(t){i("next",t)},function(t){i("throw",t)});t(a)}return i("next")})}}function r(t){localStorage.setItem("userData",JSON.stringify(t))}function o(){localStorage.removeItem("userData")}function s(){var t=localStorage.getItem("userData");return JSON.parse(t)}Object.defineProperty(e,"__esModule",{value:!0});var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};e.setUserData=r,e.deleteUserData=o,e.default=s;var u=function(t){return t&&t.__esModule?t:{default:t}}(n(31));n(149),function(){function t(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,i={method:e,headers:{Accept:"application/json","Content-Type":"application/x-www-form-urlencoded; charset=utf-8"}};return n&&(i.body=u.default.param(n)),fetch(t,i)}function e(t,e){var n=document.getElementById(t);return function(t){if(!t.checkValidity())throw t.reportValidity(),new Error(m)}(n),e.reduce(function(t,e){var i=t;return i[e]=n[e].value,i},{})}var n=function(){var t=i(regeneratorRuntime.mark(function t(e){var n,i;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return n={json:"application/json; charset=utf-8",text:"text/html; charset=utf-8"},t.next=3,e.headers.get("content-type");case 3:return i=t.sent,t.abrupt("return",i===n.json?e.json():e.text());case 5:case"end":return t.stop()}},t,this)}));return function(e){return t.apply(this,arguments)}}(),c=function(){var t=i(regeneratorRuntime.mark(function t(e){var i;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if([200,201].includes(e.status)){t.next=8;break}return t.next=4,e.text();case 4:throw i=t.sent,new Error(i);case 8:return t.abrupt("return",n(e));case 9:case"end":return t.stop()}},t,this)}));return function(e){return t.apply(this,arguments)}}(),l=function(){var e=i(regeneratorRuntime.mark(function e(n,i){var o,s;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,t(g+"/"+n+"/","POST",i);case 3:return o=e.sent,e.next=6,c(o);case 6:"object"===(void 0===(s=e.sent)?"undefined":a(s))&&r(s.data),window.location.reload(),e.next=15;break;case 11:e.prev=11,e.t0=e.catch(0),(0,u.default)("#errorMsg--"+n).text(e.t0.message),(0,u.default)("#errorMsg--"+n).addClass("active");case 15:case"end":return e.stop()}},e,this,[[0,11]])}));return function(t,n){return e.apply(this,arguments)}}(),h=function(){var t=i(regeneratorRuntime.mark(function t(e){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,l("signup",e);case 2:case"end":return t.stop()}},t,this)}));return function(e){return t.apply(this,arguments)}}(),f=function(){var t=i(regeneratorRuntime.mark(function t(e){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,l("login",e);case 2:case"end":return t.stop()}},t,this)}));return function(e){return t.apply(this,arguments)}}(),d=function(){var e=i(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t(g+"/logout/","POST");case 2:o(),window.location.reload();case 4:case"end":return e.stop()}},e,this)}));return function(){return e.apply(this,arguments)}}(),p=function(){var t=i(regeneratorRuntime.mark(function t(e){var n;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:n=s(),r(Object.assign({},n,e)),window.location.reload();case 4:case"end":return t.stop()}},t,this)}));return function(e){return t.apply(this,arguments)}}(),g="https://smartcampus.csie.ncku.edu.tw/smart_campus",m="Form validation fail";(0,u.default)("#btn--login").click(function(t){t.preventDefault();var n=e("form--login",["email","password"]);f(n)}),(0,u.default)("#btn--signup").click(function(t){t.preventDefault();var n=e("form--signup",["email","password","nickname"]);h(n)}),(0,u.default)("#btn--logout").click(d),(0,u.default)("#btn--setup").click(function(t){t.preventDefault();var n=e("form--setup",["zapperId"]);p(n)})}()}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,