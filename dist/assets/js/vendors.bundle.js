!function(t){function e(i){if(n[i])return n[i].exports;var r=n[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,e),r.l=!0,r.exports}var n={};e.m=t,e.c=n,e.d=function(t,n,i){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:i})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=156)}({156:function(t,e,n){"use strict";n(157)},157:function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{default:t}}var r=i(n(31)),o=i(n(158));(function(){var t,e,n,i=[].slice,s=function(t,e){return function(){return t.apply(e,arguments)}},a={}.hasOwnProperty,l=function(t,e){function n(){this.constructor=t}for(var i in e)a.call(e,i)&&(t[i]=e[i]);return n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype,t},u=[].indexOf||function(t){for(var e=0,n=this.length;e<n;e++)if(e in this&&this[e]===t)return e;return-1};(t=window.Morris={}).EventEmitter=function(){function t(){}return t.prototype.on=function(t,e){return null==this.handlers&&(this.handlers={}),null==this.handlers[t]&&(this.handlers[t]=[]),this.handlers[t].push(e),this},t.prototype.fire=function(){var t,e,n,r,o,s,a;if(n=arguments[0],t=2<=arguments.length?i.call(arguments,1):[],null!=this.handlers&&null!=this.handlers[n]){for(a=[],r=0,o=(s=this.handlers[n]).length;r<o;r++)e=s[r],a.push(e.apply(null,t));return a}},t}(),t.commas=function(t){var e,n,i,r;return null!=t?(i=t<0?"-":"",e=Math.abs(t),n=Math.floor(e).toFixed(0),i+=n.replace(/(?=(?:\d{3})+$)(?!^)/g,","),(r=e.toString()).length>n.length&&(i+=r.slice(n.length)),i):"-"},t.pad2=function(t){return(t<10?"0":"")+t},t.Grid=function(e){function n(t){this.resizeHandler=s(this.resizeHandler,this);var e=this;if("string"==typeof t.element?this.el=(0,r.default)(document.getElementById(t.element)):this.el=(0,r.default)(t.element),null==this.el||0===this.el.length)throw new Error("Graph container element not found");"static"===this.el.css("position")&&this.el.css("position","relative"),this.options=r.default.extend({},this.gridDefaults,this.defaults||{},t),"string"==typeof this.options.units&&(this.options.postUnits=t.units),this.raphael=new o.default(this.el[0]),this.elementWidth=null,this.elementHeight=null,this.dirty=!1,this.selectFrom=null,this.init&&this.init(),this.setData(this.options.data),this.el.bind("mousemove",function(t){var n,i,r,o,s;return i=e.el.offset(),s=t.pageX-i.left,e.selectFrom?(n=e.data[e.hitTest(Math.min(s,e.selectFrom))]._x,r=e.data[e.hitTest(Math.max(s,e.selectFrom))]._x,o=r-n,e.selectionRect.attr({x:n,width:o})):e.fire("hovermove",s,t.pageY-i.top)}),this.el.bind("mouseleave",function(t){return e.selectFrom&&(e.selectionRect.hide(),e.selectFrom=null),e.fire("hoverout")}),this.el.bind("touchstart touchmove touchend",function(t){var n,i;return i=t.originalEvent.touches[0]||t.originalEvent.changedTouches[0],n=e.el.offset(),e.fire("hovermove",i.pageX-n.left,i.pageY-n.top)}),this.el.bind("click",function(t){var n;return n=e.el.offset(),e.fire("gridclick",t.pageX-n.left,t.pageY-n.top)}),this.options.rangeSelect&&(this.selectionRect=this.raphael.rect(0,0,0,this.el.innerHeight()).attr({fill:this.options.rangeSelectColor,stroke:!1}).toBack().hide(),this.el.bind("mousedown",function(t){var n;return n=e.el.offset(),e.startRange(t.pageX-n.left)}),this.el.bind("mouseup",function(t){var n;return n=e.el.offset(),e.endRange(t.pageX-n.left),e.fire("hovermove",t.pageX-n.left,t.pageY-n.top)})),this.options.resize&&(0,r.default)(window).bind("resize",function(t){return null!=e.timeoutId&&window.clearTimeout(e.timeoutId),e.timeoutId=window.setTimeout(e.resizeHandler,100)}),this.el.css("-webkit-tap-highlight-color","rgba(0,0,0,0)"),this.postInit&&this.postInit()}return l(n,e),n.prototype.gridDefaults={dateFormat:null,axes:!0,grid:!0,gridLineColor:"#aaa",gridStrokeWidth:.5,gridTextColor:"#888",gridTextSize:12,gridTextFamily:"sans-serif",gridTextWeight:"normal",hideHover:!1,yLabelFormat:null,xLabelAngle:0,numLines:5,padding:25,parseTime:!0,postUnits:"",preUnits:"",ymax:"auto",ymin:"auto 0",goals:[],goalStrokeWidth:1,goalLineColors:["#666633","#999966","#cc6666","#663333"],events:[],eventStrokeWidth:1,eventLineColors:["#005a04","#ccffbb","#3a5f0b","#005502"],rangeSelect:null,rangeSelectColor:"#eef",resize:!1},n.prototype.setData=function(e,n){var i,r,o,s,a,l,u,h,c,f,p,d,g,v,y;return null==n&&(n=!0),this.options.data=e,null==e||0===e.length?(this.data=[],this.raphael.clear(),void(null!=this.hover&&this.hover.hide())):(d=this.cumulative?0:null,g=this.cumulative?0:null,this.options.goals.length>0&&(a=Math.min.apply(Math,this.options.goals),s=Math.max.apply(Math,this.options.goals),g=null!=g?Math.min(g,a):a,d=null!=d?Math.max(d,s):s),this.data=function(){var n,i,s;for(s=[],o=n=0,i=e.length;n<i;o=++n)u=e[o],(l={src:u}).label=u[this.options.xkey],this.options.parseTime?(l.x=t.parseDate(l.label),this.options.dateFormat?l.label=this.options.dateFormat(l.x):"number"==typeof l.label&&(l.label=new Date(l.label).toString())):(l.x=o,this.options.xLabelFormat&&(l.label=this.options.xLabelFormat(l))),c=0,l.y=function(){var t,e,n,i;for(n=this.options.ykeys,i=[],r=t=0,e=n.length;t<e;r=++t)p=n[r],"string"==typeof(v=u[p])&&(v=parseFloat(v)),null!=v&&"number"!=typeof v&&(v=null),null!=v&&(this.cumulative?c+=v:null!=d?(d=Math.max(v,d),g=Math.min(v,g)):d=g=v),this.cumulative&&null!=c&&(d=Math.max(c,d),g=Math.min(c,g)),i.push(v);return i}.call(this),s.push(l);return s}.call(this),this.options.parseTime&&(this.data=this.data.sort(function(t,e){return(t.x>e.x)-(e.x>t.x)})),this.xmin=this.data[0].x,this.xmax=this.data[this.data.length-1].x,this.events=[],this.options.events.length>0&&(this.options.parseTime?this.events=function(){var e,n,r,o;for(o=[],e=0,n=(r=this.options.events).length;e<n;e++)i=r[e],o.push(t.parseDate(i));return o}.call(this):this.events=this.options.events,this.xmax=Math.max(this.xmax,Math.max.apply(Math,this.events)),this.xmin=Math.min(this.xmin,Math.min.apply(Math,this.events))),this.xmin===this.xmax&&(this.xmin-=1,this.xmax+=1),this.ymin=this.yboundary("min",g),this.ymax=this.yboundary("max",d),this.ymin===this.ymax&&(g&&(this.ymin-=1),this.ymax+=1),!0!==(y=this.options.axes)&&"both"!==y&&"y"!==y&&!0!==this.options.grid||(this.options.ymax===this.gridDefaults.ymax&&this.options.ymin===this.gridDefaults.ymin?(this.grid=this.autoGridLines(this.ymin,this.ymax,this.options.numLines),this.ymin=Math.min(this.ymin,this.grid[0]),this.ymax=Math.max(this.ymax,this.grid[this.grid.length-1])):(h=(this.ymax-this.ymin)/(this.options.numLines-1),this.grid=function(){var t,e,n;for(n=[],f=t=this.ymin,e=this.ymax;h>0?t<=e:t>=e;f=t+=h)n.push(f);return n}.call(this))),this.dirty=!0,n?this.redraw():void 0)},n.prototype.yboundary=function(t,e){var n,i;return"string"==typeof(n=this.options["y"+t])?"auto"===n.slice(0,4)?n.length>5?(i=parseInt(n.slice(5),10),null==e?i:Math[t](e,i)):null!=e?e:0:parseInt(n,10):n},n.prototype.autoGridLines=function(t,e,n){var i,r,o,s,a,l,u,h,c;return a=e-t,c=Math.floor(Math.log(a)/Math.log(10)),u=Math.pow(10,c),r=Math.floor(t/u)*u,i=Math.ceil(e/u)*u,l=(i-r)/(n-1),1===u&&l>1&&Math.ceil(l)!==l&&(l=Math.ceil(l),i=r+l*(n-1)),r<0&&i>0&&(r=Math.floor(t/l)*l,i=Math.ceil(e/l)*l),l<1?(s=Math.floor(Math.log(l)/Math.log(10)),o=function(){var t,e;for(e=[],h=t=r;l>0?t<=i:t>=i;h=t+=l)e.push(parseFloat(h.toFixed(1-s)));return e}()):o=function(){var t,e;for(e=[],h=t=r;l>0?t<=i:t>=i;h=t+=l)e.push(h);return e}(),o},n.prototype._calc=function(){var t,e,n,i,r,o,s,a;if(r=this.el.width(),n=this.el.height(),(this.elementWidth!==r||this.elementHeight!==n||this.dirty)&&(this.elementWidth=r,this.elementHeight=n,this.dirty=!1,this.left=this.options.padding,this.right=this.elementWidth-this.options.padding,this.top=this.options.padding,this.bottom=this.elementHeight-this.options.padding,!0!==(s=this.options.axes)&&"both"!==s&&"y"!==s||(o=function(){var t,n,i,r;for(r=[],t=0,n=(i=this.grid).length;t<n;t++)e=i[t],r.push(this.measureText(this.yAxisFormat(e)).width);return r}.call(this),this.left+=Math.max.apply(Math,o)),!0!==(a=this.options.axes)&&"both"!==a&&"x"!==a||(t=function(){var t,e,n;for(n=[],i=t=0,e=this.data.length;0<=e?t<e:t>e;i=0<=e?++t:--t)n.push(this.measureText(this.data[i].text,-this.options.xLabelAngle).height);return n}.call(this),this.bottom-=Math.max.apply(Math,t)),this.width=Math.max(1,this.right-this.left),this.height=Math.max(1,this.bottom-this.top),this.dx=this.width/(this.xmax-this.xmin),this.dy=this.height/(this.ymax-this.ymin),this.calc))return this.calc()},n.prototype.transY=function(t){return this.bottom-(t-this.ymin)*this.dy},n.prototype.transX=function(t){return 1===this.data.length?(this.left+this.right)/2:this.left+(t-this.xmin)*this.dx},n.prototype.redraw=function(){if(this.raphael.clear(),this._calc(),this.drawGrid(),this.drawGoals(),this.drawEvents(),this.draw)return this.draw()},n.prototype.measureText=function(t,e){var n,i;return null==e&&(e=0),i=this.raphael.text(100,100,t).attr("font-size",this.options.gridTextSize).attr("font-family",this.options.gridTextFamily).attr("font-weight",this.options.gridTextWeight).rotate(e),n=i.getBBox(),i.remove(),n},n.prototype.yAxisFormat=function(t){return this.yLabelFormat(t)},n.prototype.yLabelFormat=function(e){return"function"==typeof this.options.yLabelFormat?this.options.yLabelFormat(e):""+this.options.preUnits+t.commas(e)+this.options.postUnits},n.prototype.drawGrid=function(){var t,e,n,i,r,o,s,a;if(!1!==this.options.grid||!0===(r=this.options.axes)||"both"===r||"y"===r){for(a=[],n=0,i=(o=this.grid).length;n<i;n++)t=o[n],e=this.transY(t),!0!==(s=this.options.axes)&&"both"!==s&&"y"!==s||this.drawYAxisLabel(this.left-this.options.padding/2,e,this.yAxisFormat(t)),this.options.grid?a.push(this.drawGridLine("M"+this.left+","+e+"H"+(this.left+this.width))):a.push(void 0);return a}},n.prototype.drawGoals=function(){var t,e,n,i,r,o,s;for(s=[],n=i=0,r=(o=this.options.goals).length;i<r;n=++i)e=o[n],t=this.options.goalLineColors[n%this.options.goalLineColors.length],s.push(this.drawGoal(e,t));return s},n.prototype.drawEvents=function(){var t,e,n,i,r,o,s;for(s=[],n=i=0,r=(o=this.events).length;i<r;n=++i)e=o[n],t=this.options.eventLineColors[n%this.options.eventLineColors.length],s.push(this.drawEvent(e,t));return s},n.prototype.drawGoal=function(t,e){return this.raphael.path("M"+this.left+","+this.transY(t)+"H"+this.right).attr("stroke",e).attr("stroke-width",this.options.goalStrokeWidth)},n.prototype.drawEvent=function(t,e){return this.raphael.path("M"+this.transX(t)+","+this.bottom+"V"+this.top).attr("stroke",e).attr("stroke-width",this.options.eventStrokeWidth)},n.prototype.drawYAxisLabel=function(t,e,n){return this.raphael.text(t,e,n).attr("font-size",this.options.gridTextSize).attr("font-family",this.options.gridTextFamily).attr("font-weight",this.options.gridTextWeight).attr("fill",this.options.gridTextColor).attr("text-anchor","end")},n.prototype.drawGridLine=function(t){return this.raphael.path(t).attr("stroke",this.options.gridLineColor).attr("stroke-width",this.options.gridStrokeWidth)},n.prototype.startRange=function(t){return this.hover.hide(),this.selectFrom=t,this.selectionRect.attr({x:t,width:0}).show()},n.prototype.endRange=function(t){var e,n;if(this.selectFrom)return n=Math.min(this.selectFrom,t),e=Math.max(this.selectFrom,t),this.options.rangeSelect.call(this.el,{start:this.data[this.hitTest(n)].x,end:this.data[this.hitTest(e)].x}),this.selectFrom=null},n.prototype.resizeHandler=function(){return this.timeoutId=null,this.raphael.setSize(this.el.width(),this.el.height()),this.redraw()},n}(t.EventEmitter),t.parseDate=function(t){var e,n,i,r,o,s,a,l,u,h,c;return"number"==typeof t?t:(n=t.match(/^(\d+) Q(\d)$/),r=t.match(/^(\d+)-(\d+)$/),o=t.match(/^(\d+)-(\d+)-(\d+)$/),a=t.match(/^(\d+) W(\d+)$/),l=t.match(/^(\d+)-(\d+)-(\d+)[ T](\d+):(\d+)(Z|([+-])(\d\d):?(\d\d))?$/),u=t.match(/^(\d+)-(\d+)-(\d+)[ T](\d+):(\d+):(\d+(\.\d+)?)(Z|([+-])(\d\d):?(\d\d))?$/),n?new Date(parseInt(n[1],10),3*parseInt(n[2],10)-1,1).getTime():r?new Date(parseInt(r[1],10),parseInt(r[2],10)-1,1).getTime():o?new Date(parseInt(o[1],10),parseInt(o[2],10)-1,parseInt(o[3],10)).getTime():a?(4!==(h=new Date(parseInt(a[1],10),0,1)).getDay()&&h.setMonth(0,1+(4-h.getDay()+7)%7),h.getTime()+6048e5*parseInt(a[2],10)):l?l[6]?(s=0,"Z"!==l[6]&&(s=60*parseInt(l[8],10)+parseInt(l[9],10),"+"===l[7]&&(s=0-s)),Date.UTC(parseInt(l[1],10),parseInt(l[2],10)-1,parseInt(l[3],10),parseInt(l[4],10),parseInt(l[5],10)+s)):new Date(parseInt(l[1],10),parseInt(l[2],10)-1,parseInt(l[3],10),parseInt(l[4],10),parseInt(l[5],10)).getTime():u?(c=parseFloat(u[6]),e=Math.floor(c),i=Math.round(1e3*(c-e)),u[8]?(s=0,"Z"!==u[8]&&(s=60*parseInt(u[10],10)+parseInt(u[11],10),"+"===u[9]&&(s=0-s)),Date.UTC(parseInt(u[1],10),parseInt(u[2],10)-1,parseInt(u[3],10),parseInt(u[4],10),parseInt(u[5],10)+s,e,i)):new Date(parseInt(u[1],10),parseInt(u[2],10)-1,parseInt(u[3],10),parseInt(u[4],10),parseInt(u[5],10),e,i).getTime()):new Date(parseInt(t,10),0,1).getTime())},t.Hover=function(){function e(e){null==e&&(e={}),this.options=r.default.extend({},t.Hover.defaults,e),this.el=(0,r.default)("<div class='"+this.options.class+"'></div>"),this.el.hide(),this.options.parent.append(this.el)}return e.defaults={class:"morris-hover morris-default-style"},e.prototype.update=function(t,e,n){return t?(this.html(t),this.show(),this.moveTo(e,n)):this.hide()},e.prototype.html=function(t){return this.el.html(t)},e.prototype.moveTo=function(t,e){var n,i,r,o,s,a;return s=this.options.parent.innerWidth(),o=this.options.parent.innerHeight(),i=this.el.outerWidth(),n=this.el.outerHeight(),r=Math.min(Math.max(0,t-i/2),s-i),null!=e?(a=e-n-10)<0&&(a=e+10)+n>o&&(a=o/2-n/2):a=o/2-n/2,this.el.css({left:r+"px",top:parseInt(a)+"px"})},e.prototype.show=function(){return this.el.show()},e.prototype.hide=function(){return this.el.hide()},e}(),t.Line=function(e){function n(e){if(this.hilight=s(this.hilight,this),this.onHoverOut=s(this.onHoverOut,this),this.onHoverMove=s(this.onHoverMove,this),this.onGridClick=s(this.onGridClick,this),!(this instanceof t.Line))return new t.Line(e);n.__super__.constructor.call(this,e)}return l(n,e),n.prototype.init=function(){if("always"!==this.options.hideHover)return this.hover=new t.Hover({parent:this.el}),this.on("hovermove",this.onHoverMove),this.on("hoverout",this.onHoverOut),this.on("gridclick",this.onGridClick)},n.prototype.defaults={lineWidth:3,pointSize:4,lineColors:["#0b62a4","#7A92A3","#4da74d","#afd8f8","#edc240","#cb4b4b","#9440ed"],pointStrokeWidths:[1],pointStrokeColors:["#ffffff"],pointFillColors:[],smooth:!0,xLabels:"auto",xLabelFormat:null,xLabelMargin:24,hideHover:!1},n.prototype.calc=function(){return this.calcPoints(),this.generatePaths()},n.prototype.calcPoints=function(){var t,e,n,i,r,o;for(o=[],n=0,i=(r=this.data).length;n<i;n++)(t=r[n])._x=this.transX(t.x),t._y=function(){var n,i,r,o;for(o=[],n=0,i=(r=t.y).length;n<i;n++)null!=(e=r[n])?o.push(this.transY(e)):o.push(e);return o}.call(this),o.push(t._ymax=Math.min.apply(Math,[this.bottom].concat(function(){var n,i,r,o;for(o=[],n=0,i=(r=t._y).length;n<i;n++)null!=(e=r[n])&&o.push(e);return o}())));return o},n.prototype.hitTest=function(t){var e,n,i,r,o;if(0===this.data.length)return null;for(e=i=0,r=(o=this.data.slice(1)).length;i<r&&(n=o[e],!(t<(n._x+this.data[e]._x)/2));e=++i);return e},n.prototype.onGridClick=function(t,e){var n;return n=this.hitTest(t),this.fire("click",n,this.data[n].src,t,e)},n.prototype.onHoverMove=function(t,e){var n;return n=this.hitTest(t),this.displayHoverForRow(n)},n.prototype.onHoverOut=function(){if(!1!==this.options.hideHover)return this.displayHoverForRow(null)},n.prototype.displayHoverForRow=function(t){var e;return null!=t?((e=this.hover).update.apply(e,this.hoverContentForRow(t)),this.hilight(t)):(this.hover.hide(),this.hilight())},n.prototype.hoverContentForRow=function(t){var e,n,i,r,o,s,a;for(e="<div class='morris-hover-row-label'>"+(i=this.data[t]).label+"</div>",n=o=0,s=(a=i.y).length;o<s;n=++o)r=a[n],e+="<div class='morris-hover-point' style='color: "+this.colorFor(i,n,"label")+"'>\n  "+this.options.labels[n]+":\n  "+this.yLabelFormat(r)+"\n</div>";return"function"==typeof this.options.hoverCallback&&(e=this.options.hoverCallback(t,this.options,e,i.src)),[e,i._x,i._ymax]},n.prototype.generatePaths=function(){var e,n,i,r;return this.paths=function(){var o,s,a,l;for(l=[],n=o=0,s=this.options.ykeys.length;0<=s?o<s:o>s;n=0<=s?++o:--o)r="boolean"==typeof this.options.smooth?this.options.smooth:(a=this.options.ykeys[n],u.call(this.options.smooth,a)>=0),(e=function(){var t,e,r,o;for(o=[],t=0,e=(r=this.data).length;t<e;t++)void 0!==(i=r[t])._y[n]&&o.push({x:i._x,y:i._y[n]});return o}.call(this)).length>1?l.push(t.Line.createPath(e,r,this.bottom)):l.push(null);return l}.call(this)},n.prototype.draw=function(){var t;if(!0!==(t=this.options.axes)&&"both"!==t&&"x"!==t||this.drawXAxis(),this.drawSeries(),!1===this.options.hideHover)return this.displayHoverForRow(this.data.length-1)},n.prototype.drawXAxis=function(){var e,n,i,r,o,s,a,l,u,h,c=this;for(a=this.bottom+this.options.padding/2,o=null,r=null,e=function(t,e){var n,i,s,l,u;return n=c.drawXAxisLabel(c.transX(e),a,t),u=n.getBBox(),n.transform("r"+-c.options.xLabelAngle),i=n.getBBox(),n.transform("t0,"+i.height/2+"..."),0!==c.options.xLabelAngle&&(l=-.5*u.width*Math.cos(c.options.xLabelAngle*Math.PI/180),n.transform("t"+l+",0...")),i=n.getBBox(),(null==o||o>=i.x+i.width||null!=r&&r>=i.x)&&i.x>=0&&i.x+i.width<c.el.width()?(0!==c.options.xLabelAngle&&(s=1.25*c.options.gridTextSize/Math.sin(c.options.xLabelAngle*Math.PI/180),r=i.x-s),o=i.x-c.options.xLabelMargin):n.remove()},(i=this.options.parseTime?1===this.data.length&&"auto"===this.options.xLabels?[[this.data[0].label,this.data[0].x]]:t.labelSeries(this.xmin,this.xmax,this.width,this.options.xLabels,this.options.xLabelFormat):function(){var t,e,n,i;for(i=[],t=0,e=(n=this.data).length;t<e;t++)s=n[t],i.push([s.label,s.x]);return i}.call(this)).reverse(),h=[],l=0,u=i.length;l<u;l++)n=i[l],h.push(e(n[0],n[1]));return h},n.prototype.drawSeries=function(){var t,e,n,i,r,o;for(this.seriesPoints=[],t=e=i=this.options.ykeys.length-1;i<=0?e<=0:e>=0;t=i<=0?++e:--e)this._drawLineFor(t);for(o=[],t=n=r=this.options.ykeys.length-1;r<=0?n<=0:n>=0;t=r<=0?++n:--n)o.push(this._drawPointFor(t));return o},n.prototype._drawPointFor=function(t){var e,n,i,r,o,s;for(this.seriesPoints[t]=[],s=[],i=0,r=(o=this.data).length;i<r;i++)e=null,null!=(n=o[i])._y[t]&&(e=this.drawLinePoint(n._x,n._y[t],this.colorFor(n,t,"point"),t)),s.push(this.seriesPoints[t].push(e));return s},n.prototype._drawLineFor=function(t){var e;if(null!==(e=this.paths[t]))return this.drawLinePath(e,this.colorFor(null,t,"line"),t)},n.createPath=function(e,n,i){var r,o,s,a,l,u,h,c,f,p;for(h="",n&&(s=t.Line.gradients(e)),c={y:null},a=f=0,p=e.length;f<p;a=++f)null!=(r=e[a]).y&&(null!=c.y?n?(o=s[a],u=s[a-1],l=(r.x-c.x)/4,h+="C"+(c.x+l)+","+Math.min(i,c.y+l*u)+","+(r.x-l)+","+Math.min(i,r.y-l*o)+","+r.x+","+r.y):h+="L"+r.x+","+r.y:n&&null==s[a]||(h+="M"+r.x+","+r.y)),c=r;return h},n.gradients=function(t){var e,n,i,r,o,s,a,l;for(n=function(t,e){return(t.y-e.y)/(t.x-e.x)},l=[],i=s=0,a=t.length;s<a;i=++s)null!=(e=t[i]).y?(r=t[i+1]||{y:null},null!=(o=t[i-1]||{y:null}).y&&null!=r.y?l.push(n(o,r)):null!=o.y?l.push(n(o,e)):null!=r.y?l.push(n(e,r)):l.push(null)):l.push(null);return l},n.prototype.hilight=function(t){var e,n,i,r,o;if(null!==this.prevHilight&&this.prevHilight!==t)for(e=n=0,r=this.seriesPoints.length-1;0<=r?n<=r:n>=r;e=0<=r?++n:--n)this.seriesPoints[e][this.prevHilight]&&this.seriesPoints[e][this.prevHilight].animate(this.pointShrinkSeries(e));if(null!==t&&this.prevHilight!==t)for(e=i=0,o=this.seriesPoints.length-1;0<=o?i<=o:i>=o;e=0<=o?++i:--i)this.seriesPoints[e][t]&&this.seriesPoints[e][t].animate(this.pointGrowSeries(e));return this.prevHilight=t},n.prototype.colorFor=function(t,e,n){return"function"==typeof this.options.lineColors?this.options.lineColors.call(this,t,e,n):"point"===n?this.options.pointFillColors[e%this.options.pointFillColors.length]||this.options.lineColors[e%this.options.lineColors.length]:this.options.lineColors[e%this.options.lineColors.length]},n.prototype.drawXAxisLabel=function(t,e,n){return this.raphael.text(t,e,n).attr("font-size",this.options.gridTextSize).attr("font-family",this.options.gridTextFamily).attr("font-weight",this.options.gridTextWeight).attr("fill",this.options.gridTextColor)},n.prototype.drawLinePath=function(t,e,n){return this.raphael.path(t).attr("stroke",e).attr("stroke-width",this.lineWidthForSeries(n))},n.prototype.drawLinePoint=function(t,e,n,i){return this.raphael.circle(t,e,this.pointSizeForSeries(i)).attr("fill",n).attr("stroke-width",this.pointStrokeWidthForSeries(i)).attr("stroke",this.pointStrokeColorForSeries(i))},n.prototype.pointStrokeWidthForSeries=function(t){return this.options.pointStrokeWidths[t%this.options.pointStrokeWidths.length]},n.prototype.pointStrokeColorForSeries=function(t){return this.options.pointStrokeColors[t%this.options.pointStrokeColors.length]},n.prototype.lineWidthForSeries=function(t){return this.options.lineWidth instanceof Array?this.options.lineWidth[t%this.options.lineWidth.length]:this.options.lineWidth},n.prototype.pointSizeForSeries=function(t){return this.options.pointSize instanceof Array?this.options.pointSize[t%this.options.pointSize.length]:this.options.pointSize},n.prototype.pointGrowSeries=function(t){return o.default.animation({r:this.pointSizeForSeries(t)+3},25,"linear")},n.prototype.pointShrinkSeries=function(t){return o.default.animation({r:this.pointSizeForSeries(t)},25,"linear")},n}(t.Grid),t.labelSeries=function(e,n,i,o,s){var a,l,u,h,c,f,p,d,g,v,y;if(u=200*(n-e)/i,l=new Date(e),void 0===(p=t.LABEL_SPECS[o]))for(g=0,v=(y=t.AUTO_LABEL_ORDER).length;g<v;g++)if(h=y[g],f=t.LABEL_SPECS[h],u>=f.span){p=f;break}for(void 0===p&&(p=t.LABEL_SPECS.second),s&&(p=r.default.extend({},p,{fmt:s})),a=p.start(l),c=[];(d=a.getTime())<=n;)d>=e&&c.push([p.fmt(a),d]),p.incr(a);return c},e=function(e){return{span:60*e*1e3,start:function(t){return new Date(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours())},fmt:function(e){return t.pad2(e.getHours())+":"+t.pad2(e.getMinutes())},incr:function(t){return t.setUTCMinutes(t.getUTCMinutes()+e)}}},n=function(e){return{span:1e3*e,start:function(t){return new Date(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes())},fmt:function(e){return t.pad2(e.getHours())+":"+t.pad2(e.getMinutes())+":"+t.pad2(e.getSeconds())},incr:function(t){return t.setUTCSeconds(t.getUTCSeconds()+e)}}},t.LABEL_SPECS={decade:{span:1728e8,start:function(t){return new Date(t.getFullYear()-t.getFullYear()%10,0,1)},fmt:function(t){return""+t.getFullYear()},incr:function(t){return t.setFullYear(t.getFullYear()+10)}},year:{span:1728e7,start:function(t){return new Date(t.getFullYear(),0,1)},fmt:function(t){return""+t.getFullYear()},incr:function(t){return t.setFullYear(t.getFullYear()+1)}},month:{span:24192e5,start:function(t){return new Date(t.getFullYear(),t.getMonth(),1)},fmt:function(e){return e.getFullYear()+"-"+t.pad2(e.getMonth()+1)},incr:function(t){return t.setMonth(t.getMonth()+1)}},week:{span:6048e5,start:function(t){return new Date(t.getFullYear(),t.getMonth(),t.getDate())},fmt:function(e){return e.getFullYear()+"-"+t.pad2(e.getMonth()+1)+"-"+t.pad2(e.getDate())},incr:function(t){return t.setDate(t.getDate()+7)}},day:{span:864e5,start:function(t){return new Date(t.getFullYear(),t.getMonth(),t.getDate())},fmt:function(e){return e.getFullYear()+"-"+t.pad2(e.getMonth()+1)+"-"+t.pad2(e.getDate())},incr:function(t){return t.setDate(t.getDate()+1)}},hour:e(60),"30min":e(30),"15min":e(15),"10min":e(10),"5min":e(5),minute:e(1),"30sec":n(30),"15sec":n(15),"10sec":n(10),"5sec":n(5),second:n(1)},t.AUTO_LABEL_ORDER=["decade","year","month","week","day","hour","30min","15min","10min","5min","minute","30sec","15sec","10sec","5sec","second"],t.Area=function(e){function n(e){var o;if(!(this instanceof t.Area))return new t.Area(e);o=r.default.extend({},i,e),this.cumulative=!o.behaveLikeLine,"auto"===o.fillOpacity&&(o.fillOpacity=o.behaveLikeLine?.8:1),n.__super__.constructor.call(this,o)}var i;return l(n,e),i={fillOpacity:"auto",behaveLikeLine:!1},n.prototype.calcPoints=function(){var t,e,n,i,r,o,s;for(s=[],i=0,r=(o=this.data).length;i<r;i++)(t=o[i])._x=this.transX(t.x),e=0,t._y=function(){var i,r,o,s;for(s=[],i=0,r=(o=t.y).length;i<r;i++)n=o[i],this.options.behaveLikeLine?s.push(this.transY(n)):(e+=n||0,s.push(this.transY(e)));return s}.call(this),s.push(t._ymax=Math.max.apply(Math,t._y));return s},n.prototype.drawSeries=function(){var t,e,n,i,r,o,s,a;for(this.seriesPoints=[],a=[],n=0,i=(e=this.options.behaveLikeLine?function(){o=[];for(var t=0,e=this.options.ykeys.length-1;0<=e?t<=e:t>=e;0<=e?t++:t--)o.push(t);return o}.apply(this):function(){s=[];for(var t=r=this.options.ykeys.length-1;r<=0?t<=0:t>=0;r<=0?t++:t--)s.push(t);return s}.apply(this)).length;n<i;n++)t=e[n],this._drawFillFor(t),this._drawLineFor(t),a.push(this._drawPointFor(t));return a},n.prototype._drawFillFor=function(t){var e;if(null!==(e=this.paths[t]))return e=e+"L"+this.transX(this.xmax)+","+this.bottom+"L"+this.transX(this.xmin)+","+this.bottom+"Z",this.drawFilledPath(e,this.fillForSeries(t))},n.prototype.fillForSeries=function(t){var e;return e=o.default.rgb2hsl(this.colorFor(this.data[t],t,"line")),o.default.hsl(e.h,this.options.behaveLikeLine?.9*e.s:.75*e.s,Math.min(.98,this.options.behaveLikeLine?1.2*e.l:1.25*e.l))},n.prototype.drawFilledPath=function(t,e){return this.raphael.path(t).attr("fill",e).attr("fill-opacity",this.options.fillOpacity).attr("stroke","none")},n}(t.Line),t.Bar=function(e){function n(e){if(this.onHoverOut=s(this.onHoverOut,this),this.onHoverMove=s(this.onHoverMove,this),this.onGridClick=s(this.onGridClick,this),!(this instanceof t.Bar))return new t.Bar(e);n.__super__.constructor.call(this,r.default.extend({},e,{parseTime:!1}))}return l(n,e),n.prototype.init=function(){if(this.cumulative=this.options.stacked,"always"!==this.options.hideHover)return this.hover=new t.Hover({parent:this.el}),this.on("hovermove",this.onHoverMove),this.on("hoverout",this.onHoverOut),this.on("gridclick",this.onGridClick)},n.prototype.defaults={barSizeRatio:.75,barGap:3,barColors:["#0b62a4","#7a92a3","#4da74d","#afd8f8","#edc240","#cb4b4b","#9440ed"],barOpacity:1,barRadius:[0,0,0,0],xLabelMargin:50},n.prototype.calc=function(){var t;if(this.calcBars(),!1===this.options.hideHover)return(t=this.hover).update.apply(t,this.hoverContentForRow(this.data.length-1))},n.prototype.calcBars=function(){var t,e,n,i,r,o,s;for(s=[],t=i=0,r=(o=this.data).length;i<r;t=++i)(e=o[t])._x=this.left+this.width*(t+.5)/this.data.length,s.push(e._y=function(){var t,i,r,o;for(o=[],t=0,i=(r=e.y).length;t<i;t++)null!=(n=r[t])?o.push(this.transY(n)):o.push(null);return o}.call(this));return s},n.prototype.draw=function(){var t;return!0!==(t=this.options.axes)&&"both"!==t&&"x"!==t||this.drawXAxis(),this.drawSeries()},n.prototype.drawXAxis=function(){var t,e,n,i,r,o,s,a,l,u,h,c,f;for(u=this.bottom+(this.options.xAxisLabelTopPadding||this.options.padding/2),s=null,o=null,f=[],t=h=0,c=this.data.length;0<=c?h<c:h>c;t=0<=c?++h:--h)a=this.data[this.data.length-1-t],l=(e=this.drawXAxisLabel(a._x,u,a.label)).getBBox(),e.transform("r"+-this.options.xLabelAngle),n=e.getBBox(),e.transform("t0,"+n.height/2+"..."),0!==this.options.xLabelAngle&&(r=-.5*l.width*Math.cos(this.options.xLabelAngle*Math.PI/180),e.transform("t"+r+",0...")),(null==s||s>=n.x+n.width||null!=o&&o>=n.x)&&n.x>=0&&n.x+n.width<this.el.width()?(0!==this.options.xLabelAngle&&(i=1.25*this.options.gridTextSize/Math.sin(this.options.xLabelAngle*Math.PI/180),o=n.x-i),f.push(s=n.x-this.options.xLabelMargin)):f.push(e.remove());return f},n.prototype.drawSeries=function(){var t,e,n,i,r,o,s,a,l,u,h,c,f,p,d;return n=this.width/this.options.data.length,a=this.options.stacked?1:this.options.ykeys.length,t=(n*this.options.barSizeRatio-this.options.barGap*(a-1))/a,this.options.barSize&&(t=Math.min(t,this.options.barSize)),c=n-t*a-this.options.barGap*(a-1),s=c/2,d=this.ymin<=0&&this.ymax>=0?this.transY(0):null,this.bars=function(){var a,c,g,v;for(g=this.data,v=[],i=a=0,c=g.length;a<c;i=++a)l=g[i],r=0,v.push(function(){var a,c,g,v;for(g=l._y,v=[],u=a=0,c=g.length;a<c;u=++a)null!==(p=g[u])?(d?(f=Math.min(p,d),e=Math.max(p,d)):(f=p,e=this.bottom),o=this.left+i*n+s,this.options.stacked||(o+=u*(t+this.options.barGap)),h=e-f,this.options.verticalGridCondition&&this.options.verticalGridCondition(l.x)&&this.drawBar(this.left+i*n,this.top,n,Math.abs(this.top-this.bottom),this.options.verticalGridColor,this.options.verticalGridOpacity,this.options.barRadius),this.options.stacked&&(f-=r),this.drawBar(o,f,t,h,this.colorFor(l,u,"bar"),this.options.barOpacity,this.options.barRadius),v.push(r+=h)):v.push(null);return v}.call(this));return v}.call(this)},n.prototype.colorFor=function(t,e,n){var i,r;return"function"==typeof this.options.barColors?(i={x:t.x,y:t.y[e],label:t.label},r={index:e,key:this.options.ykeys[e],label:this.options.labels[e]},this.options.barColors.call(this,i,r,n)):this.options.barColors[e%this.options.barColors.length]},n.prototype.hitTest=function(t){return 0===this.data.length?null:(t=Math.max(Math.min(t,this.right),this.left),Math.min(this.data.length-1,Math.floor((t-this.left)/(this.width/this.data.length))))},n.prototype.onGridClick=function(t,e){var n;return n=this.hitTest(t),this.fire("click",n,this.data[n].src,t,e)},n.prototype.onHoverMove=function(t,e){var n,i;return n=this.hitTest(t),(i=this.hover).update.apply(i,this.hoverContentForRow(n))},n.prototype.onHoverOut=function(){if(!1!==this.options.hideHover)return this.hover.hide()},n.prototype.hoverContentForRow=function(t){var e,n,i,r,o,s,a,l;for(e="<div class='morris-hover-row-label'>"+(i=this.data[t]).label+"</div>",n=s=0,a=(l=i.y).length;s<a;n=++s)o=l[n],e+="<div class='morris-hover-point' style='color: "+this.colorFor(i,n,"label")+"'>\n  "+this.options.labels[n]+":\n  "+this.yLabelFormat(o)+"\n</div>";return"function"==typeof this.options.hoverCallback&&(e=this.options.hoverCallback(t,this.options,e,i.src)),r=this.left+(t+.5)*this.width/this.data.length,[e,r]},n.prototype.drawXAxisLabel=function(t,e,n){return this.raphael.text(t,e,n).attr("font-size",this.options.gridTextSize).attr("font-family",this.options.gridTextFamily).attr("font-weight",this.options.gridTextWeight).attr("fill",this.options.gridTextColor)},n.prototype.drawBar=function(t,e,n,i,r,o,s){var a;return a=Math.max.apply(Math,s),(0===a||a>i?this.raphael.rect(t,e,n,i):this.raphael.path(this.roundedRect(t,e,n,i,s))).attr("fill",r).attr("fill-opacity",o).attr("stroke","none")},n.prototype.roundedRect=function(t,e,n,i,r){return null==r&&(r=[0,0,0,0]),["M",t,r[0]+e,"Q",t,e,t+r[0],e,"L",t+n-r[1],e,"Q",t+n,e,t+n,e+r[1],"L",t+n,e+i-r[2],"Q",t+n,e+i,t+n-r[2],e+i,"L",t+r[3],e+i,"Q",t,e+i,t,e+i-r[3],"Z"]},n}(t.Grid),t.Donut=function(e){function n(e){this.resizeHandler=s(this.resizeHandler,this),this.select=s(this.select,this),this.click=s(this.click,this);var n=this;if(!(this instanceof t.Donut))return new t.Donut(e);if(this.options=r.default.extend({},this.defaults,e),"string"==typeof e.element?this.el=(0,r.default)(document.getElementById(e.element)):this.el=(0,r.default)(e.element),null===this.el||0===this.el.length)throw new Error("Graph placeholder not found.");void 0!==e.data&&0!==e.data.length&&(this.raphael=new o.default(this.el[0]),this.options.resize&&(0,r.default)(window).bind("resize",function(t){return null!=n.timeoutId&&window.clearTimeout(n.timeoutId),n.timeoutId=window.setTimeout(n.resizeHandler,100)}),this.setData(e.data))}return l(n,e),n.prototype.defaults={colors:["#0B62A4","#3980B5","#679DC6","#95BBD7","#B0CCE1","#095791","#095085","#083E67","#052C48","#042135"],backgroundColor:"#FFFFFF",labelColor:"#000000",formatter:t.commas,resize:!1},n.prototype.redraw=function(){var e,n,i,r,o,s,a,l,u,h,c,f,p,d,g,v,y,m,x,b,w,_;for(this.raphael.clear(),n=this.el.width()/2,i=this.el.height()/2,f=(Math.min(n,i)-10)/3,c=0,p=0,v=(x=this.values).length;p<v;p++)c+=x[p];for(l=5/(2*f),e=1.9999*Math.PI-l*this.data.length,s=0,o=0,this.segments=[],r=d=0,y=(b=this.values).length;d<y;r=++d)u=s+l+e*(b[r]/c),(h=new t.DonutSegment(n,i,2*f,f,s,u,this.data[r].color||this.options.colors[o%this.options.colors.length],this.options.backgroundColor,o,this.raphael)).render(),this.segments.push(h),h.on("hover",this.select),h.on("click",this.click),s=u,o+=1;for(this.text1=this.drawEmptyDonutLabel(n,i-10,this.options.labelColor,15,800),this.text2=this.drawEmptyDonutLabel(n,i+10,this.options.labelColor,14),a=Math.max.apply(Math,this.values),o=0,_=[],g=0,m=(w=this.values).length;g<m;g++){if(w[g]===a){this.select(o);break}_.push(o+=1)}return _},n.prototype.setData=function(t){var e;return this.data=t,this.values=function(){var t,n,i,r;for(r=[],t=0,n=(i=this.data).length;t<n;t++)e=i[t],r.push(parseFloat(e.value));return r}.call(this),this.redraw()},n.prototype.click=function(t){return this.fire("click",t,this.data[t])},n.prototype.select=function(t){var e,n,i,r;for(n=0,i=(r=this.segments).length;n<i;n++)r[n].deselect();return this.segments[t].select(),e=this.data[t],this.setLabels(e.label,this.options.formatter(e.value,e))},n.prototype.setLabels=function(t,e){var n,i,r,o,s,a,l,u;return n=2*(Math.min(this.el.width()/2,this.el.height()/2)-10)/3,o=1.8*n,r=n/2,i=n/3,this.text1.attr({text:t,transform:""}),s=this.text1.getBBox(),a=Math.min(o/s.width,r/s.height),this.text1.attr({transform:"S"+a+","+a+","+(s.x+s.width/2)+","+(s.y+s.height)}),this.text2.attr({text:e,transform:""}),l=this.text2.getBBox(),u=Math.min(o/l.width,i/l.height),this.text2.attr({transform:"S"+u+","+u+","+(l.x+l.width/2)+","+l.y})},n.prototype.drawEmptyDonutLabel=function(t,e,n,i,r){var o;return o=this.raphael.text(t,e,"").attr("font-size",i).attr("fill",n),null!=r&&o.attr("font-weight",r),o},n.prototype.resizeHandler=function(){return this.timeoutId=null,this.raphael.setSize(this.el.width(),this.el.height()),this.redraw()},n}(t.EventEmitter),t.DonutSegment=function(t){function e(t,e,n,i,r,o,a,l,u,h){this.cx=t,this.cy=e,this.inner=n,this.outer=i,this.color=a,this.backgroundColor=l,this.index=u,this.raphael=h,this.deselect=s(this.deselect,this),this.select=s(this.select,this),this.sin_p0=Math.sin(r),this.cos_p0=Math.cos(r),this.sin_p1=Math.sin(o),this.cos_p1=Math.cos(o),this.is_long=o-r>Math.PI?1:0,this.path=this.calcSegment(this.inner+3,this.inner+this.outer-5),this.selectedPath=this.calcSegment(this.inner+3,this.inner+this.outer),this.hilight=this.calcArc(this.inner)}return l(e,t),e.prototype.calcArcPoints=function(t){return[this.cx+t*this.sin_p0,this.cy+t*this.cos_p0,this.cx+t*this.sin_p1,this.cy+t*this.cos_p1]},e.prototype.calcSegment=function(t,e){var n,i,r,o,s,a,l,u,h,c;return h=this.calcArcPoints(t),n=h[0],r=h[1],i=h[2],o=h[3],c=this.calcArcPoints(e),s=c[0],l=c[1],a=c[2],u=c[3],"M"+n+","+r+"A"+t+","+t+",0,"+this.is_long+",0,"+i+","+o+"L"+a+","+u+"A"+e+","+e+",0,"+this.is_long+",1,"+s+","+l+"Z"},e.prototype.calcArc=function(t){var e,n,i,r,o;return o=this.calcArcPoints(t),e=o[0],i=o[1],n=o[2],r=o[3],"M"+e+","+i+"A"+t+","+t+",0,"+this.is_long+",0,"+n+","+r},e.prototype.render=function(){var t=this;return this.arc=this.drawDonutArc(this.hilight,this.color),this.seg=this.drawDonutSegment(this.path,this.color,this.backgroundColor,function(){return t.fire("hover",t.index)},function(){return t.fire("click",t.index)})},e.prototype.drawDonutArc=function(t,e){return this.raphael.path(t).attr({stroke:e,"stroke-width":2,opacity:0})},e.prototype.drawDonutSegment=function(t,e,n,i,r){return this.raphael.path(t).attr({fill:e,stroke:n,"stroke-width":3}).hover(i).click(r)},e.prototype.select=function(){if(!this.selected)return this.seg.animate({path:this.selectedPath},150,"<>"),this.arc.animate({opacity:1},150,"<>"),this.selected=!0},e.prototype.deselect=function(){if(this.selected)return this.seg.animate({path:this.path},150,"<>"),this.arc.animate({opacity:0},150,"<>"),this.selected=!1},e}(t.EventEmitter)}).call(void 0)},158:function(t,e,n){!function(e,n){t.exports=function(){return function(t){function e(i){if(n[i])return n[i].exports;var r=n[i]={exports:{},id:i,loaded:!1};return t[i].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){var i,r;i=[n(1),n(3),n(4)],void 0===(r=function(t){return t}.apply(e,i))||(t.exports=r)},function(t,e,n){var i,r;i=[n(2)],void 0===(r=function(t){function e(n){if(e.is(n,"function"))return y?n():t.on("raphael.DOMload",n);if(e.is(n,z))return e._engine.create[S](e,n.splice(0,3+e.is(n[0],O))).add(n);var i=Array.prototype.slice.call(arguments,0);if(e.is(i[i.length-1],"function")){var r=i.pop();return y?r.call(e._engine.create[S](e,i)):t.on("raphael.DOMload",function(){r.call(e._engine.create[S](e,i))})}return e._engine.create[S](e,arguments)}function n(t){if("function"==typeof t||Object(t)!==t)return t;var e=new t.constructor;for(var i in t)t[_](i)&&(e[i]=n(t[i]));return e}function i(t,e,n){function i(){var r=Array.prototype.slice.call(arguments,0),o=r.join("␀"),s=i.cache=i.cache||{},a=i.count=i.count||[];return s[_](o)?(function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return t.push(t.splice(n,1)[0])}(a,o),n?n(s[o]):s[o]):(a.length>=1e3&&delete s[a.shift()],a.push(o),s[o]=t[S](e,r),n?n(s[o]):s[o])}return i}function r(){return this.hex}function o(t,e){for(var n=[],i=0,r=t.length;r-2*!e>i;i+=2){var o=[{x:+t[i-2],y:+t[i-1]},{x:+t[i],y:+t[i+1]},{x:+t[i+2],y:+t[i+3]},{x:+t[i+4],y:+t[i+5]}];e?i?r-4==i?o[3]={x:+t[0],y:+t[1]}:r-2==i&&(o[2]={x:+t[0],y:+t[1]},o[3]={x:+t[2],y:+t[3]}):o[0]={x:+t[r-2],y:+t[r-1]}:r-4==i?o[3]=o[2]:i||(o[0]={x:+t[i],y:+t[i+1]}),n.push(["C",(-o[0].x+6*o[1].x+o[2].x)/6,(-o[0].y+6*o[1].y+o[2].y)/6,(o[1].x+6*o[2].x-o[3].x)/6,(o[1].y+6*o[2].y-o[3].y)/6,o[2].x,o[2].y])}return n}function s(t,e,n,i,r){return t*(t*(-3*e+9*n-9*i+3*r)+6*e-12*n+6*i)-3*e+3*n}function a(t,e,n,i,r,o,a,l,u){null==u&&(u=1);for(var h=(u=u>1?1:u<0?0:u)/2,c=[-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],f=[.2491,.2491,.2335,.2335,.2032,.2032,.1601,.1601,.1069,.1069,.0472,.0472],p=0,d=0;d<12;d++){var g=h*c[d]+h,v=s(g,t,n,r,a),y=s(g,e,i,o,l),m=v*v+y*y;p+=f[d]*j.sqrt(m)}return h*p}function l(t,e,n,i,r,o,s,a){if(!(P(t,n)<H(r,s)||H(t,n)>P(r,s)||P(e,i)<H(o,a)||H(e,i)>P(o,a))){var l=(t-n)*(o-a)-(e-i)*(r-s);if(l){var u=((t*i-e*n)*(r-s)-(t-n)*(r*a-o*s))/l,h=((t*i-e*n)*(o-a)-(e-i)*(r*a-o*s))/l,c=+u.toFixed(2),f=+h.toFixed(2);if(!(c<+H(t,n).toFixed(2)||c>+P(t,n).toFixed(2)||c<+H(r,s).toFixed(2)||c>+P(r,s).toFixed(2)||f<+H(e,i).toFixed(2)||f>+P(e,i).toFixed(2)||f<+H(o,a).toFixed(2)||f>+P(o,a).toFixed(2)))return{x:u,y:h}}}}function u(t,n,i){var r=e.bezierBBox(t),o=e.bezierBBox(n);if(!e.isBBoxIntersect(r,o))return i?0:[];for(var s=a.apply(0,t),u=a.apply(0,n),h=P(~~(s/5),1),c=P(~~(u/5),1),f=[],p=[],d={},g=i?0:[],v=0;v<h+1;v++){var y=e.findDotsAtSegment.apply(e,t.concat(v/h));f.push({x:y.x,y:y.y,t:v/h})}for(v=0;v<c+1;v++)y=e.findDotsAtSegment.apply(e,n.concat(v/c)),p.push({x:y.x,y:y.y,t:v/c});for(v=0;v<h;v++)for(var m=0;m<c;m++){var x=f[v],b=f[v+1],w=p[m],_=p[m+1],k=I(b.x-x.x)<.001?"y":"x",C=I(_.x-w.x)<.001?"y":"x",T=l(x.x,x.y,b.x,b.y,w.x,w.y,_.x,_.y);if(T){if(d[T.x.toFixed(4)]==T.y.toFixed(4))continue;d[T.x.toFixed(4)]=T.y.toFixed(4);var S=x.t+I((T[k]-x[k])/(b[k]-x[k]))*(b.t-x.t),A=w.t+I((T[C]-w[C])/(_[C]-w[C]))*(_.t-w.t);S>=0&&S<=1.001&&A>=0&&A<=1.001&&(i?g++:g.push({x:T.x,y:T.y,t1:H(S,1),t2:H(A,1)}))}}return g}function h(t,n,i){t=e._path2curve(t),n=e._path2curve(n);for(var r,o,s,a,l,h,c,f,p,d,g=i?0:[],v=0,y=t.length;v<y;v++){var m=t[v];if("M"==m[0])r=l=m[1],o=h=m[2];else{"C"==m[0]?(p=[r,o].concat(m.slice(1)),r=p[6],o=p[7]):(p=[r,o,r,o,l,h,l,h],r=l,o=h);for(var x=0,b=n.length;x<b;x++){var w=n[x];if("M"==w[0])s=c=w[1],a=f=w[2];else{"C"==w[0]?(d=[s,a].concat(w.slice(1)),s=d[6],a=d[7]):(d=[s,a,s,a,c,f,c,f],s=c,a=f);var _=u(p,d,i);if(i)g+=_;else{for(var k=0,C=_.length;k<C;k++)_[k].segment1=v,_[k].segment2=x,_[k].bez1=p,_[k].bez2=d;g=g.concat(_)}}}}}return g}function c(t,e,n,i,r,o){null!=t?(this.a=+t,this.b=+e,this.c=+n,this.d=+i,this.e=+r,this.f=+o):(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0)}function f(){return this.x+E+this.y+E+this.width+" × "+this.height}function p(t,e,n,i,r,o){function s(t){return((u*t+l)*t+a)*t}var a=3*e,l=3*(i-e)-a,u=1-a-l,h=3*n,c=3*(r-n)-h,f=1-h-c;return function(t,e){var n=function(t,e){var n,i,r,o,h,c;for(r=t,c=0;c<8;c++){if(o=s(r)-t,I(o)<e)return r;if(h=(3*u*r+2*l)*r+a,I(h)<1e-6)break;r-=o/h}if(n=0,i=1,(r=t)<n)return n;if(r>i)return i;for(;n<i;){if(o=s(r),I(o-t)<e)return r;t>o?n=r:i=r,r=(i-n)/2+n}return r}(t,e);return((f*n+c)*n+h)*n}(t,1/(200*o))}function d(t,e){var n=[],i={};if(this.ms=e,this.times=1,t){for(var r in t)t[_](r)&&(i[V(r)]=t[r],n.push(V(r)));n.sort(st)}this.anim=i,this.top=n[n.length-1],this.percents=n}function g(n,i,r,o,s,a){r=V(r);var l,u,h,f,d,g,v=n.ms,y={},m={},b={};if(o)for(k=0,C=Jt.length;k<C;k++){var w=Jt[k];if(w.el.id==i.id&&w.anim==n){w.percent!=r?(Jt.splice(k,1),h=1):u=w,i.attr(w.totalOrigin);break}}else o=+m;for(var k=0,C=n.percents.length;k<C;k++){if(n.percents[k]==r||n.percents[k]>o*n.top){r=n.percents[k],d=n.percents[k-1]||0,v=v/n.top*(r-d),f=n.percents[k+1],l=n.anim[r];break}o&&i.attr(n.anim[n.percents[k]])}if(l){if(u)u.initstatus=o,u.start=new Date-u.ms*o;else{for(var T in l)if(l[_](T)&&(J[_](T)||i.paper.customAttributes[_](T)))switch(y[T]=i.attr(T),null==y[T]&&(y[T]=Z[T]),m[T]=l[T],J[T]){case O:b[T]=(m[T]-y[T])/v;break;case"colour":y[T]=e.getRGB(y[T]);var S=e.getRGB(m[T]);b[T]={r:(S.r-y[T].r)/v,g:(S.g-y[T].g)/v,b:(S.b-y[T].b)/v};break;case"path":var L=Mt(y[T],m[T]),E=L[1];for(y[T]=L[0],b[T]=[],k=0,C=y[T].length;k<C;k++){b[T][k]=[0];for(var B=1,D=y[T][k].length;B<D;B++)b[T][k][B]=(E[k][B]-y[T][k][B])/v}break;case"transform":var N=i._,j=jt(N[T],m[T]);if(j)for(y[T]=j.from,m[T]=j.to,b[T]=[],b[T].real=!0,k=0,C=y[T].length;k<C;k++)for(b[T][k]=[y[T][k][0]],B=1,D=y[T][k].length;B<D;B++)b[T][k][B]=(m[T][k][B]-y[T][k][B])/v;else{var P=i.matrix||new c,H={_:{transform:N.transform},getBBox:function(){return i.getBBox(1)}};y[T]=[P.a,P.b,P.c,P.d,P.e,P.f],Dt(H,m[T]),m[T]=H._.transform,b[T]=[(H.matrix.a-P.a)/v,(H.matrix.b-P.b)/v,(H.matrix.c-P.c)/v,(H.matrix.d-P.d)/v,(H.matrix.e-P.e)/v,(H.matrix.f-P.f)/v]}break;case"csv":var I=M(l[T])[F](x),q=M(y[T])[F](x);if("clip-rect"==T)for(y[T]=q,b[T]=[],k=q.length;k--;)b[T][k]=(I[k]-y[T][k])/v;m[T]=I;break;default:for(I=[][A](l[T]),q=[][A](y[T]),b[T]=[],k=i.paper.customAttributes[T].length;k--;)b[T][k]=((I[k]||0)-(q[k]||0))/v}var R=l.easing,z=e.easing_formulas[R];if(!z)if((z=M(R).match(Y))&&5==z.length){var W=z;z=function(t){return p(t,+W[1],+W[2],+W[3],+W[4],v)}}else z=at;if(g=l.start||n.start||+new Date,w={anim:n,percent:r,timestamp:g,start:g+(n.del||0),status:0,initstatus:o||0,stop:!1,ms:v,easing:z,from:y,diff:b,to:m,el:i,callback:l.callback,prev:d,next:f,repeat:a||n.times,origin:i.attr(),totalOrigin:s},Jt.push(w),o&&!u&&!h&&(w.stop=!0,w.start=new Date-v*o,1==Jt.length))return te();h&&(w.start=new Date-w.ms*o),1==Jt.length&&Kt(te)}t("raphael.anim.start."+i.id,i,n)}}function v(t){for(var e=0;e<Jt.length;e++)Jt[e].el.paper==t&&Jt.splice(e--,1)}e.version="2.2.0",e.eve=t;var y,m,x=/[, ]+/,b={circle:1,rect:1,path:1,ellipse:1,text:1,image:1},w=/\{(\d+)\}/g,_="hasOwnProperty",k={doc:document,win:window},C={was:Object.prototype[_].call(k.win,"Raphael"),is:k.win.Raphael},T=function(){this.ca=this.customAttributes={}},S="apply",A="concat",L="ontouchstart"in k.win||k.win.DocumentTouch&&k.doc instanceof DocumentTouch,E=" ",M=String,F="split",B="click dblclick mousedown mousemove mouseout mouseover mouseup touchstart touchmove touchend touchcancel"[F](E),D={mousedown:"touchstart",mousemove:"touchmove",mouseup:"touchend"},N=M.prototype.toLowerCase,j=Math,P=j.max,H=j.min,I=j.abs,q=j.pow,R=j.PI,O="number",z="array",W=Object.prototype.toString,$=(e._ISURL=/^url\(['"]?(.+?)['"]?\)$/i,/^\s*((#[a-f\d]{6})|(#[a-f\d]{3})|rgba?\(\s*([\d\.]+%?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+%?)?)\s*\)|hsba?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?)%?\s*\)|hsla?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?)%?\s*\))\s*$/i),G={NaN:1,Infinity:1,"-Infinity":1},Y=/^(?:cubic-)?bezier\(([^,]+),([^,]+),([^,]+),([^\)]+)\)/,X=j.round,V=parseFloat,U=parseInt,Q=M.prototype.toUpperCase,Z=e._availableAttrs={"arrow-end":"none","arrow-start":"none",blur:0,"clip-rect":"0 0 1e9 1e9",cursor:"default",cx:0,cy:0,fill:"#fff","fill-opacity":1,font:'10px "Arial"',"font-family":'"Arial"',"font-size":"10","font-style":"normal","font-weight":400,gradient:0,height:0,href:"http://raphaeljs.com/","letter-spacing":0,opacity:1,path:"M0,0",r:0,rx:0,ry:0,src:"",stroke:"#000","stroke-dasharray":"","stroke-linecap":"butt","stroke-linejoin":"butt","stroke-miterlimit":0,"stroke-opacity":1,"stroke-width":1,target:"_blank","text-anchor":"middle",title:"Raphael",transform:"",width:0,x:0,y:0,class:""},J=e._availableAnimAttrs={blur:O,"clip-rect":"csv",cx:O,cy:O,fill:"colour","fill-opacity":O,"font-size":O,height:O,opacity:O,path:"path",r:O,rx:O,ry:O,stroke:"colour","stroke-opacity":O,"stroke-width":O,transform:"transform",width:O,x:O,y:O},K=/[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*/,tt={hs:1,rg:1},et=/,?([achlmqrstvxz]),?/gi,nt=/([achlmrqstvz])[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*)+)/gi,it=/([rstm])[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*)+)/gi,rt=/(-?\d*\.?\d*(?:e[\-+]?\d+)?)[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*/gi,ot=(e._radial_gradient=/^r(?:\(([^,]+?)[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*([^\)]+?)\))?/,{}),st=function(t,e){return V(t)-V(e)},at=function(t){return t},lt=e._rectPath=function(t,e,n,i,r){return r?[["M",t+r,e],["l",n-2*r,0],["a",r,r,0,0,1,r,r],["l",0,i-2*r],["a",r,r,0,0,1,-r,r],["l",2*r-n,0],["a",r,r,0,0,1,-r,-r],["l",0,2*r-i],["a",r,r,0,0,1,r,-r],["z"]]:[["M",t,e],["l",n,0],["l",0,i],["l",-n,0],["z"]]},ut=function(t,e,n,i){return null==i&&(i=n),[["M",t,e],["m",0,-i],["a",n,i,0,1,1,0,2*i],["a",n,i,0,1,1,0,-2*i],["z"]]},ht=e._getPath={path:function(t){return t.attr("path")},circle:function(t){var e=t.attrs;return ut(e.cx,e.cy,e.r)},ellipse:function(t){var e=t.attrs;return ut(e.cx,e.cy,e.rx,e.ry)},rect:function(t){var e=t.attrs;return lt(e.x,e.y,e.width,e.height,e.r)},image:function(t){var e=t.attrs;return lt(e.x,e.y,e.width,e.height)},text:function(t){var e=t._getBBox();return lt(e.x,e.y,e.width,e.height)},set:function(t){var e=t._getBBox();return lt(e.x,e.y,e.width,e.height)}},ct=e.mapPath=function(t,e){if(!e)return t;var n,i,r,o,s,a,l;for(r=0,s=(t=Mt(t)).length;r<s;r++)for(l=t[r],o=1,a=l.length;o<a;o+=2)n=e.x(l[o],l[o+1]),i=e.y(l[o],l[o+1]),l[o]=n,l[o+1]=i;return t};if(e._g=k,"VML"==(e.type=k.win.SVGAngle||k.doc.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure","1.1")?"SVG":"VML")){var ft,pt=k.doc.createElement("div");if(pt.innerHTML='<v:shape adj="1"/>',ft=pt.firstChild,ft.style.behavior="url(#default#VML)",!ft||"object"!=typeof ft.adj)return e.type="";pt=null}e.svg=!(e.vml="VML"==e.type),e._Paper=T,e.fn=m=T.prototype=e.prototype,e._id=0,e.is=function(t,e){return"finite"==(e=N.call(e))?!G[_](+t):"array"==e?t instanceof Array:"null"==e&&null===t||e==typeof t&&null!==t||"object"==e&&t===Object(t)||"array"==e&&Array.isArray&&Array.isArray(t)||W.call(t).slice(8,-1).toLowerCase()==e},e.angle=function(t,n,i,r,o,s){if(null==o){var a=t-i,l=n-r;return a||l?(180+180*j.atan2(-l,-a)/R+360)%360:0}return e.angle(t,n,o,s)-e.angle(i,r,o,s)},e.rad=function(t){return t%360*R/180},e.deg=function(t){return Math.round(180*t/R%360*1e3)/1e3},e.snapTo=function(t,n,i){if(i=e.is(i,"finite")?i:10,e.is(t,z)){for(var r=t.length;r--;)if(I(t[r]-n)<=i)return t[r]}else{var o=n%(t=+t);if(o<i)return n-o;if(o>t-i)return n-o+t}return n},e.createUUID=function(t,e){return function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(t,e).toUpperCase()}}(/[xy]/g,function(t){var e=16*j.random()|0;return("x"==t?e:3&e|8).toString(16)}),e.setWindow=function(n){t("raphael.setWindow",e,k.win,n),k.win=n,k.doc=k.win.document,e._engine.initWin&&e._engine.initWin(k.win)};var dt=function(t){if(e.vml){var n,r=/^\s+|\s+$/g;try{var o=new ActiveXObject("htmlfile");o.write("<body>"),o.close(),n=o.body}catch(t){n=createPopup().document.body}var s=n.createTextRange();dt=i(function(t){try{n.style.color=M(t).replace(r,"");var e=s.queryCommandValue("ForeColor");return"#"+("000000"+(e=(255&e)<<16|65280&e|(16711680&e)>>>16).toString(16)).slice(-6)}catch(t){return"none"}})}else{var a=k.doc.createElement("i");a.title="Raphaël Colour Picker",a.style.display="none",k.doc.body.appendChild(a),dt=i(function(t){return a.style.color=t,k.doc.defaultView.getComputedStyle(a,"").getPropertyValue("color")})}return dt(t)},gt=function(){return"hsb("+[this.h,this.s,this.b]+")"},vt=function(){return"hsl("+[this.h,this.s,this.l]+")"},yt=function(){return this.hex},mt=function(t,n,i){if(null==n&&e.is(t,"object")&&"r"in t&&"g"in t&&"b"in t&&(i=t.b,n=t.g,t=t.r),null==n&&e.is(t,"string")){var r=e.getRGB(t);t=r.r,n=r.g,i=r.b}return(t>1||n>1||i>1)&&(t/=255,n/=255,i/=255),[t,n,i]},xt=function(t,n,i,r){var o={r:t*=255,g:n*=255,b:i*=255,hex:e.rgb(t,n,i),toString:yt};return e.is(r,"finite")&&(o.opacity=r),o};e.color=function(t){var n;return e.is(t,"object")&&"h"in t&&"s"in t&&"b"in t?(n=e.hsb2rgb(t),t.r=n.r,t.g=n.g,t.b=n.b,t.hex=n.hex):e.is(t,"object")&&"h"in t&&"s"in t&&"l"in t?(n=e.hsl2rgb(t),t.r=n.r,t.g=n.g,t.b=n.b,t.hex=n.hex):(e.is(t,"string")&&(t=e.getRGB(t)),e.is(t,"object")&&"r"in t&&"g"in t&&"b"in t?(n=e.rgb2hsl(t),t.h=n.h,t.s=n.s,t.l=n.l,n=e.rgb2hsb(t),t.v=n.b):(t={hex:"none"},t.r=t.g=t.b=t.h=t.s=t.v=t.l=-1)),t.toString=yt,t},e.hsb2rgb=function(t,e,n,i){this.is(t,"object")&&"h"in t&&"s"in t&&"b"in t&&(n=t.b,e=t.s,i=t.o,t=t.h);var r,o,s,a,l;return t=(t*=360)%360/60,l=n*e,a=l*(1-I(t%2-1)),r=o=s=n-l,t=~~t,r+=[l,a,0,0,a,l][t],o+=[a,l,l,a,0,0][t],s+=[0,0,a,l,l,a][t],xt(r,o,s,i)},e.hsl2rgb=function(t,e,n,i){this.is(t,"object")&&"h"in t&&"s"in t&&"l"in t&&(n=t.l,e=t.s,t=t.h),(t>1||e>1||n>1)&&(t/=360,e/=100,n/=100);var r,o,s,a,l;return t=(t*=360)%360/60,l=2*e*(n<.5?n:1-n),a=l*(1-I(t%2-1)),r=o=s=n-l/2,t=~~t,r+=[l,a,0,0,a,l][t],o+=[a,l,l,a,0,0][t],s+=[0,0,a,l,l,a][t],xt(r,o,s,i)},e.rgb2hsb=function(t,e,n){t=(n=mt(t,e,n))[0],e=n[1],n=n[2];var i,r,o,s;return o=P(t,e,n),s=o-H(t,e,n),i=0==s?null:o==t?(e-n)/s:o==e?(n-t)/s+2:(t-e)/s+4,i=(i+360)%6*60/360,r=0==s?0:s/o,{h:i,s:r,b:o,toString:gt}},e.rgb2hsl=function(t,e,n){t=(n=mt(t,e,n))[0],e=n[1],n=n[2];var i,r,o,s,a,l;return s=P(t,e,n),a=H(t,e,n),l=s-a,i=0==l?null:s==t?(e-n)/l:s==e?(n-t)/l+2:(t-e)/l+4,i=(i+360)%6*60/360,o=(s+a)/2,r=0==l?0:o<.5?l/(2*o):l/(2-2*o),{h:i,s:r,l:o,toString:vt}},e._path2string=function(){return this.join(",").replace(et,"$1")},e._preload=function(t,e){var n=k.doc.createElement("img");n.style.cssText="position:absolute;left:-9999em;top:-9999em",n.onload=function(){e.call(this),this.onload=null,k.doc.body.removeChild(this)},n.onerror=function(){k.doc.body.removeChild(this)},k.doc.body.appendChild(n),n.src=t},e.getRGB=i(function(t){if(!t||(t=M(t)).indexOf("-")+1)return{r:-1,g:-1,b:-1,hex:"none",error:1,toString:r};if("none"==t)return{r:-1,g:-1,b:-1,hex:"none",toString:r};!tt[_](t.toLowerCase().substring(0,2))&&"#"!=t.charAt()&&(t=dt(t));var n,i,o,s,a,l,u=t.match($);return u?(u[2]&&(o=U(u[2].substring(5),16),i=U(u[2].substring(3,5),16),n=U(u[2].substring(1,3),16)),u[3]&&(o=U((a=u[3].charAt(3))+a,16),i=U((a=u[3].charAt(2))+a,16),n=U((a=u[3].charAt(1))+a,16)),u[4]&&(l=u[4][F](K),n=V(l[0]),"%"==l[0].slice(-1)&&(n*=2.55),i=V(l[1]),"%"==l[1].slice(-1)&&(i*=2.55),o=V(l[2]),"%"==l[2].slice(-1)&&(o*=2.55),"rgba"==u[1].toLowerCase().slice(0,4)&&(s=V(l[3])),l[3]&&"%"==l[3].slice(-1)&&(s/=100)),u[5]?(l=u[5][F](K),n=V(l[0]),"%"==l[0].slice(-1)&&(n*=2.55),i=V(l[1]),"%"==l[1].slice(-1)&&(i*=2.55),o=V(l[2]),"%"==l[2].slice(-1)&&(o*=2.55),("deg"==l[0].slice(-3)||"°"==l[0].slice(-1))&&(n/=360),"hsba"==u[1].toLowerCase().slice(0,4)&&(s=V(l[3])),l[3]&&"%"==l[3].slice(-1)&&(s/=100),e.hsb2rgb(n,i,o,s)):u[6]?(l=u[6][F](K),n=V(l[0]),"%"==l[0].slice(-1)&&(n*=2.55),i=V(l[1]),"%"==l[1].slice(-1)&&(i*=2.55),o=V(l[2]),"%"==l[2].slice(-1)&&(o*=2.55),("deg"==l[0].slice(-3)||"°"==l[0].slice(-1))&&(n/=360),"hsla"==u[1].toLowerCase().slice(0,4)&&(s=V(l[3])),l[3]&&"%"==l[3].slice(-1)&&(s/=100),e.hsl2rgb(n,i,o,s)):(u={r:n,g:i,b:o,toString:r},u.hex="#"+(16777216|o|i<<8|n<<16).toString(16).slice(1),e.is(s,"finite")&&(u.opacity=s),u)):{r:-1,g:-1,b:-1,hex:"none",error:1,toString:r}},e),e.hsb=i(function(t,n,i){return e.hsb2rgb(t,n,i).hex}),e.hsl=i(function(t,n,i){return e.hsl2rgb(t,n,i).hex}),e.rgb=i(function(t,e,n){function i(t){return t+.5|0}return"#"+(16777216|i(n)|i(e)<<8|i(t)<<16).toString(16).slice(1)}),(e.getColor=function(t){var e=this.getColor.start=this.getColor.start||{h:0,s:1,b:t||.75},n=this.hsb2rgb(e.h,e.s,e.b);return e.h+=.075,e.h>1&&(e.h=0,e.s-=.2,e.s<=0&&(this.getColor.start={h:0,s:1,b:e.b})),n.hex}).reset=function(){delete this.start},e.parsePathString=function(t){if(!t)return null;var n=bt(t);if(n.arr)return _t(n.arr);var i={a:7,c:6,h:1,l:2,m:2,r:4,q:4,s:4,t:2,v:1,z:0},r=[];return e.is(t,z)&&e.is(t[0],z)&&(r=_t(t)),r.length||M(t).replace(nt,function(t,e,n){var o=[],s=e.toLowerCase();if(n.replace(rt,function(t,e){e&&o.push(+e)}),"m"==s&&o.length>2&&(r.push([e][A](o.splice(0,2))),s="l",e="m"==e?"l":"L"),"r"==s)r.push([e][A](o));else for(;o.length>=i[s]&&(r.push([e][A](o.splice(0,i[s]))),i[s]););}),r.toString=e._path2string,n.arr=_t(r),r},e.parseTransformString=i(function(t){if(!t)return null;var n=[];return e.is(t,z)&&e.is(t[0],z)&&(n=_t(t)),n.length||M(t).replace(it,function(t,e,i){var r=[];N.call(e),i.replace(rt,function(t,e){e&&r.push(+e)}),n.push([e][A](r))}),n.toString=e._path2string,n});var bt=function(t){var e=bt.ps=bt.ps||{};return e[t]?e[t].sleep=100:e[t]={sleep:100},setTimeout(function(){for(var n in e)e[_](n)&&n!=t&&!--e[n].sleep&&delete e[n]}),e[t]};e.findDotsAtSegment=function(t,e,n,i,r,o,s,a,l){var u=1-l,h=q(u,3),c=q(u,2),f=l*l,p=f*l,d=h*t+3*c*l*n+3*u*l*l*r+p*s,g=h*e+3*c*l*i+3*u*l*l*o+p*a,v=t+2*l*(n-t)+f*(r-2*n+t),y=e+2*l*(i-e)+f*(o-2*i+e),m=n+2*l*(r-n)+f*(s-2*r+n),x=i+2*l*(o-i)+f*(a-2*o+i),b=u*t+l*n,w=u*e+l*i,_=u*r+l*s,k=u*o+l*a,C=90-180*j.atan2(v-m,y-x)/R;return(v>m||y<x)&&(C+=180),{x:d,y:g,m:{x:v,y:y},n:{x:m,y:x},start:{x:b,y:w},end:{x:_,y:k},alpha:C}},e.bezierBBox=function(t,n,i,r,o,s,a,l){e.is(t,"array")||(t=[t,n,i,r,o,s,a,l]);var u=Et.apply(null,t);return{x:u.min.x,y:u.min.y,x2:u.max.x,y2:u.max.y,width:u.max.x-u.min.x,height:u.max.y-u.min.y}},e.isPointInsideBBox=function(t,e,n){return e>=t.x&&e<=t.x2&&n>=t.y&&n<=t.y2},e.isBBoxIntersect=function(t,n){var i=e.isPointInsideBBox;return i(n,t.x,t.y)||i(n,t.x2,t.y)||i(n,t.x,t.y2)||i(n,t.x2,t.y2)||i(t,n.x,n.y)||i(t,n.x2,n.y)||i(t,n.x,n.y2)||i(t,n.x2,n.y2)||(t.x<n.x2&&t.x>n.x||n.x<t.x2&&n.x>t.x)&&(t.y<n.y2&&t.y>n.y||n.y<t.y2&&n.y>t.y)},e.pathIntersection=function(t,e){return h(t,e)},e.pathIntersectionNumber=function(t,e){return h(t,e,1)},e.isPointInsidePath=function(t,n,i){var r=e.pathBBox(t);return e.isPointInsideBBox(r,n,i)&&h(t,[["M",n,i],["H",r.x2+10]],1)%2==1},e._removedFactory=function(e){return function(){t("raphael.log",null,"Raphaël: you are calling to method “"+e+"” of removed object",e)}};var wt=e.pathBBox=function(t){var e=bt(t);if(e.bbox)return n(e.bbox);if(!t)return{x:0,y:0,width:0,height:0,x2:0,y2:0};for(var i,r=0,o=0,s=[],a=[],l=0,u=(t=Mt(t)).length;l<u;l++)if("M"==(i=t[l])[0])r=i[1],o=i[2],s.push(r),a.push(o);else{var h=Et(r,o,i[1],i[2],i[3],i[4],i[5],i[6]);s=s[A](h.min.x,h.max.x),a=a[A](h.min.y,h.max.y),r=i[5],o=i[6]}var c=H[S](0,s),f=H[S](0,a),p=P[S](0,s),d=P[S](0,a),g=p-c,v=d-f,y={x:c,y:f,x2:p,y2:d,width:g,height:v,cx:c+g/2,cy:f+v/2};return e.bbox=n(y),y},_t=function(t){var i=n(t);return i.toString=e._path2string,i},kt=e._pathToRelative=function(t){var n=bt(t);if(n.rel)return _t(n.rel);e.is(t,z)&&e.is(t&&t[0],z)||(t=e.parsePathString(t));var i=[],r=0,o=0,s=0,a=0,l=0;"M"==t[0][0]&&(r=t[0][1],o=t[0][2],s=r,a=o,l++,i.push(["M",r,o]));for(var u=l,h=t.length;u<h;u++){var c=i[u]=[],f=t[u];if(f[0]!=N.call(f[0]))switch(c[0]=N.call(f[0]),c[0]){case"a":c[1]=f[1],c[2]=f[2],c[3]=f[3],c[4]=f[4],c[5]=f[5],c[6]=+(f[6]-r).toFixed(3),c[7]=+(f[7]-o).toFixed(3);break;case"v":c[1]=+(f[1]-o).toFixed(3);break;case"m":s=f[1],a=f[2];default:for(var p=1,d=f.length;p<d;p++)c[p]=+(f[p]-(p%2?r:o)).toFixed(3)}else{c=i[u]=[],"m"==f[0]&&(s=f[1]+r,a=f[2]+o);for(var g=0,v=f.length;g<v;g++)i[u][g]=f[g]}var y=i[u].length;switch(i[u][0]){case"z":r=s,o=a;break;case"h":r+=+i[u][y-1];break;case"v":o+=+i[u][y-1];break;default:r+=+i[u][y-2],o+=+i[u][y-1]}}return i.toString=e._path2string,n.rel=_t(i),i},Ct=e._pathToAbsolute=function(t){var n=bt(t);if(n.abs)return _t(n.abs);if(e.is(t,z)&&e.is(t&&t[0],z)||(t=e.parsePathString(t)),!t||!t.length)return[["M",0,0]];var i=[],r=0,s=0,a=0,l=0,u=0;"M"==t[0][0]&&(r=+t[0][1],s=+t[0][2],a=r,l=s,u++,i[0]=["M",r,s]);for(var h,c,f=3==t.length&&"M"==t[0][0]&&"R"==t[1][0].toUpperCase()&&"Z"==t[2][0].toUpperCase(),p=u,d=t.length;p<d;p++){if(i.push(h=[]),(c=t[p])[0]!=Q.call(c[0]))switch(h[0]=Q.call(c[0]),h[0]){case"A":h[1]=c[1],h[2]=c[2],h[3]=c[3],h[4]=c[4],h[5]=c[5],h[6]=+(c[6]+r),h[7]=+(c[7]+s);break;case"V":h[1]=+c[1]+s;break;case"H":h[1]=+c[1]+r;break;case"R":for(var g=[r,s][A](c.slice(1)),v=2,y=g.length;v<y;v++)g[v]=+g[v]+r,g[++v]=+g[v]+s;i.pop(),i=i[A](o(g,f));break;case"M":a=+c[1]+r,l=+c[2]+s;default:for(v=1,y=c.length;v<y;v++)h[v]=+c[v]+(v%2?r:s)}else if("R"==c[0])g=[r,s][A](c.slice(1)),i.pop(),i=i[A](o(g,f)),h=["R"][A](c.slice(-2));else for(var m=0,x=c.length;m<x;m++)h[m]=c[m];switch(h[0]){case"Z":r=a,s=l;break;case"H":r=h[1];break;case"V":s=h[1];break;case"M":a=h[h.length-2],l=h[h.length-1];default:r=h[h.length-2],s=h[h.length-1]}}return i.toString=e._path2string,n.abs=_t(i),i},Tt=function(t,e,n,i){return[t,e,n,i,n,i]},St=function(t,e,n,i,r,o){return[1/3*t+2/3*n,1/3*e+2/3*i,1/3*r+2/3*n,1/3*o+2/3*i,r,o]},At=function(t,e,n,r,o,s,a,l,u,h){var c,f=120*R/180,p=R/180*(+o||0),d=[],g=i(function(t,e,n){return{x:t*j.cos(n)-e*j.sin(n),y:t*j.sin(n)+e*j.cos(n)}});if(h)C=h[0],T=h[1],_=h[2],k=h[3];else{t=(c=g(t,e,-p)).x,e=c.y,l=(c=g(l,u,-p)).x,u=c.y,j.cos(R/180*o),j.sin(R/180*o);var v=(t-l)/2,y=(e-u)/2,m=v*v/(n*n)+y*y/(r*r);m>1&&(m=j.sqrt(m),n*=m,r*=m);var x=n*n,b=r*r,w=(s==a?-1:1)*j.sqrt(I((x*b-x*y*y-b*v*v)/(x*y*y+b*v*v))),_=w*n*y/r+(t+l)/2,k=w*-r*v/n+(e+u)/2,C=j.asin(((e-k)/r).toFixed(9)),T=j.asin(((u-k)/r).toFixed(9));C=t<_?R-C:C,T=l<_?R-T:T,C<0&&(C=2*R+C),T<0&&(T=2*R+T),a&&C>T&&(C-=2*R),!a&&T>C&&(T-=2*R)}var S=T-C;if(I(S)>f){var L=T,E=l,M=u;T=C+f*(a&&T>C?1:-1),l=_+n*j.cos(T),u=k+r*j.sin(T),d=At(l,u,n,r,o,0,a,E,M,[T,L,_,k])}S=T-C;var B=j.cos(C),D=j.sin(C),N=j.cos(T),P=j.sin(T),H=j.tan(S/4),q=4/3*n*H,O=4/3*r*H,z=[t,e],W=[t+q*D,e-O*B],$=[l+q*P,u-O*N],G=[l,u];if(W[0]=2*z[0]-W[0],W[1]=2*z[1]-W[1],h)return[W,$,G][A](d);for(var Y=[],X=0,V=(d=[W,$,G][A](d).join()[F](",")).length;X<V;X++)Y[X]=X%2?g(d[X-1],d[X],p).y:g(d[X],d[X+1],p).x;return Y},Lt=function(t,e,n,i,r,o,s,a,l){var u=1-l;return{x:q(u,3)*t+3*q(u,2)*l*n+3*u*l*l*r+q(l,3)*s,y:q(u,3)*e+3*q(u,2)*l*i+3*u*l*l*o+q(l,3)*a}},Et=i(function(t,e,n,i,r,o,s,a){var l,u=r-2*n+t-(s-2*r+n),h=2*(n-t)-2*(r-n),c=t-n,f=(-h+j.sqrt(h*h-4*u*c))/2/u,p=(-h-j.sqrt(h*h-4*u*c))/2/u,d=[e,a],g=[t,s];return I(f)>"1e12"&&(f=.5),I(p)>"1e12"&&(p=.5),f>0&&f<1&&(l=Lt(t,e,n,i,r,o,s,a,f),g.push(l.x),d.push(l.y)),p>0&&p<1&&(l=Lt(t,e,n,i,r,o,s,a,p),g.push(l.x),d.push(l.y)),u=o-2*i+e-(a-2*o+i),h=2*(i-e)-2*(o-i),c=e-i,f=(-h+j.sqrt(h*h-4*u*c))/2/u,p=(-h-j.sqrt(h*h-4*u*c))/2/u,I(f)>"1e12"&&(f=.5),I(p)>"1e12"&&(p=.5),f>0&&f<1&&(l=Lt(t,e,n,i,r,o,s,a,f),g.push(l.x),d.push(l.y)),p>0&&p<1&&(l=Lt(t,e,n,i,r,o,s,a,p),g.push(l.x),d.push(l.y)),{min:{x:H[S](0,g),y:H[S](0,d)},max:{x:P[S](0,g),y:P[S](0,d)}}}),Mt=e._path2curve=i(function(t,e){var n=!e&&bt(t);if(!e&&n.curve)return _t(n.curve);for(var i=Ct(t),r=e&&Ct(e),o={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},s={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},a=(function(t,e,n){var i,r,o={T:1,Q:1};if(!t)return["C",e.x,e.y,e.x,e.y,e.x,e.y];switch(!(t[0]in o)&&(e.qx=e.qy=null),t[0]){case"M":e.X=t[1],e.Y=t[2];break;case"A":t=["C"][A](At[S](0,[e.x,e.y][A](t.slice(1))));break;case"S":"C"==n||"S"==n?(i=2*e.x-e.bx,r=2*e.y-e.by):(i=e.x,r=e.y),t=["C",i,r][A](t.slice(1));break;case"T":"Q"==n||"T"==n?(e.qx=2*e.x-e.qx,e.qy=2*e.y-e.qy):(e.qx=e.x,e.qy=e.y),t=["C"][A](St(e.x,e.y,e.qx,e.qy,t[1],t[2]));break;case"Q":e.qx=t[1],e.qy=t[2],t=["C"][A](St(e.x,e.y,t[1],t[2],t[3],t[4]));break;case"L":t=["C"][A](Tt(e.x,e.y,t[1],t[2]));break;case"H":t=["C"][A](Tt(e.x,e.y,t[1],e.y));break;case"V":t=["C"][A](Tt(e.x,e.y,e.x,t[1]));break;case"Z":t=["C"][A](Tt(e.x,e.y,e.X,e.Y))}return t}),l=function(t,e){if(t[e].length>7){t[e].shift();for(var n=t[e];n.length;)h[e]="A",r&&(c[e]="A"),t.splice(e++,0,["C"][A](n.splice(0,6)));t.splice(e,1),g=P(i.length,r&&r.length||0)}},u=function(t,e,n,o,s){t&&e&&"M"==t[s][0]&&"M"!=e[s][0]&&(e.splice(s,0,["M",o.x,o.y]),n.bx=0,n.by=0,n.x=t[s][1],n.y=t[s][2],g=P(i.length,r&&r.length||0))},h=[],c=[],f="",p="",d=0,g=P(i.length,r&&r.length||0);d<g;d++){i[d]&&(f=i[d][0]),"C"!=f&&(h[d]=f,d&&(p=h[d-1])),i[d]=a(i[d],o,p),"A"!=h[d]&&"C"==f&&(h[d]="C"),l(i,d),r&&(r[d]&&(f=r[d][0]),"C"!=f&&(c[d]=f,d&&(p=c[d-1])),r[d]=a(r[d],s,p),"A"!=c[d]&&"C"==f&&(c[d]="C"),l(r,d)),u(i,r,o,s,d),u(r,i,s,o,d);var v=i[d],y=r&&r[d],m=v.length,x=r&&y.length;o.x=v[m-2],o.y=v[m-1],o.bx=V(v[m-4])||o.x,o.by=V(v[m-3])||o.y,s.bx=r&&(V(y[x-4])||s.x),s.by=r&&(V(y[x-3])||s.y),s.x=r&&y[x-2],s.y=r&&y[x-1]}return r||(n.curve=_t(i)),r?[i,r]:i},null,_t),Ft=(e._parseDots=i(function(t){for(var n=[],i=0,r=t.length;i<r;i++){var o={},s=t[i].match(/^([^:]*):?([\d\.]*)/);if(o.color=e.getRGB(s[1]),o.color.error)return null;o.opacity=o.color.opacity,o.color=o.color.hex,s[2]&&(o.offset=s[2]+"%"),n.push(o)}for(i=1,r=n.length-1;i<r;i++)if(!n[i].offset){for(var a=V(n[i-1].offset||0),l=0,u=i+1;u<r;u++)if(n[u].offset){l=n[u].offset;break}l||(l=100,u=r);for(var h=((l=V(l))-a)/(u-i+1);i<u;i++)a+=h,n[i].offset=a+"%"}return n}),e._tear=function(t,e){t==e.top&&(e.top=t.prev),t==e.bottom&&(e.bottom=t.next),t.next&&(t.next.prev=t.prev),t.prev&&(t.prev.next=t.next)}),Bt=(e._tofront=function(t,e){e.top!==t&&(Ft(t,e),t.next=null,t.prev=e.top,e.top.next=t,e.top=t)},e._toback=function(t,e){e.bottom!==t&&(Ft(t,e),t.next=e.bottom,t.prev=null,e.bottom.prev=t,e.bottom=t)},e._insertafter=function(t,e,n){Ft(t,n),e==n.top&&(n.top=t),e.next&&(e.next.prev=t),t.next=e.next,t.prev=e,e.next=t},e._insertbefore=function(t,e,n){Ft(t,n),e==n.bottom&&(n.bottom=t),e.prev&&(e.prev.next=t),t.prev=e.prev,e.prev=t,t.next=e},e.toMatrix=function(t,e){var n=wt(t),i={_:{transform:""},getBBox:function(){return n}};return Dt(i,e),i.matrix}),Dt=(e.transformPath=function(t,e){return ct(t,Bt(t,e))},e._extractTransform=function(t,n){if(null==n)return t._.transform;n=M(n).replace(/\.{3}|\u2026/g,t._.transform||"");var i=e.parseTransformString(n),r=0,o=0,s=0,a=1,l=1,u=t._,h=new c;if(u.transform=i||[],i)for(var f=0,p=i.length;f<p;f++){var d,g,v,y,m,x=i[f],b=x.length,w=M(x[0]).toLowerCase(),_=x[0]!=w,k=_?h.invert():0;"t"==w&&3==b?_?(d=k.x(0,0),g=k.y(0,0),v=k.x(x[1],x[2]),y=k.y(x[1],x[2]),h.translate(v-d,y-g)):h.translate(x[1],x[2]):"r"==w?2==b?(m=m||t.getBBox(1),h.rotate(x[1],m.x+m.width/2,m.y+m.height/2),r+=x[1]):4==b&&(_?(v=k.x(x[2],x[3]),y=k.y(x[2],x[3]),h.rotate(x[1],v,y)):h.rotate(x[1],x[2],x[3]),r+=x[1]):"s"==w?2==b||3==b?(m=m||t.getBBox(1),h.scale(x[1],x[b-1],m.x+m.width/2,m.y+m.height/2),a*=x[1],l*=x[b-1]):5==b&&(_?(v=k.x(x[3],x[4]),y=k.y(x[3],x[4]),h.scale(x[1],x[2],v,y)):h.scale(x[1],x[2],x[3],x[4]),a*=x[1],l*=x[2]):"m"==w&&7==b&&h.add(x[1],x[2],x[3],x[4],x[5],x[6]),u.dirtyT=1,t.matrix=h}t.matrix=h,u.sx=a,u.sy=l,u.deg=r,u.dx=o=h.e,u.dy=s=h.f,1==a&&1==l&&!r&&u.bbox?(u.bbox.x+=+o,u.bbox.y+=+s):u.dirtyT=1}),Nt=function(t){var e=t[0];switch(e.toLowerCase()){case"t":return[e,0,0];case"m":return[e,1,0,0,1,0,0];case"r":return 4==t.length?[e,0,t[2],t[3]]:[e,0];case"s":return 5==t.length?[e,1,1,t[3],t[4]]:3==t.length?[e,1,1]:[e,1]}},jt=e._equaliseTransform=function(t,n){n=M(n).replace(/\.{3}|\u2026/g,t),t=e.parseTransformString(t)||[],n=e.parseTransformString(n)||[];for(var i,r,o,s,a=P(t.length,n.length),l=[],u=[],h=0;h<a;h++){if(o=t[h]||Nt(n[h]),s=n[h]||Nt(o),o[0]!=s[0]||"r"==o[0].toLowerCase()&&(o[2]!=s[2]||o[3]!=s[3])||"s"==o[0].toLowerCase()&&(o[3]!=s[3]||o[4]!=s[4]))return;for(l[h]=[],u[h]=[],i=0,r=P(o.length,s.length);i<r;i++)i in o&&(l[h][i]=o[i]),i in s&&(u[h][i]=s[i])}return{from:l,to:u}};e._getContainer=function(t,n,i,r){var o;if(null!=(o=null!=r||e.is(t,"object")?t:k.doc.getElementById(t)))return o.tagName?null==n?{container:o,width:o.style.pixelWidth||o.offsetWidth,height:o.style.pixelHeight||o.offsetHeight}:{container:o,width:n,height:i}:{container:1,x:t,y:n,width:i,height:r}},e.pathToRelative=kt,e._engine={},e.path2curve=Mt,e.matrix=function(t,e,n,i,r,o){return new c(t,e,n,i,r,o)},function(t){function n(t){return t[0]*t[0]+t[1]*t[1]}function i(t){var e=j.sqrt(n(t));t[0]&&(t[0]/=e),t[1]&&(t[1]/=e)}t.add=function(t,e,n,i,r,o){var s,a,l,u,h=[[],[],[]],f=[[this.a,this.c,this.e],[this.b,this.d,this.f],[0,0,1]],p=[[t,n,r],[e,i,o],[0,0,1]];for(t&&t instanceof c&&(p=[[t.a,t.c,t.e],[t.b,t.d,t.f],[0,0,1]]),s=0;s<3;s++)for(a=0;a<3;a++){for(u=0,l=0;l<3;l++)u+=f[s][l]*p[l][a];h[s][a]=u}this.a=h[0][0],this.b=h[1][0],this.c=h[0][1],this.d=h[1][1],this.e=h[0][2],this.f=h[1][2]},t.invert=function(){var t=this.a*this.d-this.b*this.c;return new c(this.d/t,-this.b/t,-this.c/t,this.a/t,(this.c*this.f-this.d*this.e)/t,(this.b*this.e-this.a*this.f)/t)},t.clone=function(){return new c(this.a,this.b,this.c,this.d,this.e,this.f)},t.translate=function(t,e){this.add(1,0,0,1,t,e)},t.scale=function(t,e,n,i){null==e&&(e=t),(n||i)&&this.add(1,0,0,1,n,i),this.add(t,0,0,e,0,0),(n||i)&&this.add(1,0,0,1,-n,-i)},t.rotate=function(t,n,i){t=e.rad(t),n=n||0,i=i||0;var r=+j.cos(t).toFixed(9),o=+j.sin(t).toFixed(9);this.add(r,o,-o,r,n,i),this.add(1,0,0,1,-n,-i)},t.x=function(t,e){return t*this.a+e*this.c+this.e},t.y=function(t,e){return t*this.b+e*this.d+this.f},t.get=function(t){return+this[M.fromCharCode(97+t)].toFixed(4)},t.toString=function(){return e.svg?"matrix("+[this.get(0),this.get(1),this.get(2),this.get(3),this.get(4),this.get(5)].join()+")":[this.get(0),this.get(2),this.get(1),this.get(3),0,0].join()},t.toFilter=function(){return"progid:DXImageTransform.Microsoft.Matrix(M11="+this.get(0)+", M12="+this.get(2)+", M21="+this.get(1)+", M22="+this.get(3)+", Dx="+this.get(4)+", Dy="+this.get(5)+", sizingmethod='auto expand')"},t.offset=function(){return[this.e.toFixed(4),this.f.toFixed(4)]},t.split=function(){var t={};t.dx=this.e,t.dy=this.f;var r=[[this.a,this.c],[this.b,this.d]];t.scalex=j.sqrt(n(r[0])),i(r[0]),t.shear=r[0][0]*r[1][0]+r[0][1]*r[1][1],r[1]=[r[1][0]-r[0][0]*t.shear,r[1][1]-r[0][1]*t.shear],t.scaley=j.sqrt(n(r[1])),i(r[1]),t.shear/=t.scaley;var o=-r[0][1],s=r[1][1];return s<0?(t.rotate=e.deg(j.acos(s)),o<0&&(t.rotate=360-t.rotate)):t.rotate=e.deg(j.asin(o)),t.isSimple=!(+t.shear.toFixed(9)||t.scalex.toFixed(9)!=t.scaley.toFixed(9)&&t.rotate),t.isSuperSimple=!+t.shear.toFixed(9)&&t.scalex.toFixed(9)==t.scaley.toFixed(9)&&!t.rotate,t.noRotation=!+t.shear.toFixed(9)&&!t.rotate,t},t.toTransformString=function(t){var e=t||this[F]();return e.isSimple?(e.scalex=+e.scalex.toFixed(4),e.scaley=+e.scaley.toFixed(4),e.rotate=+e.rotate.toFixed(4),(e.dx||e.dy?"t"+[e.dx,e.dy]:"")+(1!=e.scalex||1!=e.scaley?"s"+[e.scalex,e.scaley,0,0]:"")+(e.rotate?"r"+[e.rotate,0,0]:"")):"m"+[this.get(0),this.get(1),this.get(2),this.get(3),this.get(4),this.get(5)]}}(c.prototype);for(var Pt=function(){return this.originalEvent.preventDefault()},Ht=function(){return this.originalEvent.stopPropagation()},It=function(t){var e=k.doc.documentElement.scrollTop||k.doc.body.scrollTop,n=k.doc.documentElement.scrollLeft||k.doc.body.scrollLeft;return{x:t.clientX+n,y:t.clientY+e}},qt=k.doc.addEventListener?function(t,e,n,i){var r=function(t){var e=It(t);return n.call(i,t,e.x,e.y)};if(t.addEventListener(e,r,!1),L&&D[e]){var o=function(e){for(var r=It(e),o=e,s=0,a=e.targetTouches&&e.targetTouches.length;s<a;s++)if(e.targetTouches[s].target==t){(e=e.targetTouches[s]).originalEvent=o,e.preventDefault=Pt,e.stopPropagation=Ht;break}return n.call(i,e,r.x,r.y)};t.addEventListener(D[e],o,!1)}return function(){return t.removeEventListener(e,r,!1),L&&D[e]&&t.removeEventListener(D[e],o,!1),!0}}:k.doc.attachEvent?function(t,e,n,i){var r=function(t){t=t||k.win.event;var e=k.doc.documentElement.scrollTop||k.doc.body.scrollTop,r=k.doc.documentElement.scrollLeft||k.doc.body.scrollLeft,o=t.clientX+r,s=t.clientY+e;return t.preventDefault=t.preventDefault||function(){this.returnValue=!1},t.stopPropagation=t.stopPropagation||function(){this.cancelBubble=!0},n.call(i,t,o,s)};return t.attachEvent("on"+e,r),function(){return t.detachEvent("on"+e,r),!0}}:void 0,Rt=[],Ot=function(e){for(var n,i=e.clientX,r=e.clientY,o=k.doc.documentElement.scrollTop||k.doc.body.scrollTop,s=k.doc.documentElement.scrollLeft||k.doc.body.scrollLeft,a=Rt.length;a--;){if(n=Rt[a],L&&e.touches){for(var l,u=e.touches.length;u--;)if((l=e.touches[u]).identifier==n.el._drag.id){i=l.clientX,r=l.clientY,(e.originalEvent?e.originalEvent:e).preventDefault();break}}else e.preventDefault();var h,c=n.el.node,f=c.nextSibling,p=c.parentNode,d=c.style.display;k.win.opera&&p.removeChild(c),c.style.display="none",h=n.el.paper.getElementByPoint(i,r),c.style.display=d,k.win.opera&&(f?p.insertBefore(c,f):p.appendChild(c)),h&&t("raphael.drag.over."+n.el.id,n.el,h),i+=s,r+=o,t("raphael.drag.move."+n.el.id,n.move_scope||n.el,i-n.el._drag.x,r-n.el._drag.y,i,r,e)}},zt=function(n){e.unmousemove(Ot).unmouseup(zt);for(var i,r=Rt.length;r--;)i=Rt[r],i.el._drag={},t("raphael.drag.end."+i.el.id,i.end_scope||i.start_scope||i.move_scope||i.el,n);Rt=[]},Wt=e.el={},$t=B.length;$t--;)!function(t){e[t]=Wt[t]=function(n,i){return e.is(n,"function")&&(this.events=this.events||[],this.events.push({name:t,f:n,unbind:qt(this.shape||this.node||k.doc,t,n,i||this)})),this},e["un"+t]=Wt["un"+t]=function(n){for(var i=this.events||[],r=i.length;r--;)i[r].name!=t||!e.is(n,"undefined")&&i[r].f!=n||(i[r].unbind(),i.splice(r,1),!i.length&&delete this.events);return this}}(B[$t]);Wt.data=function(n,i){var r=ot[this.id]=ot[this.id]||{};if(0==arguments.length)return r;if(1==arguments.length){if(e.is(n,"object")){for(var o in n)n[_](o)&&this.data(o,n[o]);return this}return t("raphael.data.get."+this.id,this,r[n],n),r[n]}return r[n]=i,t("raphael.data.set."+this.id,this,i,n),this},Wt.removeData=function(t){return null==t?ot[this.id]={}:ot[this.id]&&delete ot[this.id][t],this},Wt.getData=function(){return n(ot[this.id]||{})},Wt.hover=function(t,e,n,i){return this.mouseover(t,n).mouseout(e,i||n)},Wt.unhover=function(t,e){return this.unmouseover(t).unmouseout(e)};var Gt=[];Wt.drag=function(n,i,r,o,s,a){function l(l){(l.originalEvent||l).preventDefault();var u=l.clientX,h=l.clientY,c=k.doc.documentElement.scrollTop||k.doc.body.scrollTop,f=k.doc.documentElement.scrollLeft||k.doc.body.scrollLeft;if(this._drag.id=l.identifier,L&&l.touches)for(var p,d=l.touches.length;d--;)if(p=l.touches[d],this._drag.id=p.identifier,p.identifier==this._drag.id){u=p.clientX,h=p.clientY;break}this._drag.x=u+f,this._drag.y=h+c,!Rt.length&&e.mousemove(Ot).mouseup(zt),Rt.push({el:this,move_scope:o,start_scope:s,end_scope:a}),i&&t.on("raphael.drag.start."+this.id,i),n&&t.on("raphael.drag.move."+this.id,n),r&&t.on("raphael.drag.end."+this.id,r),t("raphael.drag.start."+this.id,s||o||this,l.clientX+f,l.clientY+c,l)}return this._drag={},Gt.push({el:this,start:l}),this.mousedown(l),this},Wt.onDragOver=function(e){e?t.on("raphael.drag.over."+this.id,e):t.unbind("raphael.drag.over."+this.id)},Wt.undrag=function(){for(var n=Gt.length;n--;)Gt[n].el==this&&(this.unmousedown(Gt[n].start),Gt.splice(n,1),t.unbind("raphael.drag.*."+this.id));!Gt.length&&e.unmousemove(Ot).unmouseup(zt),Rt=[]},m.circle=function(t,n,i){var r=e._engine.circle(this,t||0,n||0,i||0);return this.__set__&&this.__set__.push(r),r},m.rect=function(t,n,i,r,o){var s=e._engine.rect(this,t||0,n||0,i||0,r||0,o||0);return this.__set__&&this.__set__.push(s),s},m.ellipse=function(t,n,i,r){var o=e._engine.ellipse(this,t||0,n||0,i||0,r||0);return this.__set__&&this.__set__.push(o),o},m.path=function(t){t&&!e.is(t,"string")&&!e.is(t[0],z)&&(t+="");var n=e._engine.path(e.format[S](e,arguments),this);return this.__set__&&this.__set__.push(n),n},m.image=function(t,n,i,r,o){var s=e._engine.image(this,t||"about:blank",n||0,i||0,r||0,o||0);return this.__set__&&this.__set__.push(s),s},m.text=function(t,n,i){var r=e._engine.text(this,t||0,n||0,M(i));return this.__set__&&this.__set__.push(r),r},m.set=function(t){!e.is(t,"array")&&(t=Array.prototype.splice.call(arguments,0,arguments.length));var n=new ne(t);return this.__set__&&this.__set__.push(n),n.paper=this,n.type="set",n},m.setStart=function(t){this.__set__=t||this.set()},m.setFinish=function(t){var e=this.__set__;return delete this.__set__,e},m.getSize=function(){var t=this.canvas.parentNode;return{width:t.offsetWidth,height:t.offsetHeight}},m.setSize=function(t,n){return e._engine.setSize.call(this,t,n)},m.setViewBox=function(t,n,i,r,o){return e._engine.setViewBox.call(this,t,n,i,r,o)},m.top=m.bottom=null,m.raphael=e,m.getElementByPoint=function(t,e){var n=this.canvas,i=k.doc.elementFromPoint(t,e);if(k.win.opera&&"svg"==i.tagName){var r=function(t){var e=t.getBoundingClientRect(),n=t.ownerDocument,i=n.body,r=n.documentElement,o=r.clientTop||i.clientTop||0,s=r.clientLeft||i.clientLeft||0;return{y:e.top+(k.win.pageYOffset||r.scrollTop||i.scrollTop)-o,x:e.left+(k.win.pageXOffset||r.scrollLeft||i.scrollLeft)-s}}(n),o=n.createSVGRect();o.x=t-r.x,o.y=e-r.y,o.width=o.height=1;var s=n.getIntersectionList(o,null);s.length&&(i=s[s.length-1])}if(!i)return null;for(;i.parentNode&&i!=n.parentNode&&!i.raphael;)i=i.parentNode;return i==this.canvas.parentNode&&(i=n),i=i&&i.raphael?this.getById(i.raphaelid):null},m.getElementsByBBox=function(t){var n=this.set();return this.forEach(function(i){e.isBBoxIntersect(i.getBBox(),t)&&n.push(i)}),n},m.getById=function(t){for(var e=this.bottom;e;){if(e.id==t)return e;e=e.next}return null},m.forEach=function(t,e){for(var n=this.bottom;n;){if(!1===t.call(e,n))return this;n=n.next}return this},m.getElementsByPoint=function(t,e){var n=this.set();return this.forEach(function(i){i.isPointInside(t,e)&&n.push(i)}),n},Wt.isPointInside=function(t,n){var i=this.realPath=ht[this.type](this);return this.attr("transform")&&this.attr("transform").length&&(i=e.transformPath(i,this.attr("transform"))),e.isPointInsidePath(i,t,n)},Wt.getBBox=function(t){if(this.removed)return{};var e=this._;return t?(!e.dirty&&e.bboxwt||(this.realPath=ht[this.type](this),e.bboxwt=wt(this.realPath),e.bboxwt.toString=f,e.dirty=0),e.bboxwt):((e.dirty||e.dirtyT||!e.bbox)&&(!e.dirty&&this.realPath||(e.bboxwt=0,this.realPath=ht[this.type](this)),e.bbox=wt(ct(this.realPath,this.matrix)),e.bbox.toString=f,e.dirty=e.dirtyT=0),e.bbox)},Wt.clone=function(){if(this.removed)return null;var t=this.paper[this.type]().attr(this.attr());return this.__set__&&this.__set__.push(t),t},Wt.glow=function(t){if("text"==this.type)return null;var e={width:((t=t||{}).width||10)+(+this.attr("stroke-width")||1),fill:t.fill||!1,opacity:null==t.opacity?.5:t.opacity,offsetx:t.offsetx||0,offsety:t.offsety||0,color:t.color||"#000"},n=e.width/2,i=this.paper,r=i.set(),o=this.realPath||ht[this.type](this);o=this.matrix?ct(o,this.matrix):o;for(var s=1;s<n+1;s++)r.push(i.path(o).attr({stroke:e.color,fill:e.fill?e.color:"none","stroke-linejoin":"round","stroke-linecap":"round","stroke-width":+(e.width/n*s).toFixed(3),opacity:+(e.opacity/n).toFixed(3)}));return r.insertBefore(this).translate(e.offsetx,e.offsety)};var Yt=function(t,n,i,r,o,s,l,u,h){return null==h?a(t,n,i,r,o,s,l,u):e.findDotsAtSegment(t,n,i,r,o,s,l,u,function(t,e,n,i,r,o,s,l,u){if(!(u<0||a(t,e,n,i,r,o,s,l)<u)){var h,c=.5,f=1-c;for(h=a(t,e,n,i,r,o,s,l,f);I(h-u)>.01;)c/=2,f+=(h<u?1:-1)*c,h=a(t,e,n,i,r,o,s,l,f);return f}}(t,n,i,r,o,s,l,u,h))},Xt=function(t,n){return function(i,r,o){for(var s,a,l,u,h,c="",f={},p=0,d=0,g=(i=Mt(i)).length;d<g;d++){if("M"==(l=i[d])[0])s=+l[1],a=+l[2];else{if(u=Yt(s,a,l[1],l[2],l[3],l[4],l[5],l[6]),p+u>r){if(n&&!f.start){if(h=Yt(s,a,l[1],l[2],l[3],l[4],l[5],l[6],r-p),c+=["C"+h.start.x,h.start.y,h.m.x,h.m.y,h.x,h.y],o)return c;f.start=c,c=["M"+h.x,h.y+"C"+h.n.x,h.n.y,h.end.x,h.end.y,l[5],l[6]].join(),p+=u,s=+l[5],a=+l[6];continue}if(!t&&!n)return h=Yt(s,a,l[1],l[2],l[3],l[4],l[5],l[6],r-p),{x:h.x,y:h.y,alpha:h.alpha}}p+=u,s=+l[5],a=+l[6]}c+=l.shift()+l}return f.end=c,(h=t?p:n?f:e.findDotsAtSegment(s,a,l[0],l[1],l[2],l[3],l[4],l[5],1)).alpha&&(h={x:h.x,y:h.y,alpha:h.alpha}),h}},Vt=Xt(1),Ut=Xt(),Qt=Xt(0,1);e.getTotalLength=Vt,e.getPointAtLength=Ut,e.getSubpath=function(t,e,n){if(this.getTotalLength(t)-n<1e-6)return Qt(t,e).end;var i=Qt(t,n,1);return e?Qt(i,e).end:i},Wt.getTotalLength=function(){var t=this.getPath();if(t)return this.node.getTotalLength?this.node.getTotalLength():Vt(t)},Wt.getPointAtLength=function(t){var e=this.getPath();if(e)return Ut(e,t)},Wt.getPath=function(){var t,n=e._getPath[this.type];if("text"!=this.type&&"set"!=this.type)return n&&(t=n(this)),t},Wt.getSubpath=function(t,n){var i=this.getPath();if(i)return e.getSubpath(i,t,n)};var Zt=e.easing_formulas={linear:function(t){return t},"<":function(t){return q(t,1.7)},">":function(t){return q(t,.48)},"<>":function(t){var e=.48-t/1.04,n=j.sqrt(.1734+e*e),i=n-e,r=-n-e,o=q(I(i),1/3)*(i<0?-1:1)+q(I(r),1/3)*(r<0?-1:1)+.5;return 3*(1-o)*o*o+o*o*o},backIn:function(t){return t*t*(2.70158*t-1.70158)},backOut:function(t){return(t-=1)*t*(2.70158*t+1.70158)+1},elastic:function(t){return t==!!t?t:q(2,-10*t)*j.sin(2*R*(t-.075)/.3)+1},bounce:function(t){var e;return t<1/2.75?e=7.5625*t*t:t<2/2.75?(t-=1.5/2.75,e=7.5625*t*t+.75):t<2.5/2.75?(t-=2.25/2.75,e=7.5625*t*t+.9375):(t-=2.625/2.75,e=7.5625*t*t+.984375),e}};Zt.easeIn=Zt["ease-in"]=Zt["<"],Zt.easeOut=Zt["ease-out"]=Zt[">"],Zt.easeInOut=Zt["ease-in-out"]=Zt["<>"],Zt["back-in"]=Zt.backIn,Zt["back-out"]=Zt.backOut;var Jt=[],Kt=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){setTimeout(t,16)},te=function(){for(var n=+new Date,i=0;i<Jt.length;i++){var r=Jt[i];if(!r.el.removed&&!r.paused){var o,s,a=n-r.start,l=r.ms,u=r.easing,h=r.from,c=r.diff,f=r.to,p=(r.t,r.el),d={},v={};if(r.initstatus?(a=(r.initstatus*r.anim.top-r.prev)/(r.percent-r.prev)*l,r.status=r.initstatus,delete r.initstatus,r.stop&&Jt.splice(i--,1)):r.status=(r.prev+(r.percent-r.prev)*(a/l))/r.anim.top,!(a<0))if(a<l){var y=u(a/l);for(var m in h)if(h[_](m)){switch(J[m]){case O:o=+h[m]+y*l*c[m];break;case"colour":o="rgb("+[ee(X(h[m].r+y*l*c[m].r)),ee(X(h[m].g+y*l*c[m].g)),ee(X(h[m].b+y*l*c[m].b))].join(",")+")";break;case"path":o=[];for(var x=0,b=h[m].length;x<b;x++){o[x]=[h[m][x][0]];for(var w=1,k=h[m][x].length;w<k;w++)o[x][w]=+h[m][x][w]+y*l*c[m][x][w];o[x]=o[x].join(E)}o=o.join(E);break;case"transform":if(c[m].real)for(o=[],x=0,b=h[m].length;x<b;x++)for(o[x]=[h[m][x][0]],w=1,k=h[m][x].length;w<k;w++)o[x][w]=h[m][x][w]+y*l*c[m][x][w];else{var C=function(t){return+h[m][t]+y*l*c[m][t]};o=[["m",C(0),C(1),C(2),C(3),C(4),C(5)]]}break;case"csv":if("clip-rect"==m)for(o=[],x=4;x--;)o[x]=+h[m][x]+y*l*c[m][x];break;default:var T=[][A](h[m]);for(o=[],x=p.paper.customAttributes[m].length;x--;)o[x]=+T[x]+y*l*c[m][x]}d[m]=o}p.attr(d),function(e,n,i){setTimeout(function(){t("raphael.anim.frame."+e,n,i)})}(p.id,p,r.anim)}else{if(function(n,i,r){setTimeout(function(){t("raphael.anim.frame."+i.id,i,r),t("raphael.anim.finish."+i.id,i,r),e.is(n,"function")&&n.call(i)})}(r.callback,p,r.anim),p.attr(f),Jt.splice(i--,1),r.repeat>1&&!r.next){for(s in f)f[_](s)&&(v[s]=r.totalOrigin[s]);r.el.attr(v),g(r.anim,r.el,r.anim.percents[0],null,r.totalOrigin,r.repeat-1)}r.next&&!r.stop&&g(r.anim,r.el,r.next,null,r.totalOrigin,r.repeat)}}}Jt.length&&Kt(te)},ee=function(t){return t>255?255:t<0?0:t};Wt.animateWith=function(t,n,i,r,o,s){if(this.removed)return s&&s.call(this),this;var a=i instanceof d?i:e.animation(i,r,o,s);g(a,this,a.percents[0],null,this.attr());for(var l=0,u=Jt.length;l<u;l++)if(Jt[l].anim==n&&Jt[l].el==t){Jt[u-1].start=Jt[l].start;break}return this},Wt.onAnimation=function(e){return e?t.on("raphael.anim.frame."+this.id,e):t.unbind("raphael.anim.frame."+this.id),this},d.prototype.delay=function(t){var e=new d(this.anim,this.ms);return e.times=this.times,e.del=+t||0,e},d.prototype.repeat=function(t){var e=new d(this.anim,this.ms);return e.del=this.del,e.times=j.floor(P(t,0))||1,e},e.animation=function(t,n,i,r){if(t instanceof d)return t;!e.is(i,"function")&&i||(r=r||i||null,i=null),t=Object(t),n=+n||0;var o,s,a={};for(s in t)t[_](s)&&V(s)!=s&&V(s)+"%"!=s&&(o=!0,a[s]=t[s]);if(o)return i&&(a.easing=i),r&&(a.callback=r),new d({100:a},n);if(r){var l=0;for(var u in t){var h=U(u);t[_](u)&&h>l&&(l=h)}!t[l+="%"].callback&&(t[l].callback=r)}return new d(t,n)},Wt.animate=function(t,n,i,r){if(this.removed)return r&&r.call(this),this;var o=t instanceof d?t:e.animation(t,n,i,r);return g(o,this,o.percents[0],null,this.attr()),this},Wt.setTime=function(t,e){return t&&null!=e&&this.status(t,H(e,t.ms)/t.ms),this},Wt.status=function(t,e){var n,i,r=[],o=0;if(null!=e)return g(t,this,-1,H(e,1)),this;for(n=Jt.length;o<n;o++)if((i=Jt[o]).el.id==this.id&&(!t||i.anim==t)){if(t)return i.status;r.push({anim:i.anim,status:i.status})}return t?0:r},Wt.pause=function(e){for(var n=0;n<Jt.length;n++)Jt[n].el.id!=this.id||e&&Jt[n].anim!=e||!1!==t("raphael.anim.pause."+this.id,this,Jt[n].anim)&&(Jt[n].paused=!0);return this},Wt.resume=function(e){for(var n=0;n<Jt.length;n++)if(Jt[n].el.id==this.id&&(!e||Jt[n].anim==e)){var i=Jt[n];!1!==t("raphael.anim.resume."+this.id,this,i.anim)&&(delete i.paused,this.status(i.anim,i.status))}return this},Wt.stop=function(e){for(var n=0;n<Jt.length;n++)Jt[n].el.id!=this.id||e&&Jt[n].anim!=e||!1!==t("raphael.anim.stop."+this.id,this,Jt[n].anim)&&Jt.splice(n--,1);return this},t.on("raphael.remove",v),t.on("raphael.clear",v),Wt.toString=function(){return"Raphaël’s object"};var ne=function(t){if(this.items=[],this.length=0,this.type="set",t)for(var e=0,n=t.length;e<n;e++)!t[e]||t[e].constructor!=Wt.constructor&&t[e].constructor!=ne||(this[this.items.length]=this.items[this.items.length]=t[e],this.length++)},ie=ne.prototype;ie.push=function(){for(var t,e,n=0,i=arguments.length;n<i;n++)!(t=arguments[n])||t.constructor!=Wt.constructor&&t.constructor!=ne||(e=this.items.length,this[e]=this.items[e]=t,this.length++);return this},ie.pop=function(){return this.length&&delete this[this.length--],this.items.pop()},ie.forEach=function(t,e){for(var n=0,i=this.items.length;n<i;n++)if(!1===t.call(e,this.items[n],n))return this;return this};for(var re in Wt)Wt[_](re)&&(ie[re]=function(t){return function(){var e=arguments;return this.forEach(function(n){n[t][S](n,e)})}}(re));return ie.attr=function(t,n){if(t&&e.is(t,z)&&e.is(t[0],"object"))for(var i=0,r=t.length;i<r;i++)this.items[i].attr(t[i]);else for(var o=0,s=this.items.length;o<s;o++)this.items[o].attr(t,n);return this},ie.clear=function(){for(;this.length;)this.pop()},ie.splice=function(t,e,n){t=t<0?P(this.length+t,0):t,e=P(0,H(this.length-t,e));var i,r=[],o=[],s=[];for(i=2;i<arguments.length;i++)s.push(arguments[i]);for(i=0;i<e;i++)o.push(this[t+i]);for(;i<this.length-t;i++)r.push(this[t+i]);var a=s.length;for(i=0;i<a+r.length;i++)this.items[t+i]=this[t+i]=i<a?s[i]:r[i-a];for(i=this.items.length=this.length-=e-a;this[i];)delete this[i++];return new ne(o)},ie.exclude=function(t){for(var e=0,n=this.length;e<n;e++)if(this[e]==t)return this.splice(e,1),!0},ie.animate=function(t,n,i,r){(e.is(i,"function")||!i)&&(r=i||null);var o,s,a=this.items.length,l=a,u=this;if(!a)return this;r&&(s=function(){!--a&&r.call(u)}),i=e.is(i,"string")?i:s;var h=e.animation(t,n,i,s);for(o=this.items[--l].animate(h);l--;)this.items[l]&&!this.items[l].removed&&this.items[l].animateWith(o,h,h),this.items[l]&&!this.items[l].removed||a--;return this},ie.insertAfter=function(t){for(var e=this.items.length;e--;)this.items[e].insertAfter(t);return this},ie.getBBox=function(){for(var t=[],e=[],n=[],i=[],r=this.items.length;r--;)if(!this.items[r].removed){var o=this.items[r].getBBox();t.push(o.x),e.push(o.y),n.push(o.x+o.width),i.push(o.y+o.height)}return t=H[S](0,t),e=H[S](0,e),n=P[S](0,n),i=P[S](0,i),{x:t,y:e,x2:n,y2:i,width:n-t,height:i-e}},ie.clone=function(t){t=this.paper.set();for(var e=0,n=this.items.length;e<n;e++)t.push(this.items[e].clone());return t},ie.toString=function(){return"Raphaël‘s set"},ie.glow=function(t){var e=this.paper.set();return this.forEach(function(n,i){var r=n.glow(t);null!=r&&r.forEach(function(t,n){e.push(t)})}),e},ie.isPointInside=function(t,e){var n=!1;return this.forEach(function(i){if(i.isPointInside(t,e))return n=!0,!1}),n},e.registerFont=function(t){if(!t.face)return t;this.fonts=this.fonts||{};var e={w:t.w,face:{},glyphs:{}},n=t.face["font-family"];for(var i in t.face)t.face[_](i)&&(e.face[i]=t.face[i]);if(this.fonts[n]?this.fonts[n].push(e):this.fonts[n]=[e],!t.svg){e.face["units-per-em"]=U(t.face["units-per-em"],10);for(var r in t.glyphs)if(t.glyphs[_](r)){var o=t.glyphs[r];if(e.glyphs[r]={w:o.w,k:{},d:o.d&&"M"+o.d.replace(/[mlcxtrv]/g,function(t){return{l:"L",c:"C",x:"z",t:"m",r:"l",v:"c"}[t]||"M"})+"z"},o.k)for(var s in o.k)o[_](s)&&(e.glyphs[r].k[s]=o.k[s])}}return t},m.getFont=function(t,n,i,r){if(r=r||"normal",i=i||"normal",n=+n||{normal:400,bold:700,lighter:300,bolder:800}[n]||400,e.fonts){var o=e.fonts[t];if(!o){var s=new RegExp("(^|\\s)"+t.replace(/[^\w\d\s+!~.:_-]/g,"")+"(\\s|$)","i");for(var a in e.fonts)if(e.fonts[_](a)&&s.test(a)){o=e.fonts[a];break}}var l;if(o)for(var u=0,h=o.length;u<h&&((l=o[u]).face["font-weight"]!=n||l.face["font-style"]!=i&&l.face["font-style"]||l.face["font-stretch"]!=r);u++);return l}},m.print=function(t,n,i,r,o,s,a,l){s=s||"middle",a=P(H(a||0,1),-1),l=P(H(l||1,3),1);var u,h=M(i)[F](""),c=0,f=0,p="";if(e.is(r,"string")&&(r=this.getFont(r)),r){u=(o||16)/r.face["units-per-em"];for(var d=r.face.bbox[F](x),g=+d[0],v=d[3]-d[1],y=0,m=+d[1]+("baseline"==s?v+ +r.face.descent:v/2),b=0,w=h.length;b<w;b++){if("\n"==h[b])c=0,k=0,f=0,y+=v*l;else{var _=f&&r.glyphs[h[b-1]]||{},k=r.glyphs[h[b]];c+=f?(_.w||r.w)+(_.k&&_.k[h[b]]||0)+r.w*a:0,f=1}k&&k.d&&(p+=e.transformPath(k.d,["t",c*u,y*u,"s",u,u,g,m,"t",(t-g)/u,(n-m)/u]))}}return this.path(p).attr({fill:"#000",stroke:"none"})},m.add=function(t){if(e.is(t,"array"))for(var n,i=this.set(),r=0,o=t.length;r<o;r++)n=t[r]||{},b[_](n.type)&&i.push(this[n.type]().attr(n));return i},e.format=function(t,n){var i=e.is(n,z)?[0][A](n):arguments;return t&&e.is(t,"string")&&i.length-1&&(t=t.replace(w,function(t,e){return null==i[++e]?"":i[e]})),t||""},e.fullfill=function(){var t=/\{([^\}]+)\}/g,e=/(?:(?:^|\.)(.+?)(?=\[|\.|$|\()|\[('|")(.+?)\2\])(\(\))?/g;return function(n,i){return String(n).replace(t,function(t,n){return function(t,n,i){var r=i;return n.replace(e,function(t,e,n,i,o){e=e||i,r&&(e in r&&(r=r[e]),"function"==typeof r&&o&&(r=r()))}),r=(null==r||r==i?t:r)+""}(t,n,i)})}}(),e.ninja=function(){if(C.was)k.win.Raphael=C.is;else{window.Raphael=void 0;try{delete window.Raphael}catch(t){}}return e},e.st=ie,t.on("raphael.DOMload",function(){y=!0}),function(t,n,i){function r(){/in/.test(t.readyState)?setTimeout(r,9):e.eve("raphael.DOMload")}null==t.readyState&&t.addEventListener&&(t.addEventListener("DOMContentLoaded",i=function(){t.removeEventListener("DOMContentLoaded",i,!1),t.readyState="complete"},!1),t.readyState="loading"),r()}(document),e}.apply(e,i))||(t.exports=r)},function(t,e,n){var i,r;!function(n){var o,s,a="hasOwnProperty",l=/[\.\/]/,u=/\s*,\s*/,h=function(t,e){return t-e},c={n:{}},f=function(){for(var t=0,e=this.length;t<e;t++)if(void 0!==this[t])return this[t]},p=function(){for(var t=this.length;--t;)if(void 0!==this[t])return this[t]},d=Object.prototype.toString,g=String,v=Array.isArray||function(t){return t instanceof Array||"[object Array]"==d.call(t)};eve=function(t,e){var n,i=s,r=Array.prototype.slice.call(arguments,2),a=eve.listeners(t),l=0,u=[],c={},d=[],g=o;d.firstDefined=f,d.lastDefined=p,o=t,s=0;for(var v=0,y=a.length;v<y;v++)"zIndex"in a[v]&&(u.push(a[v].zIndex),a[v].zIndex<0&&(c[a[v].zIndex]=a[v]));for(u.sort(h);u[l]<0;)if(n=c[u[l++]],d.push(n.apply(e,r)),s)return s=i,d;for(v=0;v<y;v++)if("zIndex"in(n=a[v]))if(n.zIndex==u[l]){if(d.push(n.apply(e,r)),s)break;do{if(l++,(n=c[u[l]])&&d.push(n.apply(e,r)),s)break}while(n)}else c[n.zIndex]=n;else if(d.push(n.apply(e,r)),s)break;return s=i,o=g,d},eve._events=c,eve.listeners=function(t){var e,n,i,r,o,s,a,u,h=v(t)?t:t.split(l),f=c,p=[f],d=[];for(r=0,o=h.length;r<o;r++){for(u=[],s=0,a=p.length;s<a;s++)for(f=p[s].n,n=[f[h[r]],f["*"]],i=2;i--;)(e=n[i])&&(u.push(e),d=d.concat(e.f||[]));p=u}return d},eve.separator=function(t){t?(t=g(t).replace(/(?=[\.\^\]\[\-])/g,"\\"),t="["+t+"]",l=new RegExp(t)):l=/[\.\/]/},eve.on=function(t,e){if("function"!=typeof e)return function(){};for(var n=v(t)?v(t[0])?t:[t]:g(t).split(u),i=0,r=n.length;i<r;i++)!function(t){for(var n,i=v(t)?t:g(t).split(l),r=c,o=0,s=i.length;o<s;o++)r=r.n,r=r.hasOwnProperty(i[o])&&r[i[o]]||(r[i[o]]={n:{}});for(r.f=r.f||[],o=0,s=r.f.length;o<s;o++)if(r.f[o]==e){n=!0;break}!n&&r.f.push(e)}(n[i]);return function(t){+t==+t&&(e.zIndex=+t)}},eve.f=function(t){var e=[].slice.call(arguments,1);return function(){eve.apply(null,[t,null].concat(e).concat([].slice.call(arguments,0)))}},eve.stop=function(){s=1},eve.nt=function(t){var e=v(o)?o.join("."):o;return t?new RegExp("(?:\\.|\\/|^)"+t+"(?:\\.|\\/|$)").test(e):e},eve.nts=function(){return v(o)?o:o.split(l)},eve.off=eve.unbind=function(t,e){if(t){var n=v(t)?v(t[0])?t:[t]:g(t).split(u);if(n.length>1)for(var i=0,r=n.length;i<r;i++)eve.off(n[i],e);else{n=v(t)?t:g(t).split(l);var o,s,h,f,p,d=[c];for(i=0,r=n.length;i<r;i++)for(f=0;f<d.length;f+=h.length-2){if(h=[f,1],o=d[f].n,"*"!=n[i])o[n[i]]&&h.push(o[n[i]]);else for(s in o)o[a](s)&&h.push(o[s]);d.splice.apply(d,h)}for(i=0,r=d.length;i<r;i++)for(o=d[i];o.n;){if(e){if(o.f){for(f=0,p=o.f.length;f<p;f++)if(o.f[f]==e){o.f.splice(f,1);break}!o.f.length&&delete o.f}for(s in o.n)if(o.n[a](s)&&o.n[s].f){var y=o.n[s].f;for(f=0,p=y.length;f<p;f++)if(y[f]==e){y.splice(f,1);break}!y.length&&delete o.n[s].f}}else{delete o.f;for(s in o.n)o.n[a](s)&&o.n[s].f&&delete o.n[s].f}o=o.n}}}else eve._events=c={n:{}}},eve.once=function(t,e){var n=function(){return eve.off(t,n),e.apply(this,arguments)};return eve.on(t,n)},eve.version="0.5.0",eve.toString=function(){return"You are running Eve 0.5.0"},void 0!==t&&t.exports?t.exports=eve:(i=[],void 0===(r=function(){return eve}.apply(e,i))||(t.exports=r))}()},function(t,e,n){var i,r;i=[n(1)],void 0===(r=function(t){if(!t||t.svg){var e="hasOwnProperty",n=String,i=parseFloat,r=parseInt,o=Math,s=o.max,a=o.abs,l=o.pow,u=/[, ]+/,h=t.eve,c="http://www.w3.org/1999/xlink",f={block:"M5,0 0,2.5 5,5z",classic:"M5,0 0,2.5 5,5 3.5,3 3.5,2z",diamond:"M2.5,0 5,2.5 2.5,5 0,2.5z",open:"M6,1 1,3.5 6,6",oval:"M2.5,0A2.5,2.5,0,0,1,2.5,5 2.5,2.5,0,0,1,2.5,0z"},p={};t.toString=function(){return"Your browser supports SVG.\nYou are running Raphaël "+this.version};var d=function(i,r){if(r){"string"==typeof i&&(i=d(i));for(var o in r)r[e](o)&&("xlink:"==o.substring(0,6)?i.setAttributeNS(c,o.substring(6),n(r[o])):i.setAttribute(o,n(r[o])))}else(i=t._g.doc.createElementNS("http://www.w3.org/2000/svg",i)).style&&(i.style.webkitTapHighlightColor="rgba(0,0,0,0)");return i},g=function(e,r){var u="linear",h=e.id+r,c=.5,f=.5,p=e.node,g=e.paper,y=p.style,m=t._g.doc.getElementById(h);if(!m){if(r=n(r).replace(t._radial_gradient,function(t,e,n){if(u="radial",e&&n){c=i(e);var r=2*((f=i(n))>.5)-1;l(c-.5,2)+l(f-.5,2)>.25&&(f=o.sqrt(.25-l(c-.5,2))*r+.5)&&.5!=f&&(f=f.toFixed(5)-1e-5*r)}return""}),r=r.split(/\s*\-\s*/),"linear"==u){var x=r.shift();if(x=-i(x),isNaN(x))return null;var b=[0,0,o.cos(t.rad(x)),o.sin(t.rad(x))],w=1/(s(a(b[2]),a(b[3]))||1);b[2]*=w,b[3]*=w,b[2]<0&&(b[0]=-b[2],b[2]=0),b[3]<0&&(b[1]=-b[3],b[3]=0)}var _=t._parseDots(r);if(!_)return null;if(h=h.replace(/[\(\)\s,\xb0#]/g,"_"),e.gradient&&h!=e.gradient.id&&(g.defs.removeChild(e.gradient),delete e.gradient),!e.gradient){m=d(u+"Gradient",{id:h}),e.gradient=m,d(m,"radial"==u?{fx:c,fy:f}:{x1:b[0],y1:b[1],x2:b[2],y2:b[3],gradientTransform:e.matrix.invert()}),g.defs.appendChild(m);for(var k=0,C=_.length;k<C;k++)m.appendChild(d("stop",{offset:_[k].offset?_[k].offset:k?"100%":"0%","stop-color":_[k].color||"#fff","stop-opacity":isFinite(_[k].opacity)?_[k].opacity:1}))}}return d(p,{fill:v(h),opacity:1,"fill-opacity":1}),y.fill="",y.opacity=1,y.fillOpacity=1,1},v=function(t){if(function(){var t=document.documentMode;return t&&(9===t||10===t)}())return"url('#"+t+"')";var e=document.location;return"url('"+e.protocol+"//"+e.host+e.pathname+e.search+"#"+t+"')"},y=function(t){var e=t.getBBox(1);d(t.pattern,{patternTransform:t.matrix.invert()+" translate("+e.x+","+e.y+")"})},m=function(i,r,o){if("path"==i.type){for(var s,a,l,u,h,c=n(r).toLowerCase().split("-"),g=i.paper,v=o?"end":"start",y=i.node,m=i.attrs,x=m["stroke-width"],b=c.length,w="classic",_=3,k=3,C=5;b--;)switch(c[b]){case"block":case"classic":case"oval":case"diamond":case"open":case"none":w=c[b];break;case"wide":k=5;break;case"narrow":k=2;break;case"long":_=5;break;case"short":_=2}if("open"==w?(_+=2,k+=2,C+=2,l=1,u=o?4:1,h={fill:"none",stroke:m.stroke}):(u=l=_/2,h={fill:m.stroke,stroke:"none"}),i._.arrows?o?(i._.arrows.endPath&&p[i._.arrows.endPath]--,i._.arrows.endMarker&&p[i._.arrows.endMarker]--):(i._.arrows.startPath&&p[i._.arrows.startPath]--,i._.arrows.startMarker&&p[i._.arrows.startMarker]--):i._.arrows={},"none"!=w){var T="raphael-marker-"+w,S="raphael-marker-"+v+w+_+k+"-obj"+i.id;t._g.doc.getElementById(T)?p[T]++:(g.defs.appendChild(d(d("path"),{"stroke-linecap":"round",d:f[w],id:T})),p[T]=1);var A,L=t._g.doc.getElementById(S);L?(p[S]++,A=L.getElementsByTagName("use")[0]):(L=d(d("marker"),{id:S,markerHeight:k,markerWidth:_,orient:"auto",refX:u,refY:k/2}),A=d(d("use"),{"xlink:href":"#"+T,transform:(o?"rotate(180 "+_/2+" "+k/2+") ":"")+"scale("+_/C+","+k/C+")","stroke-width":(1/((_/C+k/C)/2)).toFixed(4)}),L.appendChild(A),g.defs.appendChild(L),p[S]=1),d(A,h);var E=l*("diamond"!=w&&"oval"!=w);o?(s=i._.arrows.startdx*x||0,a=t.getTotalLength(m.path)-E*x):(s=E*x,a=t.getTotalLength(m.path)-(i._.arrows.enddx*x||0)),(h={})["marker-"+v]="url(#"+S+")",(a||s)&&(h.d=t.getSubpath(m.path,s,a)),d(y,h),i._.arrows[v+"Path"]=T,i._.arrows[v+"Marker"]=S,i._.arrows[v+"dx"]=E,i._.arrows[v+"Type"]=w,i._.arrows[v+"String"]=r}else o?(s=i._.arrows.startdx*x||0,a=t.getTotalLength(m.path)-s):(s=0,a=t.getTotalLength(m.path)-(i._.arrows.enddx*x||0)),i._.arrows[v+"Path"]&&d(y,{d:t.getSubpath(m.path,s,a)}),delete i._.arrows[v+"Path"],delete i._.arrows[v+"Marker"],delete i._.arrows[v+"dx"],delete i._.arrows[v+"Type"],delete i._.arrows[v+"String"];for(h in p)if(p[e](h)&&!p[h]){var M=t._g.doc.getElementById(h);M&&M.parentNode.removeChild(M)}}},x={"-":[3,1],".":[1,1],"-.":[3,1,1,1],"-..":[3,1,1,1,1,1],". ":[1,3],"- ":[4,3],"--":[8,3],"- .":[4,3,1,3],"--.":[8,3,1,3],"--..":[8,3,1,3,1,3]},b=function(t,e,i){if(e=x[n(e).toLowerCase()]){for(var r=t.attrs["stroke-width"]||"1",o={round:r,square:r,butt:0}[t.attrs["stroke-linecap"]||i["stroke-linecap"]]||0,s=[],a=e.length;a--;)s[a]=e[a]*r+(a%2?1:-1)*o;d(t.node,{"stroke-dasharray":s.join(",")})}else d(t.node,{"stroke-dasharray":"none"})},w=function(i,o){var l=i.node,h=i.attrs,f=l.style.visibility;l.style.visibility="hidden";for(var p in o)if(o[e](p)){if(!t._availableAttrs[e](p))continue;var v=o[p];switch(h[p]=v,p){case"blur":i.blur(v);break;case"title":var x=l.getElementsByTagName("title");if(x.length&&(x=x[0]))x.firstChild.nodeValue=v;else{x=d("title");var w=t._g.doc.createTextNode(v);x.appendChild(w),l.appendChild(x)}break;case"href":case"target":var k=l.parentNode;if("a"!=k.tagName.toLowerCase()){var C=d("a");k.insertBefore(C,l),C.appendChild(l),k=C}"target"==p?k.setAttributeNS(c,"show","blank"==v?"new":v):k.setAttributeNS(c,p,v);break;case"cursor":l.style.cursor=v;break;case"transform":i.transform(v);break;case"arrow-start":m(i,v);break;case"arrow-end":m(i,v,1);break;case"clip-rect":var T=n(v).split(u);if(4==T.length){i.clip&&i.clip.parentNode.parentNode.removeChild(i.clip.parentNode);var S=d("clipPath"),A=d("rect");S.id=t.createUUID(),d(A,{x:T[0],y:T[1],width:T[2],height:T[3]}),S.appendChild(A),i.paper.defs.appendChild(S),d(l,{"clip-path":"url(#"+S.id+")"}),i.clip=A}if(!v){var L=l.getAttribute("clip-path");if(L){var E=t._g.doc.getElementById(L.replace(/(^url\(#|\)$)/g,""));E&&E.parentNode.removeChild(E),d(l,{"clip-path":""}),delete i.clip}}break;case"path":"path"==i.type&&(d(l,{d:v?h.path=t._pathToAbsolute(v):"M0,0"}),i._.dirty=1,i._.arrows&&("startString"in i._.arrows&&m(i,i._.arrows.startString),"endString"in i._.arrows&&m(i,i._.arrows.endString,1)));break;case"width":if(l.setAttribute(p,v),i._.dirty=1,!h.fx)break;p="x",v=h.x;case"x":h.fx&&(v=-h.x-(h.width||0));case"rx":if("rx"==p&&"rect"==i.type)break;case"cx":l.setAttribute(p,v),i.pattern&&y(i),i._.dirty=1;break;case"height":if(l.setAttribute(p,v),i._.dirty=1,!h.fy)break;p="y",v=h.y;case"y":h.fy&&(v=-h.y-(h.height||0));case"ry":if("ry"==p&&"rect"==i.type)break;case"cy":l.setAttribute(p,v),i.pattern&&y(i),i._.dirty=1;break;case"r":"rect"==i.type?d(l,{rx:v,ry:v}):l.setAttribute(p,v),i._.dirty=1;break;case"src":"image"==i.type&&l.setAttributeNS(c,"href",v);break;case"stroke-width":1==i._.sx&&1==i._.sy||(v/=s(a(i._.sx),a(i._.sy))||1),l.setAttribute(p,v),h["stroke-dasharray"]&&b(i,h["stroke-dasharray"],o),i._.arrows&&("startString"in i._.arrows&&m(i,i._.arrows.startString),"endString"in i._.arrows&&m(i,i._.arrows.endString,1));break;case"stroke-dasharray":b(i,v,o);break;case"fill":var M=n(v).match(t._ISURL);if(M){S=d("pattern");var F=d("image");S.id=t.createUUID(),d(S,{x:0,y:0,patternUnits:"userSpaceOnUse",height:1,width:1}),d(F,{x:0,y:0,"xlink:href":M[1]}),S.appendChild(F),function(e){t._preload(M[1],function(){var t=this.offsetWidth,n=this.offsetHeight;d(e,{width:t,height:n}),d(F,{width:t,height:n})})}(S),i.paper.defs.appendChild(S),d(l,{fill:"url(#"+S.id+")"}),i.pattern=S,i.pattern&&y(i);break}var B=t.getRGB(v);if(B.error){if(("circle"==i.type||"ellipse"==i.type||"r"!=n(v).charAt())&&g(i,v)){if("opacity"in h||"fill-opacity"in h){var D=t._g.doc.getElementById(l.getAttribute("fill").replace(/^url\(#|\)$/g,""));if(D){var N=D.getElementsByTagName("stop");d(N[N.length-1],{"stop-opacity":("opacity"in h?h.opacity:1)*("fill-opacity"in h?h["fill-opacity"]:1)})}}h.gradient=v,h.fill="none";break}}else delete o.gradient,delete h.gradient,!t.is(h.opacity,"undefined")&&t.is(o.opacity,"undefined")&&d(l,{opacity:h.opacity}),!t.is(h["fill-opacity"],"undefined")&&t.is(o["fill-opacity"],"undefined")&&d(l,{"fill-opacity":h["fill-opacity"]});B[e]("opacity")&&d(l,{"fill-opacity":B.opacity>1?B.opacity/100:B.opacity});case"stroke":B=t.getRGB(v),l.setAttribute(p,B.hex),"stroke"==p&&B[e]("opacity")&&d(l,{"stroke-opacity":B.opacity>1?B.opacity/100:B.opacity}),"stroke"==p&&i._.arrows&&("startString"in i._.arrows&&m(i,i._.arrows.startString),"endString"in i._.arrows&&m(i,i._.arrows.endString,1));break;case"gradient":("circle"==i.type||"ellipse"==i.type||"r"!=n(v).charAt())&&g(i,v);break;case"opacity":h.gradient&&!h[e]("stroke-opacity")&&d(l,{"stroke-opacity":v>1?v/100:v});case"fill-opacity":if(h.gradient){(D=t._g.doc.getElementById(l.getAttribute("fill").replace(/^url\(#|\)$/g,"")))&&(N=D.getElementsByTagName("stop"),d(N[N.length-1],{"stop-opacity":v}));break}default:"font-size"==p&&(v=r(v,10)+"px");var j=p.replace(/(\-.)/g,function(t){return t.substring(1).toUpperCase()});l.style[j]=v,i._.dirty=1,l.setAttribute(p,v)}}_(i,o),l.style.visibility=f},_=function(i,o){if("text"==i.type&&(o[e]("text")||o[e]("font")||o[e]("font-size")||o[e]("x")||o[e]("y"))){var s=i.attrs,a=i.node,l=a.firstChild?r(t._g.doc.defaultView.getComputedStyle(a.firstChild,"").getPropertyValue("font-size"),10):10;if(o[e]("text")){for(s.text=o.text;a.firstChild;)a.removeChild(a.firstChild);for(var u,h=n(o.text).split("\n"),c=[],f=0,p=h.length;f<p;f++)u=d("tspan"),f&&d(u,{dy:1.2*l,x:s.x}),u.appendChild(t._g.doc.createTextNode(h[f])),a.appendChild(u),c[f]=u}else for(c=a.getElementsByTagName("tspan"),f=0,p=c.length;f<p;f++)f?d(c[f],{dy:1.2*l,x:s.x}):d(c[0],{dy:0});d(a,{x:s.x,y:s.y}),i._.dirty=1;var g=i._getBBox(),v=s.y-(g.y+g.height/2);v&&t.is(v,"finite")&&d(c[0],{dy:v})}},k=function(t){return t.parentNode&&"a"===t.parentNode.tagName.toLowerCase()?t.parentNode:t},C=function(e,n){this[0]=this.node=e,e.raphael=!0,this.id=("0000"+(Math.random()*Math.pow(36,5)<<0).toString(36)).slice(-5),e.raphaelid=this.id,this.matrix=t.matrix(),this.realPath=null,this.paper=n,this.attrs=this.attrs||{},this._={transform:[],sx:1,sy:1,deg:0,dx:0,dy:0,dirty:1},!n.bottom&&(n.bottom=this),this.prev=n.top,n.top&&(n.top.next=this),n.top=this,this.next=null},T=t.el;C.prototype=T,T.constructor=C,t._engine.path=function(t,e){var n=d("path");e.canvas&&e.canvas.appendChild(n);var i=new C(n,e);return i.type="path",w(i,{fill:"none",stroke:"#000",path:t}),i},T.rotate=function(t,e,r){if(this.removed)return this;if((t=n(t).split(u)).length-1&&(e=i(t[1]),r=i(t[2])),t=i(t[0]),null==r&&(e=r),null==e||null==r){var o=this.getBBox(1);e=o.x+o.width/2,r=o.y+o.height/2}return this.transform(this._.transform.concat([["r",t,e,r]])),this},T.scale=function(t,e,r,o){if(this.removed)return this;if((t=n(t).split(u)).length-1&&(e=i(t[1]),r=i(t[2]),o=i(t[3])),t=i(t[0]),null==e&&(e=t),null==o&&(r=o),null==r||null==o)var s=this.getBBox(1);return r=null==r?s.x+s.width/2:r,o=null==o?s.y+s.height/2:o,this.transform(this._.transform.concat([["s",t,e,r,o]])),this},T.translate=function(t,e){return this.removed?this:((t=n(t).split(u)).length-1&&(e=i(t[1])),t=i(t[0])||0,e=+e||0,this.transform(this._.transform.concat([["t",t,e]])),this)},T.transform=function(n){var i=this._;if(null==n)return i.transform;if(t._extractTransform(this,n),this.clip&&d(this.clip,{transform:this.matrix.invert()}),this.pattern&&y(this),this.node&&d(this.node,{transform:this.matrix}),1!=i.sx||1!=i.sy){var r=this.attrs[e]("stroke-width")?this.attrs["stroke-width"]:1;this.attr({"stroke-width":r})}return this},T.hide=function(){return this.removed||(this.node.style.display="none"),this},T.show=function(){return this.removed||(this.node.style.display=""),this},T.remove=function(){var e=k(this.node);if(!this.removed&&e.parentNode){var n=this.paper;n.__set__&&n.__set__.exclude(this),h.unbind("raphael.*.*."+this.id),this.gradient&&n.defs.removeChild(this.gradient),t._tear(this,n),e.parentNode.removeChild(e),this.removeData();for(var i in this)this[i]="function"==typeof this[i]?t._removedFactory(i):null;this.removed=!0}},T._getBBox=function(){if("none"==this.node.style.display){this.show();var t=!0}var e,n=!1;this.paper.canvas.parentElement?e=this.paper.canvas.parentElement.style:this.paper.canvas.parentNode&&(e=this.paper.canvas.parentNode.style),e&&"none"==e.display&&(n=!0,e.display="");var i={};try{i=this.node.getBBox()}catch(t){i={x:this.node.clientLeft,y:this.node.clientTop,width:this.node.clientWidth,height:this.node.clientHeight}}finally{i=i||{},n&&(e.display="none")}return t&&this.hide(),i},T.attr=function(n,i){if(this.removed)return this;if(null==n){var r={};for(var o in this.attrs)this.attrs[e](o)&&(r[o]=this.attrs[o]);return r.gradient&&"none"==r.fill&&(r.fill=r.gradient)&&delete r.gradient,r.transform=this._.transform,r}if(null==i&&t.is(n,"string")){if("fill"==n&&"none"==this.attrs.fill&&this.attrs.gradient)return this.attrs.gradient;if("transform"==n)return this._.transform;for(var s=n.split(u),a={},l=0,c=s.length;l<c;l++)(n=s[l])in this.attrs?a[n]=this.attrs[n]:t.is(this.paper.customAttributes[n],"function")?a[n]=this.paper.customAttributes[n].def:a[n]=t._availableAttrs[n];return c-1?a:a[s[0]]}if(null==i&&t.is(n,"array")){for(a={},l=0,c=n.length;l<c;l++)a[n[l]]=this.attr(n[l]);return a}if(null!=i){var f={};f[n]=i}else null!=n&&t.is(n,"object")&&(f=n);for(var p in f)h("raphael.attr."+p+"."+this.id,this,f[p]);for(p in this.paper.customAttributes)if(this.paper.customAttributes[e](p)&&f[e](p)&&t.is(this.paper.customAttributes[p],"function")){var d=this.paper.customAttributes[p].apply(this,[].concat(f[p]));this.attrs[p]=f[p];for(var g in d)d[e](g)&&(f[g]=d[g])}return w(this,f),this},T.toFront=function(){if(this.removed)return this;var e=k(this.node);e.parentNode.appendChild(e);var n=this.paper;return n.top!=this&&t._tofront(this,n),this},T.toBack=function(){if(this.removed)return this;var e=k(this.node),n=e.parentNode;return n.insertBefore(e,n.firstChild),t._toback(this,this.paper),this.paper,this},T.insertAfter=function(e){if(this.removed||!e)return this;var n=k(this.node),i=k(e.node||e[e.length-1].node);return i.nextSibling?i.parentNode.insertBefore(n,i.nextSibling):i.parentNode.appendChild(n),t._insertafter(this,e,this.paper),this},T.insertBefore=function(e){if(this.removed||!e)return this;var n=k(this.node),i=k(e.node||e[0].node);return i.parentNode.insertBefore(n,i),t._insertbefore(this,e,this.paper),this},T.blur=function(e){if(0!=+e){var n=d("filter"),i=d("feGaussianBlur");this.attrs.blur=e,n.id=t.createUUID(),d(i,{stdDeviation:+e||1.5}),n.appendChild(i),this.paper.defs.appendChild(n),this._blur=n,d(this.node,{filter:"url(#"+n.id+")"})}else this._blur&&(this._blur.parentNode.removeChild(this._blur),delete this._blur,delete this.attrs.blur),this.node.removeAttribute("filter");return this},t._engine.circle=function(t,e,n,i){var r=d("circle");t.canvas&&t.canvas.appendChild(r);var o=new C(r,t);return o.attrs={cx:e,cy:n,r:i,fill:"none",stroke:"#000"},o.type="circle",d(r,o.attrs),o},t._engine.rect=function(t,e,n,i,r,o){var s=d("rect");t.canvas&&t.canvas.appendChild(s);var a=new C(s,t);return a.attrs={x:e,y:n,width:i,height:r,rx:o||0,ry:o||0,fill:"none",stroke:"#000"},a.type="rect",d(s,a.attrs),a},t._engine.ellipse=function(t,e,n,i,r){var o=d("ellipse");t.canvas&&t.canvas.appendChild(o);var s=new C(o,t);return s.attrs={cx:e,cy:n,rx:i,ry:r,fill:"none",stroke:"#000"},s.type="ellipse",d(o,s.attrs),s},t._engine.image=function(t,e,n,i,r,o){var s=d("image");d(s,{x:n,y:i,width:r,height:o,preserveAspectRatio:"none"}),s.setAttributeNS(c,"href",e),t.canvas&&t.canvas.appendChild(s);var a=new C(s,t);return a.attrs={x:n,y:i,width:r,height:o,src:e},a.type="image",a},t._engine.text=function(e,n,i,r){var o=d("text");e.canvas&&e.canvas.appendChild(o);var s=new C(o,e);return s.attrs={x:n,y:i,"text-anchor":"middle",text:r,"font-family":t._availableAttrs["font-family"],"font-size":t._availableAttrs["font-size"],stroke:"none",fill:"#000"},s.type="text",w(s,s.attrs),s},t._engine.setSize=function(t,e){return this.width=t||this.width,this.height=e||this.height,this.canvas.setAttribute("width",this.width),this.canvas.setAttribute("height",this.height),this._viewBox&&this.setViewBox.apply(this,this._viewBox),this},t._engine.create=function(){var e=t._getContainer.apply(0,arguments),n=e&&e.container,i=e.x,r=e.y,o=e.width,s=e.height;if(!n)throw new Error("SVG container not found.");var a,l=d("svg");return i=i||0,r=r||0,o=o||512,s=s||342,d(l,{height:s,version:1.1,width:o,xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink"}),1==n?(l.style.cssText="overflow:hidden;position:absolute;left:"+i+"px;top:"+r+"px",t._g.doc.body.appendChild(l),a=1):(l.style.cssText="overflow:hidden;position:relative",n.firstChild?n.insertBefore(l,n.firstChild):n.appendChild(l)),n=new t._Paper,n.width=o,n.height=s,n.canvas=l,n.clear(),n._left=n._top=0,a&&(n.renderfix=function(){}),n.renderfix(),n},t._engine.setViewBox=function(t,e,n,i,r){h("raphael.setViewBox",this,this._viewBox,[t,e,n,i,r]);var o,a,l=this.getSize(),u=s(n/l.width,i/l.height),c=this.top,f=r?"xMidYMid meet":"xMinYMin";for(null==t?(this._vbSize&&(u=1),delete this._vbSize,o="0 0 "+this.width+" "+this.height):(this._vbSize=u,o=t+" "+e+" "+n+" "+i),d(this.canvas,{viewBox:o,preserveAspectRatio:f});u&&c;)a="stroke-width"in c.attrs?c.attrs["stroke-width"]:1,c.attr({"stroke-width":a}),c._.dirty=1,c._.dirtyT=1,c=c.prev;return this._viewBox=[t,e,n,i,!!r],this},t.prototype.renderfix=function(){var t,e=this.canvas,n=e.style;try{t=e.getScreenCTM()||e.createSVGMatrix()}catch(n){t=e.createSVGMatrix()}var i=-t.e%1,r=-t.f%1;(i||r)&&(i&&(this._left=(this._left+i)%1,n.left=this._left+"px"),r&&(this._top=(this._top+r)%1,n.top=this._top+"px"))},t.prototype.clear=function(){t.eve("raphael.clear",this);for(var e=this.canvas;e.firstChild;)e.removeChild(e.firstChild);this.bottom=this.top=null,(this.desc=d("desc")).appendChild(t._g.doc.createTextNode("Created with Raphaël "+t.version)),e.appendChild(this.desc),e.appendChild(this.defs=d("defs"))},t.prototype.remove=function(){h("raphael.remove",this),this.canvas.parentNode&&this.canvas.parentNode.removeChild(this.canvas);for(var e in this)this[e]="function"==typeof this[e]?t._removedFactory(e):null};var S=t.st;for(var A in T)T[e](A)&&!S[e](A)&&(S[A]=function(t){return function(){var e=arguments;return this.forEach(function(n){n[t].apply(n,e)})}}(A))}}.apply(e,i))||(t.exports=r)},function(t,e,n){var i,r;i=[n(1)],void 0===(r=function(t){if(!t||t.vml){var e="hasOwnProperty",n=String,i=parseFloat,r=Math,o=r.round,s=r.max,a=r.min,l=r.abs,u=/[, ]+/,h=t.eve,c={M:"m",L:"l",C:"c",Z:"x",m:"t",l:"r",c:"v",z:"x"},f=/([clmz]),?([^clmz]*)/gi,p=/ progid:\S+Blur\([^\)]+\)/g,d=/-?[^,\s-]+/g,g="position:absolute;left:0;top:0;width:1px;height:1px;behavior:url(#default#VML)",v={path:1,rect:1,image:1},y={circle:1,ellipse:1},m=function(e,n,i){var r=t.matrix();return r.rotate(-e,.5,.5),{dx:r.x(n,i),dy:r.y(n,i)}},x=function(t,e,n,i,r,o){var s=t._,a=t.matrix,u=s.fillpos,h=t.node,c=h.style,f=1,p="",d=21600/e,g=21600/n;if(c.visibility="hidden",e&&n){if(h.coordsize=l(d)+" "+l(g),c.rotation=o*(e*n<0?-1:1),o){var v=m(o,i,r);i=v.dx,r=v.dy}if(e<0&&(p+="x"),n<0&&(p+=" y")&&(f=-1),c.flip=p,h.coordorigin=i*-d+" "+r*-g,u||s.fillsize){var y=h.getElementsByTagName("fill");y=y&&y[0],h.removeChild(y),u&&(v=m(o,a.x(u[0],u[1]),a.y(u[0],u[1])),y.position=v.dx*f+" "+v.dy*f),s.fillsize&&(y.size=s.fillsize[0]*l(e)+" "+s.fillsize[1]*l(n)),h.appendChild(y)}c.visibility="visible"}};t.toString=function(){return"Your browser doesn’t support SVG. Falling down to VML.\nYou are running Raphaël "+this.version};var b=function(t,e,i){for(var r=n(e).toLowerCase().split("-"),o=i?"end":"start",s=r.length,a="classic",l="medium",u="medium";s--;)switch(r[s]){case"block":case"classic":case"oval":case"diamond":case"open":case"none":a=r[s];break;case"wide":case"narrow":u=r[s];break;case"long":case"short":l=r[s]}var h=t.node.getElementsByTagName("stroke")[0];h[o+"arrow"]=a,h[o+"arrowlength"]=l,h[o+"arrowwidth"]=u},w=function(r,l){r.attrs=r.attrs||{};var h=r.node,p=r.attrs,g=h.style,m=v[r.type]&&(l.x!=p.x||l.y!=p.y||l.width!=p.width||l.height!=p.height||l.cx!=p.cx||l.cy!=p.cy||l.rx!=p.rx||l.ry!=p.ry||l.r!=p.r),w=y[r.type]&&(p.cx!=l.cx||p.cy!=l.cy||p.r!=l.r||p.rx!=l.rx||p.ry!=l.ry),k=r;for(var C in l)l[e](C)&&(p[C]=l[C]);if(m&&(p.path=t._getPath[r.type](r),r._.dirty=1),l.href&&(h.href=l.href),l.title&&(h.title=l.title),l.target&&(h.target=l.target),l.cursor&&(g.cursor=l.cursor),"blur"in l&&r.blur(l.blur),(l.path&&"path"==r.type||m)&&(h.path=function(e){var i=/[ahqstv]/gi,r=t._pathToAbsolute;if(n(e).match(i)&&(r=t._path2curve),i=/[clmz]/g,r==t._pathToAbsolute&&!n(e).match(i)){var s=n(e).replace(f,function(t,e,n){var i=[],r="m"==e.toLowerCase(),s=c[e];return n.replace(d,function(t){r&&2==i.length&&(s+=i+c["m"==e?"l":"L"],i=[]),i.push(o(21600*t))}),s+i});return s}var a,l,u=r(e);s=[];for(var h=0,p=u.length;h<p;h++){a=u[h],"z"==(l=u[h][0].toLowerCase())&&(l="x");for(var g=1,v=a.length;g<v;g++)l+=o(21600*a[g])+(g!=v-1?",":"");s.push(l)}return s.join(" ")}(~n(p.path).toLowerCase().indexOf("r")?t._pathToAbsolute(p.path):p.path),r._.dirty=1,"image"==r.type&&(r._.fillpos=[p.x,p.y],r._.fillsize=[p.width,p.height],x(r,1,1,0,0,0))),"transform"in l&&r.transform(l.transform),w){var S=+p.cx,A=+p.cy,L=+p.rx||+p.r||0,E=+p.ry||+p.r||0;h.path=t.format("ar{0},{1},{2},{3},{4},{1},{4},{1}x",o(21600*(S-L)),o(21600*(A-E)),o(21600*(S+L)),o(21600*(A+E)),o(21600*S)),r._.dirty=1}if("clip-rect"in l){var M=n(l["clip-rect"]).split(u);if(4==M.length){M[2]=+M[2]+ +M[0],M[3]=+M[3]+ +M[1];var F=h.clipRect||t._g.doc.createElement("div"),B=F.style;B.clip=t.format("rect({1}px {2}px {3}px {0}px)",M),h.clipRect||(B.position="absolute",B.top=0,B.left=0,B.width=r.paper.width+"px",B.height=r.paper.height+"px",h.parentNode.insertBefore(F,h),F.appendChild(h),h.clipRect=F)}l["clip-rect"]||h.clipRect&&(h.clipRect.style.clip="auto")}if(r.textpath){var D=r.textpath.style;l.font&&(D.font=l.font),l["font-family"]&&(D.fontFamily='"'+l["font-family"].split(",")[0].replace(/^['"]+|['"]+$/g,"")+'"'),l["font-size"]&&(D.fontSize=l["font-size"]),l["font-weight"]&&(D.fontWeight=l["font-weight"]),l["font-style"]&&(D.fontStyle=l["font-style"])}if("arrow-start"in l&&b(k,l["arrow-start"]),"arrow-end"in l&&b(k,l["arrow-end"],1),null!=l.opacity||null!=l.fill||null!=l.src||null!=l.stroke||null!=l["stroke-width"]||null!=l["stroke-opacity"]||null!=l["fill-opacity"]||null!=l["stroke-dasharray"]||null!=l["stroke-miterlimit"]||null!=l["stroke-linejoin"]||null!=l["stroke-linecap"]){var N=h.getElementsByTagName("fill");if(!(N=N&&N[0])&&(N=T("fill")),"image"==r.type&&l.src&&(N.src=l.src),l.fill&&(N.on=!0),null!=N.on&&"none"!=l.fill&&null!==l.fill||(N.on=!1),N.on&&l.fill){var j=n(l.fill).match(t._ISURL);if(j){N.parentNode==h&&h.removeChild(N),N.rotate=!0,N.src=j[1],N.type="tile";var P=r.getBBox(1);N.position=P.x+" "+P.y,r._.fillpos=[P.x,P.y],t._preload(j[1],function(){r._.fillsize=[this.offsetWidth,this.offsetHeight]})}else N.color=t.getRGB(l.fill).hex,N.src="",N.type="solid",t.getRGB(l.fill).error&&(k.type in{circle:1,ellipse:1}||"r"!=n(l.fill).charAt())&&_(k,l.fill,N)&&(p.fill="none",p.gradient=l.fill,N.rotate=!1)}if("fill-opacity"in l||"opacity"in l){var H=((+p["fill-opacity"]+1||2)-1)*((+p.opacity+1||2)-1)*((+t.getRGB(l.fill).o+1||2)-1);H=a(s(H,0),1),N.opacity=H,N.src&&(N.color="none")}h.appendChild(N);var I=h.getElementsByTagName("stroke")&&h.getElementsByTagName("stroke")[0],q=!1;!I&&(q=I=T("stroke")),(l.stroke&&"none"!=l.stroke||l["stroke-width"]||null!=l["stroke-opacity"]||l["stroke-dasharray"]||l["stroke-miterlimit"]||l["stroke-linejoin"]||l["stroke-linecap"])&&(I.on=!0),("none"==l.stroke||null===l.stroke||null==I.on||0==l.stroke||0==l["stroke-width"])&&(I.on=!1);var R=t.getRGB(l.stroke);I.on&&l.stroke&&(I.color=R.hex),H=((+p["stroke-opacity"]+1||2)-1)*((+p.opacity+1||2)-1)*((+R.o+1||2)-1);var O=.75*(i(l["stroke-width"])||1);if(H=a(s(H,0),1),null==l["stroke-width"]&&(O=p["stroke-width"]),l["stroke-width"]&&(I.weight=O),O&&O<1&&(H*=O)&&(I.weight=1),I.opacity=H,l["stroke-linejoin"]&&(I.joinstyle=l["stroke-linejoin"]||"miter"),I.miterlimit=l["stroke-miterlimit"]||8,l["stroke-linecap"]&&(I.endcap="butt"==l["stroke-linecap"]?"flat":"square"==l["stroke-linecap"]?"square":"round"),"stroke-dasharray"in l){var z={"-":"shortdash",".":"shortdot","-.":"shortdashdot","-..":"shortdashdotdot",". ":"dot","- ":"dash","--":"longdash","- .":"dashdot","--.":"longdashdot","--..":"longdashdotdot"};I.dashstyle=z[e](l["stroke-dasharray"])?z[l["stroke-dasharray"]]:""}q&&h.appendChild(I)}if("text"==k.type){k.paper.canvas.style.display="";var W=k.paper.span,$=p.font&&p.font.match(/\d+(?:\.\d*)?(?=px)/);g=W.style,p.font&&(g.font=p.font),p["font-family"]&&(g.fontFamily=p["font-family"]),p["font-weight"]&&(g.fontWeight=p["font-weight"]),p["font-style"]&&(g.fontStyle=p["font-style"]),$=i(p["font-size"]||$&&$[0])||10,g.fontSize=100*$+"px",k.textpath.string&&(W.innerHTML=n(k.textpath.string).replace(/</g,"&#60;").replace(/&/g,"&#38;").replace(/\n/g,"<br>"));var G=W.getBoundingClientRect();k.W=p.w=(G.right-G.left)/100,k.H=p.h=(G.bottom-G.top)/100,k.X=p.x,k.Y=p.y+k.H/2,("x"in l||"y"in l)&&(k.path.v=t.format("m{0},{1}l{2},{1}",o(21600*p.x),o(21600*p.y),o(21600*p.x)+1));for(var Y=["x","y","text","font","font-family","font-weight","font-style","font-size"],X=0,V=Y.length;X<V;X++)if(Y[X]in l){k._.dirty=1;break}switch(p["text-anchor"]){case"start":k.textpath.style["v-text-align"]="left",k.bbx=k.W/2;break;case"end":k.textpath.style["v-text-align"]="right",k.bbx=-k.W/2;break;default:k.textpath.style["v-text-align"]="center",k.bbx=0}k.textpath.style["v-text-kern"]=!0}},_=function(e,o,s){e.attrs=e.attrs||{},e.attrs;var a=Math.pow,l="linear",u=".5 .5";if(e.attrs.gradient=o,o=n(o).replace(t._radial_gradient,function(t,e,n){return l="radial",e&&n&&(e=i(e),n=i(n),a(e-.5,2)+a(n-.5,2)>.25&&(n=r.sqrt(.25-a(e-.5,2))*(2*(n>.5)-1)+.5),u=e+" "+n),""}),o=o.split(/\s*\-\s*/),"linear"==l){var h=o.shift();if(h=-i(h),isNaN(h))return null}var c=t._parseDots(o);if(!c)return null;if(e=e.shape||e.node,c.length){e.removeChild(s),s.on=!0,s.method="none",s.color=c[0].color,s.color2=c[c.length-1].color;for(var f=[],p=0,d=c.length;p<d;p++)c[p].offset&&f.push(c[p].offset+" "+c[p].color);s.colors=f.length?f.join():"0% "+s.color,"radial"==l?(s.type="gradientTitle",s.focus="100%",s.focussize="0 0",s.focusposition=u,s.angle=0):(s.type="gradient",s.angle=(270-h)%360),e.appendChild(s)}return 1},k=function(e,n){this[0]=this.node=e,e.raphael=!0,this.id=t._oid++,e.raphaelid=this.id,this.X=0,this.Y=0,this.attrs={},this.paper=n,this.matrix=t.matrix(),this._={transform:[],sx:1,sy:1,dx:0,dy:0,deg:0,dirty:1,dirtyT:1},!n.bottom&&(n.bottom=this),this.prev=n.top,n.top&&(n.top.next=this),n.top=this,this.next=null},C=t.el;k.prototype=C,C.constructor=k,C.transform=function(e){if(null==e)return this._.transform;var i,r=this.paper._viewBoxShift,o=r?"s"+[r.scale,r.scale]+"-1-1t"+[r.dx,r.dy]:"";r&&(i=e=n(e).replace(/\.{3}|\u2026/g,this._.transform||"")),t._extractTransform(this,o+e);var s,a=this.matrix.clone(),l=this.skew,u=this.node,h=~n(this.attrs.fill).indexOf("-"),c=!n(this.attrs.fill).indexOf("url(");if(a.translate(1,1),c||h||"image"==this.type)if(l.matrix="1 0 0 1",l.offset="0 0",s=a.split(),h&&s.noRotation||!s.isSimple){u.style.filter=a.toFilter();var f=this.getBBox(),p=this.getBBox(1),d=f.x-p.x,g=f.y-p.y;u.coordorigin=-21600*d+" "+-21600*g,x(this,1,1,d,g,0)}else u.style.filter="",x(this,s.scalex,s.scaley,s.dx,s.dy,s.rotate);else u.style.filter="",l.matrix=n(a),l.offset=a.offset();return null!==i&&(this._.transform=i,t._extractTransform(this,i)),this},C.rotate=function(t,e,r){if(this.removed)return this;if(null!=t){if((t=n(t).split(u)).length-1&&(e=i(t[1]),r=i(t[2])),t=i(t[0]),null==r&&(e=r),null==e||null==r){var o=this.getBBox(1);e=o.x+o.width/2,r=o.y+o.height/2}return this._.dirtyT=1,this.transform(this._.transform.concat([["r",t,e,r]])),this}},C.translate=function(t,e){return this.removed?this:((t=n(t).split(u)).length-1&&(e=i(t[1])),t=i(t[0])||0,e=+e||0,this._.bbox&&(this._.bbox.x+=t,this._.bbox.y+=e),this.transform(this._.transform.concat([["t",t,e]])),this)},C.scale=function(t,e,r,o){if(this.removed)return this;if((t=n(t).split(u)).length-1&&(e=i(t[1]),r=i(t[2]),o=i(t[3]),isNaN(r)&&(r=null),isNaN(o)&&(o=null)),t=i(t[0]),null==e&&(e=t),null==o&&(r=o),null==r||null==o)var s=this.getBBox(1);return r=null==r?s.x+s.width/2:r,o=null==o?s.y+s.height/2:o,this.transform(this._.transform.concat([["s",t,e,r,o]])),this._.dirtyT=1,this},C.hide=function(){return!this.removed&&(this.node.style.display="none"),this},C.show=function(){return!this.removed&&(this.node.style.display=""),this},C.auxGetBBox=t.el.getBBox,C.getBBox=function(){var t=this.auxGetBBox();if(this.paper&&this.paper._viewBoxShift){var e={},n=1/this.paper._viewBoxShift.scale;return e.x=t.x-this.paper._viewBoxShift.dx,e.x*=n,e.y=t.y-this.paper._viewBoxShift.dy,e.y*=n,e.width=t.width*n,e.height=t.height*n,e.x2=e.x+e.width,e.y2=e.y+e.height,e}return t},C._getBBox=function(){return this.removed?{}:{x:this.X+(this.bbx||0)-this.W/2,y:this.Y-this.H,width:this.W,height:this.H}},C.remove=function(){if(!this.removed&&this.node.parentNode){this.paper.__set__&&this.paper.__set__.exclude(this),t.eve.unbind("raphael.*.*."+this.id),t._tear(this,this.paper),this.node.parentNode.removeChild(this.node),this.shape&&this.shape.parentNode.removeChild(this.shape);for(var e in this)this[e]="function"==typeof this[e]?t._removedFactory(e):null;this.removed=!0}},C.attr=function(n,i){if(this.removed)return this;if(null==n){var r={};for(var o in this.attrs)this.attrs[e](o)&&(r[o]=this.attrs[o]);return r.gradient&&"none"==r.fill&&(r.fill=r.gradient)&&delete r.gradient,r.transform=this._.transform,r}if(null==i&&t.is(n,"string")){if("fill"==n&&"none"==this.attrs.fill&&this.attrs.gradient)return this.attrs.gradient;for(var s=n.split(u),a={},l=0,c=s.length;l<c;l++)(n=s[l])in this.attrs?a[n]=this.attrs[n]:t.is(this.paper.customAttributes[n],"function")?a[n]=this.paper.customAttributes[n].def:a[n]=t._availableAttrs[n];return c-1?a:a[s[0]]}if(this.attrs&&null==i&&t.is(n,"array")){for(a={},l=0,c=n.length;l<c;l++)a[n[l]]=this.attr(n[l]);return a}var f;null!=i&&(f={},f[n]=i),null==i&&t.is(n,"object")&&(f=n);for(var p in f)h("raphael.attr."+p+"."+this.id,this,f[p]);if(f){for(p in this.paper.customAttributes)if(this.paper.customAttributes[e](p)&&f[e](p)&&t.is(this.paper.customAttributes[p],"function")){var d=this.paper.customAttributes[p].apply(this,[].concat(f[p]));this.attrs[p]=f[p];for(var g in d)d[e](g)&&(f[g]=d[g])}f.text&&"text"==this.type&&(this.textpath.string=f.text),w(this,f)}return this},C.toFront=function(){return!this.removed&&this.node.parentNode.appendChild(this.node),this.paper&&this.paper.top!=this&&t._tofront(this,this.paper),this},C.toBack=function(){return this.removed?this:(this.node.parentNode.firstChild!=this.node&&(this.node.parentNode.insertBefore(this.node,this.node.parentNode.firstChild),t._toback(this,this.paper)),this)},C.insertAfter=function(e){return this.removed?this:(e.constructor==t.st.constructor&&(e=e[e.length-1]),e.node.nextSibling?e.node.parentNode.insertBefore(this.node,e.node.nextSibling):e.node.parentNode.appendChild(this.node),t._insertafter(this,e,this.paper),this)},C.insertBefore=function(e){return this.removed?this:(e.constructor==t.st.constructor&&(e=e[0]),e.node.parentNode.insertBefore(this.node,e.node),t._insertbefore(this,e,this.paper),this)},C.blur=function(e){var n=this.node.runtimeStyle,i=n.filter;return i=i.replace(p,""),0!=+e?(this.attrs.blur=e,n.filter=i+"  progid:DXImageTransform.Microsoft.Blur(pixelradius="+(+e||1.5)+")",n.margin=t.format("-{0}px 0 0 -{0}px",o(+e||1.5))):(n.filter=i,n.margin=0,delete this.attrs.blur),this},t._engine.path=function(t,e){var n=T("shape");n.style.cssText=g,n.coordsize="21600 21600",n.coordorigin=e.coordorigin;var i=new k(n,e),r={fill:"none",stroke:"#000"};t&&(r.path=t),i.type="path",i.path=[],i.Path="",w(i,r),e.canvas&&e.canvas.appendChild(n);var o=T("skew");return o.on=!0,n.appendChild(o),i.skew=o,i.transform(""),i},t._engine.rect=function(e,n,i,r,o,s){var a=t._rectPath(n,i,r,o,s),l=e.path(a),u=l.attrs;return l.X=u.x=n,l.Y=u.y=i,l.W=u.width=r,l.H=u.height=o,u.r=s,u.path=a,l.type="rect",l},t._engine.ellipse=function(t,e,n,i,r){var o=t.path();return o.attrs,o.X=e-i,o.Y=n-r,o.W=2*i,o.H=2*r,o.type="ellipse",w(o,{cx:e,cy:n,rx:i,ry:r}),o},t._engine.circle=function(t,e,n,i){var r=t.path();return r.attrs,r.X=e-i,r.Y=n-i,r.W=r.H=2*i,r.type="circle",w(r,{cx:e,cy:n,r:i}),r},t._engine.image=function(e,n,i,r,o,s){var a=t._rectPath(i,r,o,s),l=e.path(a).attr({stroke:"none"}),u=l.attrs,h=l.node,c=h.getElementsByTagName("fill")[0];return u.src=n,l.X=u.x=i,l.Y=u.y=r,l.W=u.width=o,l.H=u.height=s,u.path=a,l.type="image",c.parentNode==h&&h.removeChild(c),c.rotate=!0,c.src=n,c.type="tile",l._.fillpos=[i,r],l._.fillsize=[o,s],h.appendChild(c),x(l,1,1,0,0,0),l},t._engine.text=function(e,i,r,s){var a=T("shape"),l=T("path"),u=T("textpath");i=i||0,r=r||0,s=s||"",l.v=t.format("m{0},{1}l{2},{1}",o(21600*i),o(21600*r),o(21600*i)+1),l.textpathok=!0,u.string=n(s),u.on=!0,a.style.cssText=g,a.coordsize="21600 21600",a.coordorigin="0 0";var h=new k(a,e),c={fill:"#000",stroke:"none",font:t._availableAttrs.font,text:s};h.shape=a,h.path=l,h.textpath=u,h.type="text",h.attrs.text=n(s),h.attrs.x=i,h.attrs.y=r,h.attrs.w=1,h.attrs.h=1,w(h,c),a.appendChild(u),a.appendChild(l),e.canvas.appendChild(a);var f=T("skew");return f.on=!0,a.appendChild(f),h.skew=f,h.transform(""),h},t._engine.setSize=function(e,n){var i=this.canvas.style;return this.width=e,this.height=n,e==+e&&(e+="px"),n==+n&&(n+="px"),i.width=e,i.height=n,i.clip="rect(0 "+e+" "+n+" 0)",this._viewBox&&t._engine.setViewBox.apply(this,this._viewBox),this},t._engine.setViewBox=function(e,n,i,r,o){t.eve("raphael.setViewBox",this,this._viewBox,[e,n,i,r,o]);var s,a,l=this.getSize(),u=l.width,h=l.height;return o&&(s=h/r,a=u/i,i*s<u&&(e-=(u-i*s)/2/s),r*a<h&&(n-=(h-r*a)/2/a)),this._viewBox=[e,n,i,r,!!o],this._viewBoxShift={dx:-e,dy:-n,scale:l},this.forEach(function(t){t.transform("...")}),this};var T;t._engine.initWin=function(t){var e=t.document;e.styleSheets.length<31?e.createStyleSheet().addRule(".rvml","behavior:url(#default#VML)"):e.styleSheets[0].addRule(".rvml","behavior:url(#default#VML)");try{!e.namespaces.rvml&&e.namespaces.add("rvml","urn:schemas-microsoft-com:vml"),T=function(t){return e.createElement("<rvml:"+t+' class="rvml">')}}catch(t){T=function(t){return e.createElement("<"+t+' xmlns="urn:schemas-microsoft.com:vml" class="rvml">')}}},t._engine.initWin(t._g.win),t._engine.create=function(){var e=t._getContainer.apply(0,arguments),n=e.container,i=e.height,r=e.width,o=e.x,s=e.y;if(!n)throw new Error("VML container not found.");var a=new t._Paper,l=a.canvas=t._g.doc.createElement("div"),u=l.style;return o=o||0,s=s||0,r=r||512,i=i||342,a.width=r,a.height=i,r==+r&&(r+="px"),i==+i&&(i+="px"),a.coordsize=216e5+" 21600000",a.coordorigin="0 0",a.span=t._g.doc.createElement("span"),a.span.style.cssText="position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;",l.appendChild(a.span),u.cssText=t.format("top:0;left:0;width:{0};height:{1};display:inline-block;position:relative;clip:rect(0 {0} {1} 0);overflow:hidden",r,i),1==n?(t._g.doc.body.appendChild(l),u.left=o+"px",u.top=s+"px",u.position="absolute"):n.firstChild?n.insertBefore(l,n.firstChild):n.appendChild(l),a.renderfix=function(){},a},t.prototype.clear=function(){t.eve("raphael.clear",this),this.canvas.innerHTML="",this.span=t._g.doc.createElement("span"),this.span.style.cssText="position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;display:inline;",this.canvas.appendChild(this.span),this.bottom=this.top=null},t.prototype.remove=function(){t.eve("raphael.remove",this),this.canvas.parentNode.removeChild(this.canvas);for(var e in this)this[e]="function"==typeof this[e]?t._removedFactory(e):null;return!0};var S=t.st;for(var A in C)C[e](A)&&!S[e](A)&&(S[A]=function(t){return function(){var e=arguments;return this.forEach(function(n){n[t].apply(n,e)})}}(A))}}.apply(e,i))||(t.exports=r)}])}()}()},31:function(t,e,n){var i;!function(e,n){"use strict";"object"==typeof t&&"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,function(n,r){"use strict";function o(t,e){var n=(e=e||J).createElement("script");n.text=t,e.head.appendChild(n).parentNode.removeChild(n)}function s(t){var e=!!t&&"length"in t&&t.length,n=ht.type(t);return"function"!==n&&!ht.isWindow(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}function a(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}function l(t,e,n){return ht.isFunction(e)?ht.grep(t,function(t,i){return!!e.call(t,i,t)!==n}):e.nodeType?ht.grep(t,function(t){return t===e!==n}):"string"!=typeof e?ht.grep(t,function(t){return it.call(e,t)>-1!==n}):bt.test(e)?ht.filter(e,t,n):(e=ht.filter(e,t),ht.grep(t,function(t){return it.call(e,t)>-1!==n&&1===t.nodeType}))}function u(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function h(t){return t}function c(t){throw t}function f(t,e,n,i){var r;try{t&&ht.isFunction(r=t.promise)?r.call(t).done(e).fail(n):t&&ht.isFunction(r=t.then)?r.call(t,e,n):e.apply(void 0,[t].slice(i))}catch(t){n.apply(void 0,[t])}}function p(){J.removeEventListener("DOMContentLoaded",p),n.removeEventListener("load",p),ht.ready()}function d(){this.expando=ht.expando+d.uid++}function g(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(Dt,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(i))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:Bt.test(t)?JSON.parse(t):t)}(n)}catch(t){}Ft.set(t,e,n)}else n=void 0;return n}function v(t,e,n,i){var r,o=1,s=20,a=i?function(){return i.cur()}:function(){return ht.css(t,e,"")},l=a(),u=n&&n[3]||(ht.cssNumber[e]?"":"px"),h=(ht.cssNumber[e]||"px"!==u&&+l)&&jt.exec(ht.css(t,e));if(h&&h[3]!==u){u=u||h[3],n=n||[],h=+l||1;do{h/=o=o||".5",ht.style(t,e,h+u)}while(o!==(o=a()/l)&&1!==o&&--s)}return n&&(h=+h||+l||0,r=n[1]?h+(n[1]+1)*n[2]:+n[2],i&&(i.unit=u,i.start=h,i.end=r)),r}function y(t){var e,n=t.ownerDocument,i=t.nodeName,r=qt[i];return r||(e=n.body.appendChild(n.createElement(i)),r=ht.css(e,"display"),e.parentNode.removeChild(e),"none"===r&&(r="block"),qt[i]=r,r)}function m(t,e){for(var n,i,r=[],o=0,s=t.length;o<s;o++)(i=t[o]).style&&(n=i.style.display,e?("none"===n&&(r[o]=Mt.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&Ht(i)&&(r[o]=y(i))):"none"!==n&&(r[o]="none",Mt.set(i,"display",n)));for(o=0;o<s;o++)null!=r[o]&&(t[o].style.display=r[o]);return t}function x(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&a(t,e)?ht.merge([t],n):n}function b(t,e){for(var n=0,i=t.length;n<i;n++)Mt.set(t[n],"globalEval",!e||Mt.get(e[n],"globalEval"))}function w(t,e,n,i,r){for(var o,s,a,l,u,h,c=e.createDocumentFragment(),f=[],p=0,d=t.length;p<d;p++)if((o=t[p])||0===o)if("object"===ht.type(o))ht.merge(f,o.nodeType?[o]:o);else if($t.test(o)){for(s=s||c.appendChild(e.createElement("div")),a=(Ot.exec(o)||["",""])[1].toLowerCase(),l=Wt[a]||Wt._default,s.innerHTML=l[1]+ht.htmlPrefilter(o)+l[2],h=l[0];h--;)s=s.lastChild;ht.merge(f,s.childNodes),(s=c.firstChild).textContent=""}else f.push(e.createTextNode(o));for(c.textContent="",p=0;o=f[p++];)if(i&&ht.inArray(o,i)>-1)r&&r.push(o);else if(u=ht.contains(o.ownerDocument,o),s=x(c.appendChild(o),"script"),u&&b(s),n)for(h=0;o=s[h++];)zt.test(o.type||"")&&n.push(o);return c}function _(){return!0}function k(){return!1}function C(){try{return J.activeElement}catch(t){}}function T(t,e,n,i,r,o){var s,a;if("object"==typeof e){"string"!=typeof n&&(i=i||n,n=void 0);for(a in e)T(t,a,n,i,e[a],o);return t}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=k;else if(!r)return t;return 1===o&&(s=r,(r=function(t){return ht().off(t),s.apply(this,arguments)}).guid=s.guid||(s.guid=ht.guid++)),t.each(function(){ht.event.add(this,e,r,i,n)})}function S(t,e){return a(t,"table")&&a(11!==e.nodeType?e:e.firstChild,"tr")?ht(">tbody",t)[0]||t:t}function A(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function L(t){var e=Jt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function E(t,e){var n,i,r,o,s,a,l,u;if(1===e.nodeType){if(Mt.hasData(t)&&(o=Mt.access(t),s=Mt.set(e,o),u=o.events)){delete s.handle,s.events={};for(r in u)for(n=0,i=u[r].length;n<i;n++)ht.event.add(e,r,u[r][n])}Ft.hasData(t)&&(a=Ft.access(t),l=ht.extend({},a),Ft.set(e,l))}}function M(t,e){var n=e.nodeName.toLowerCase();"input"===n&&Rt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function F(t,e,n,i){e=et.apply([],e);var r,s,a,l,u,h,c=0,f=t.length,p=f-1,d=e[0],g=ht.isFunction(d);if(g||f>1&&"string"==typeof d&&!ut.checkClone&&Zt.test(d))return t.each(function(r){var o=t.eq(r);g&&(e[0]=d.call(this,r,o.html())),F(o,e,n,i)});if(f&&(r=w(e,t[0].ownerDocument,!1,t,i),s=r.firstChild,1===r.childNodes.length&&(r=s),s||i)){for(l=(a=ht.map(x(r,"script"),A)).length;c<f;c++)u=r,c!==p&&(u=ht.clone(u,!0,!0),l&&ht.merge(a,x(u,"script"))),n.call(t[c],u,c);if(l)for(h=a[a.length-1].ownerDocument,ht.map(a,L),c=0;c<l;c++)u=a[c],zt.test(u.type||"")&&!Mt.access(u,"globalEval")&&ht.contains(h,u)&&(u.src?ht._evalUrl&&ht._evalUrl(u.src):o(u.textContent.replace(Kt,""),h))}return t}function B(t,e,n){for(var i,r=e?ht.filter(e,t):t,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||ht.cleanData(x(i)),i.parentNode&&(n&&ht.contains(i.ownerDocument,i)&&b(x(i,"script")),i.parentNode.removeChild(i));return t}function D(t,e,n){var i,r,o,s,a=t.style;return(n=n||ne(t))&&(""!==(s=n.getPropertyValue(e)||n[e])||ht.contains(t.ownerDocument,t)||(s=ht.style(t,e)),!ut.pixelMarginRight()&&ee.test(s)&&te.test(e)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o)),void 0!==s?s+"":s}function N(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}function j(t){var e=ht.cssProps[t];return e||(e=ht.cssProps[t]=function(t){if(t in le)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=ae.length;n--;)if((t=ae[n]+e)in le)return t}(t)||t),e}function P(t,e,n){var i=jt.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function H(t,e,n,i,r){var o,s=0;for(o=n===(i?"border":"content")?4:"width"===e?1:0;o<4;o+=2)"margin"===n&&(s+=ht.css(t,n+Pt[o],!0,r)),i?("content"===n&&(s-=ht.css(t,"padding"+Pt[o],!0,r)),"margin"!==n&&(s-=ht.css(t,"border"+Pt[o]+"Width",!0,r))):(s+=ht.css(t,"padding"+Pt[o],!0,r),"padding"!==n&&(s+=ht.css(t,"border"+Pt[o]+"Width",!0,r)));return s}function I(t,e,n){var i,r=ne(t),o=D(t,e,r),s="border-box"===ht.css(t,"boxSizing",!1,r);return ee.test(o)?o:(i=s&&(ut.boxSizingReliable()||o===t.style[e]),"auto"===o&&(o=t["offset"+e[0].toUpperCase()+e.slice(1)]),(o=parseFloat(o)||0)+H(t,e,n||(s?"border":"content"),i,r)+"px")}function q(t,e,n,i,r){return new q.prototype.init(t,e,n,i,r)}function R(){he&&(!1===J.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(R):n.setTimeout(R,ht.fx.interval),ht.fx.tick())}function O(){return n.setTimeout(function(){ue=void 0}),ue=ht.now()}function z(t,e){var n,i=0,r={height:t};for(e=e?1:0;i<4;i+=2-e)r["margin"+(n=Pt[i])]=r["padding"+n]=t;return e&&(r.opacity=r.width=t),r}function W(t,e,n){for(var i,r=($.tweeners[e]||[]).concat($.tweeners["*"]),o=0,s=r.length;o<s;o++)if(i=r[o].call(n,e,t))return i}function $(t,e,n){var i,r,o=0,s=$.prefilters.length,a=ht.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var e=ue||O(),n=Math.max(0,u.startTime+u.duration-e),i=1-(n/u.duration||0),o=0,s=u.tweens.length;o<s;o++)u.tweens[o].run(i);return a.notifyWith(t,[u,i,n]),i<1&&s?n:(s||a.notifyWith(t,[u,1,0]),a.resolveWith(t,[u]),!1)},u=a.promise({elem:t,props:ht.extend({},e),opts:ht.extend(!0,{specialEasing:{},easing:ht.easing._default},n),originalProperties:e,originalOptions:n,startTime:ue||O(),duration:n.duration,tweens:[],createTween:function(e,n){var i=ht.Tween(t,u.opts,e,n,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(i),i},stop:function(e){var n=0,i=e?u.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)u.tweens[n].run(1);return e?(a.notifyWith(t,[u,1,0]),a.resolveWith(t,[u,e])):a.rejectWith(t,[u,e]),this}}),h=u.props;for((!function(t,e){var n,i,r,o,s;for(n in t)if(i=ht.camelCase(n),r=e[i],o=t[n],Array.isArray(o)&&(r=o[1],o=t[n]=o[0]),n!==i&&(t[i]=o,delete t[n]),(s=ht.cssHooks[i])&&"expand"in s){o=s.expand(o),delete t[i];for(n in o)n in t||(t[n]=o[n],e[n]=r)}else e[i]=r}(h,u.opts.specialEasing));o<s;o++)if(i=$.prefilters[o].call(u,t,h,u.opts))return ht.isFunction(i.stop)&&(ht._queueHooks(u.elem,u.opts.queue).stop=ht.proxy(i.stop,i)),i;return ht.map(h,W,u),ht.isFunction(u.opts.start)&&u.opts.start.call(t,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),ht.fx.timer(ht.extend(l,{elem:t,anim:u,queue:u.opts.queue})),u}function G(t){return(t.match(Tt)||[]).join(" ")}function Y(t){return t.getAttribute&&t.getAttribute("class")||""}function X(t,e,n,i){var r;if(Array.isArray(e))ht.each(e,function(e,r){n||_e.test(t)?i(t,r):X(t+"["+("object"==typeof r&&null!=r?e:"")+"]",r,n,i)});else if(n||"object"!==ht.type(e))i(t,e);else for(r in e)X(t+"["+r+"]",e[r],n,i)}function V(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,r=0,o=e.toLowerCase().match(Tt)||[];if(ht.isFunction(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function U(t,e,n,i){function r(a){var l;return o[a]=!0,ht.each(t[a]||[],function(t,a){var u=a(e,n,i);return"string"!=typeof u||s||o[u]?s?!(l=u):void 0:(e.dataTypes.unshift(u),r(u),!1)}),l}var o={},s=t===De;return r(e.dataTypes[0])||!o["*"]&&r("*")}function Q(t,e){var n,i,r=ht.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((r[n]?t:i||(i={}))[n]=e[n]);return i&&ht.extend(!0,t,i),t}var Z=[],J=n.document,K=Object.getPrototypeOf,tt=Z.slice,et=Z.concat,nt=Z.push,it=Z.indexOf,rt={},ot=rt.toString,st=rt.hasOwnProperty,at=st.toString,lt=at.call(Object),ut={},ht=function(t,e){return new ht.fn.init(t,e)},ct=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ft=/^-ms-/,pt=/-([a-z])/g,dt=function(t,e){return e.toUpperCase()};ht.fn=ht.prototype={jquery:"3.2.1",constructor:ht,length:0,toArray:function(){return tt.call(this)},get:function(t){return null==t?tt.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=ht.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return ht.each(this,t)},map:function(t){return this.pushStack(ht.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(tt.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:nt,sort:Z.sort,splice:Z.splice},ht.extend=ht.fn.extend=function(){var t,e,n,i,r,o,s=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||ht.isFunction(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)n=s[e],s!==(i=t[e])&&(u&&i&&(ht.isPlainObject(i)||(r=Array.isArray(i)))?(r?(r=!1,o=n&&Array.isArray(n)?n:[]):o=n&&ht.isPlainObject(n)?n:{},s[e]=ht.extend(u,o,i)):void 0!==i&&(s[e]=i));return s},ht.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===ht.type(t)},isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=ht.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==ot.call(t)||(e=K(t))&&("function"!=typeof(n=st.call(e,"constructor")&&e.constructor)||at.call(n)!==lt))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?rt[ot.call(t)]||"object":typeof t},globalEval:function(t){o(t)},camelCase:function(t){return t.replace(ft,"ms-").replace(pt,dt)},each:function(t,e){var n,i=0;if(s(t))for(n=t.length;i<n&&!1!==e.call(t[i],i,t[i]);i++);else for(i in t)if(!1===e.call(t[i],i,t[i]))break;return t},trim:function(t){return null==t?"":(t+"").replace(ct,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(s(Object(t))?ht.merge(n,"string"==typeof t?[t]:t):nt.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:it.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,r=t.length;i<n;i++)t[r++]=e[i];return t.length=r,t},grep:function(t,e,n){for(var i=[],r=0,o=t.length,s=!n;r<o;r++)!e(t[r],r)!==s&&i.push(t[r]);return i},map:function(t,e,n){var i,r,o=0,a=[];if(s(t))for(i=t.length;o<i;o++)null!=(r=e(t[o],o,n))&&a.push(r);else for(o in t)null!=(r=e(t[o],o,n))&&a.push(r);return et.apply([],a)},guid:1,proxy:function(t,e){var n,i,r;if("string"==typeof e&&(n=t[e],e=t,t=n),ht.isFunction(t))return i=tt.call(arguments,2),r=function(){return t.apply(e||this,i.concat(tt.call(arguments)))},r.guid=t.guid=t.guid||ht.guid++,r},now:Date.now,support:ut}),"function"==typeof Symbol&&(ht.fn[Symbol.iterator]=Z[Symbol.iterator]),ht.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){rt["[object "+e+"]"]=e.toLowerCase()});var gt=function(t){function e(t,e,n,i){var r,o,s,a,l,h,f,p=e&&e.ownerDocument,d=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==d&&9!==d&&11!==d)return n;if(!i&&((e?e.ownerDocument||e:H)!==E&&L(e),e=e||E,F)){if(11!==d&&(l=pt.exec(t)))if(r=l[1]){if(9===d){if(!(s=e.getElementById(r)))return n;if(s.id===r)return n.push(s),n}else if(p&&(s=p.getElementById(r))&&j(e,s)&&s.id===r)return n.push(s),n}else{if(l[2])return V.apply(n,e.getElementsByTagName(t)),n;if((r=l[3])&&m.getElementsByClassName&&e.getElementsByClassName)return V.apply(n,e.getElementsByClassName(r)),n}if(m.qsa&&!z[t+" "]&&(!B||!B.test(t))){if(1!==d)p=e,f=t;else if("object"!==e.nodeName.toLowerCase()){for((a=e.getAttribute("id"))?a=a.replace(yt,mt):e.setAttribute("id",a=P),o=(h=_(t)).length;o--;)h[o]="#"+a+" "+c(h[o]);f=h.join(","),p=dt.test(t)&&u(e.parentNode)||e}if(f)try{return V.apply(n,p.querySelectorAll(f)),n}catch(t){}finally{a===P&&e.removeAttribute("id")}}}return C(t.replace(it,"$1"),e,n,i)}function n(){function t(n,i){return e.push(n+" ")>x.cacheLength&&delete t[e.shift()],t[n+" "]=i}var e=[];return t}function i(t){return t[P]=!0,t}function r(t){var e=E.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var n=t.split("|"),i=n.length;i--;)x.attrHandle[n[i]]=e}function s(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function a(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&bt(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function l(t){return i(function(e){return e=+e,i(function(n,i){for(var r,o=t([],n.length,e),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))})})}function u(t){return t&&void 0!==t.getElementsByTagName&&t}function h(){}function c(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function f(t,e,n){var i=e.dir,r=e.next,o=r||i,s=n&&"parentNode"===o,a=q++;return e.first?function(e,n,r){for(;e=e[i];)if(1===e.nodeType||s)return t(e,n,r);return!1}:function(e,n,l){var u,h,c,f=[I,a];if(l){for(;e=e[i];)if((1===e.nodeType||s)&&t(e,n,l))return!0}else for(;e=e[i];)if(1===e.nodeType||s)if(c=e[P]||(e[P]={}),h=c[e.uniqueID]||(c[e.uniqueID]={}),r&&r===e.nodeName.toLowerCase())e=e[i]||e;else{if((u=h[o])&&u[0]===I&&u[1]===a)return f[2]=u[2];if(h[o]=f,f[2]=t(e,n,l))return!0}return!1}}function p(t){return t.length>1?function(e,n,i){for(var r=t.length;r--;)if(!t[r](e,n,i))return!1;return!0}:t[0]}function d(t,e,n,i,r){for(var o,s=[],a=0,l=t.length,u=null!=e;a<l;a++)(o=t[a])&&(n&&!n(o,i,r)||(s.push(o),u&&e.push(a)));return s}function g(t,n,r,o,s,a){return o&&!o[P]&&(o=g(o)),s&&!s[P]&&(s=g(s,a)),i(function(i,a,l,u){var h,c,f,p=[],g=[],v=a.length,y=i||function(t,n,i){for(var r=0,o=n.length;r<o;r++)e(t,n[r],i);return i}(n||"*",l.nodeType?[l]:l,[]),m=!t||!i&&n?y:d(y,p,t,l,u),x=r?s||(i?t:v||o)?[]:a:m;if(r&&r(m,x,l,u),o)for(h=d(x,g),o(h,[],l,u),c=h.length;c--;)(f=h[c])&&(x[g[c]]=!(m[g[c]]=f));if(i){if(s||t){if(s){for(h=[],c=x.length;c--;)(f=x[c])&&h.push(m[c]=f);s(null,x=[],h,u)}for(c=x.length;c--;)(f=x[c])&&(h=s?Q(i,f):p[c])>-1&&(i[h]=!(a[h]=f))}}else x=d(x===a?x.splice(v,x.length):x),s?s(null,a,x,u):V.apply(a,x)})}function v(t){for(var e,n,i,r=t.length,o=x.relative[t[0].type],s=o||x.relative[" "],a=o?1:0,l=f(function(t){return t===e},s,!0),u=f(function(t){return Q(e,t)>-1},s,!0),h=[function(t,n,i){var r=!o&&(i||n!==T)||((e=n).nodeType?l(t,n,i):u(t,n,i));return e=null,r}];a<r;a++)if(n=x.relative[t[a].type])h=[f(p(h),n)];else{if((n=x.filter[t[a].type].apply(null,t[a].matches))[P]){for(i=++a;i<r&&!x.relative[t[i].type];i++);return g(a>1&&p(h),a>1&&c(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(it,"$1"),n,a<i&&v(t.slice(a,i)),i<r&&v(t=t.slice(i)),i<r&&c(t))}h.push(n)}return p(h)}var y,m,x,b,w,_,k,C,T,S,A,L,E,M,F,B,D,N,j,P="sizzle"+1*new Date,H=t.document,I=0,q=0,R=n(),O=n(),z=n(),W=function(t,e){return t===e&&(A=!0),0},$={}.hasOwnProperty,G=[],Y=G.pop,X=G.push,V=G.push,U=G.slice,Q=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},Z="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",J="[\\x20\\t\\r\\n\\f]",K="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",tt="\\["+J+"*("+K+")(?:"+J+"*([*^$|!~]?=)"+J+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+K+"))|)"+J+"*\\]",et=":("+K+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+tt+")*)|.*)\\)|)",nt=new RegExp(J+"+","g"),it=new RegExp("^"+J+"+|((?:^|[^\\\\])(?:\\\\.)*)"+J+"+$","g"),rt=new RegExp("^"+J+"*,"+J+"*"),ot=new RegExp("^"+J+"*([>+~]|"+J+")"+J+"*"),st=new RegExp("="+J+"*([^\\]'\"]*?)"+J+"*\\]","g"),at=new RegExp(et),lt=new RegExp("^"+K+"$"),ut={ID:new RegExp("^#("+K+")"),CLASS:new RegExp("^\\.("+K+")"),TAG:new RegExp("^("+K+"|[*])"),ATTR:new RegExp("^"+tt),PSEUDO:new RegExp("^"+et),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+J+"*(even|odd|(([+-]|)(\\d*)n|)"+J+"*(?:([+-]|)"+J+"*(\\d+)|))"+J+"*\\)|)","i"),bool:new RegExp("^(?:"+Z+")$","i"),needsContext:new RegExp("^"+J+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+J+"*((?:-\\d)?\\d*)"+J+"*\\)|)(?=[^-]|$)","i")},ht=/^(?:input|select|textarea|button)$/i,ct=/^h\d$/i,ft=/^[^{]+\{\s*\[native \w/,pt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,dt=/[+~]/,gt=new RegExp("\\\\([\\da-f]{1,6}"+J+"?|("+J+")|.)","ig"),vt=function(t,e,n){var i="0x"+e-65536;return i!=i||n?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},yt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,mt=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},xt=function(){L()},bt=f(function(t){return!0===t.disabled&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{V.apply(G=U.call(H.childNodes),H.childNodes),G[H.childNodes.length].nodeType}catch(t){V={apply:G.length?function(t,e){X.apply(t,U.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}m=e.support={},w=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},L=e.setDocument=function(t){var e,n,i=t?t.ownerDocument||t:H;return i!==E&&9===i.nodeType&&i.documentElement?(E=i,M=E.documentElement,F=!w(E),H!==E&&(n=E.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",xt,!1):n.attachEvent&&n.attachEvent("onunload",xt)),m.attributes=r(function(t){return t.className="i",!t.getAttribute("className")}),m.getElementsByTagName=r(function(t){return t.appendChild(E.createComment("")),!t.getElementsByTagName("*").length}),m.getElementsByClassName=ft.test(E.getElementsByClassName),m.getById=r(function(t){return M.appendChild(t).id=P,!E.getElementsByName||!E.getElementsByName(P).length}),m.getById?(x.filter.ID=function(t){var e=t.replace(gt,vt);return function(t){return t.getAttribute("id")===e}},x.find.ID=function(t,e){if(void 0!==e.getElementById&&F){var n=e.getElementById(t);return n?[n]:[]}}):(x.filter.ID=function(t){var e=t.replace(gt,vt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},x.find.ID=function(t,e){if(void 0!==e.getElementById&&F){var n,i,r,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(r=e.getElementsByName(t),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),x.find.TAG=m.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):m.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],r=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},x.find.CLASS=m.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&F)return e.getElementsByClassName(t)},D=[],B=[],(m.qsa=ft.test(E.querySelectorAll))&&(r(function(t){M.appendChild(t).innerHTML="<a id='"+P+"'></a><select id='"+P+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&B.push("[*^$]="+J+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||B.push("\\["+J+"*(?:value|"+Z+")"),t.querySelectorAll("[id~="+P+"-]").length||B.push("~="),t.querySelectorAll(":checked").length||B.push(":checked"),t.querySelectorAll("a#"+P+"+*").length||B.push(".#.+[+~]")}),r(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=E.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&B.push("name"+J+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&B.push(":enabled",":disabled"),M.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&B.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),B.push(",.*:")})),(m.matchesSelector=ft.test(N=M.matches||M.webkitMatchesSelector||M.mozMatchesSelector||M.oMatchesSelector||M.msMatchesSelector))&&r(function(t){m.disconnectedMatch=N.call(t,"*"),N.call(t,"[s!='']:x"),D.push("!=",et)}),B=B.length&&new RegExp(B.join("|")),D=D.length&&new RegExp(D.join("|")),e=ft.test(M.compareDocumentPosition),j=e||ft.test(M.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},W=e?function(t,e){if(t===e)return A=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!m.sortDetached&&e.compareDocumentPosition(t)===n?t===E||t.ownerDocument===H&&j(H,t)?-1:e===E||e.ownerDocument===H&&j(H,e)?1:S?Q(S,t)-Q(S,e):0:4&n?-1:1)}:function(t,e){if(t===e)return A=!0,0;var n,i=0,r=t.parentNode,o=e.parentNode,a=[t],l=[e];if(!r||!o)return t===E?-1:e===E?1:r?-1:o?1:S?Q(S,t)-Q(S,e):0;if(r===o)return s(t,e);for(n=t;n=n.parentNode;)a.unshift(n);for(n=e;n=n.parentNode;)l.unshift(n);for(;a[i]===l[i];)i++;return i?s(a[i],l[i]):a[i]===H?-1:l[i]===H?1:0},E):E},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==E&&L(t),n=n.replace(st,"='$1']"),m.matchesSelector&&F&&!z[n+" "]&&(!D||!D.test(n))&&(!B||!B.test(n)))try{var i=N.call(t,n);if(i||m.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){}return e(n,E,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==E&&L(t),j(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==E&&L(t);var n=x.attrHandle[e.toLowerCase()],i=n&&$.call(x.attrHandle,e.toLowerCase())?n(t,e,!F):void 0;return void 0!==i?i:m.attributes||!F?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},e.escape=function(t){return(t+"").replace(yt,mt)},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],i=0,r=0;if(A=!m.detectDuplicates,S=!m.sortStable&&t.slice(0),t.sort(W),A){for(;e=t[r++];)e===t[r]&&(i=n.push(r));for(;i--;)t.splice(n[i],1)}return S=null,t},b=e.getText=function(t){var e,n="",i=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=b(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[i++];)n+=b(e);return n},(x=e.selectors={cacheLength:50,createPseudo:i,match:ut,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(gt,vt),t[3]=(t[3]||t[4]||t[5]||"").replace(gt,vt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return ut.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&at.test(n)&&(e=_(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(gt,vt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=R[t+" "];return e||(e=new RegExp("(^|"+J+")"+t+"("+J+"|$)"))&&R(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,i){return function(r){var o=e.attr(r,t);return null==o?"!="===n:!n||(o+="","="===n?o===i:"!="===n?o!==i:"^="===n?i&&0===o.indexOf(i):"*="===n?i&&o.indexOf(i)>-1:"$="===n?i&&o.slice(-i.length)===i:"~="===n?(" "+o.replace(nt," ")+" ").indexOf(i)>-1:"|="===n&&(o===i||o.slice(0,i.length+1)===i+"-"))}},CHILD:function(t,e,n,i,r){var o="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===i&&0===r?function(t){return!!t.parentNode}:function(e,n,l){var u,h,c,f,p,d,g=o!==s?"nextSibling":"previousSibling",v=e.parentNode,y=a&&e.nodeName.toLowerCase(),m=!l&&!a,x=!1;if(v){if(o){for(;g;){for(f=e;f=f[g];)if(a?f.nodeName.toLowerCase()===y:1===f.nodeType)return!1;d=g="only"===t&&!d&&"nextSibling"}return!0}if(d=[s?v.firstChild:v.lastChild],s&&m){for(x=(p=(u=(h=(c=(f=v)[P]||(f[P]={}))[f.uniqueID]||(c[f.uniqueID]={}))[t]||[])[0]===I&&u[1])&&u[2],f=p&&v.childNodes[p];f=++p&&f&&f[g]||(x=p=0)||d.pop();)if(1===f.nodeType&&++x&&f===e){h[t]=[I,p,x];break}}else if(m&&(x=p=(u=(h=(c=(f=e)[P]||(f[P]={}))[f.uniqueID]||(c[f.uniqueID]={}))[t]||[])[0]===I&&u[1]),!1===x)for(;(f=++p&&f&&f[g]||(x=p=0)||d.pop())&&((a?f.nodeName.toLowerCase()!==y:1!==f.nodeType)||!++x||(m&&((h=(c=f[P]||(f[P]={}))[f.uniqueID]||(c[f.uniqueID]={}))[t]=[I,x]),f!==e)););return(x-=r)===i||x%i==0&&x/i>=0}}},PSEUDO:function(t,n){var r,o=x.pseudos[t]||x.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[P]?o(n):o.length>1?(r=[t,t,"",n],x.setFilters.hasOwnProperty(t.toLowerCase())?i(function(t,e){for(var i,r=o(t,n),s=r.length;s--;)t[i=Q(t,r[s])]=!(e[i]=r[s])}):function(t){return o(t,0,r)}):o}},pseudos:{not:i(function(t){var e=[],n=[],r=k(t.replace(it,"$1"));return r[P]?i(function(t,e,n,i){for(var o,s=r(t,null,i,[]),a=t.length;a--;)(o=s[a])&&(t[a]=!(e[a]=o))}):function(t,i,o){return e[0]=t,r(e,null,o,n),e[0]=null,!n.pop()}}),has:i(function(t){return function(n){return e(t,n).length>0}}),contains:i(function(t){return t=t.replace(gt,vt),function(e){return(e.textContent||e.innerText||b(e)).indexOf(t)>-1}}),lang:i(function(t){return lt.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(gt,vt).toLowerCase(),function(e){var n;do{if(n=F?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===M},focus:function(t){return t===E.activeElement&&(!E.hasFocus||E.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:a(!1),disabled:a(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!x.pseudos.empty(t)},header:function(t){return ct.test(t.nodeName)},input:function(t){return ht.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:l(function(){return[0]}),last:l(function(t,e){return[e-1]}),eq:l(function(t,e,n){return[n<0?n+e:n]}),even:l(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:l(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:l(function(t,e,n){for(var i=n<0?n+e:n;--i>=0;)t.push(i);return t}),gt:l(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}}).pseudos.nth=x.pseudos.eq;for(y in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[y]=function(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}(y);for(y in{submit:!0,reset:!0})x.pseudos[y]=function(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}(y);return h.prototype=x.filters=x.pseudos,x.setFilters=new h,_=e.tokenize=function(t,n){var i,r,o,s,a,l,u,h=O[t+" "];if(h)return n?0:h.slice(0);for(a=t,l=[],u=x.preFilter;a;){i&&!(r=rt.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(o=[])),i=!1,(r=ot.exec(a))&&(i=r.shift(),o.push({value:i,type:r[0].replace(it," ")}),a=a.slice(i.length));for(s in x.filter)!(r=ut[s].exec(a))||u[s]&&!(r=u[s](r))||(i=r.shift(),o.push({value:i,type:s,matches:r}),a=a.slice(i.length));if(!i)break}return n?a.length:a?e.error(t):O(t,l).slice(0)},k=e.compile=function(t,n){var r,o=[],s=[],a=z[t+" "];if(!a){for(n||(n=_(t)),r=n.length;r--;)(a=v(n[r]))[P]?o.push(a):s.push(a);(a=z(t,function(t,n){var r=n.length>0,o=t.length>0,s=function(i,s,a,l,u){var h,c,f,p=0,g="0",v=i&&[],y=[],m=T,b=i||o&&x.find.TAG("*",u),w=I+=null==m?1:Math.random()||.1,_=b.length;for(u&&(T=s===E||s||u);g!==_&&null!=(h=b[g]);g++){if(o&&h){for(c=0,s||h.ownerDocument===E||(L(h),a=!F);f=t[c++];)if(f(h,s||E,a)){l.push(h);break}u&&(I=w)}r&&((h=!f&&h)&&p--,i&&v.push(h))}if(p+=g,r&&g!==p){for(c=0;f=n[c++];)f(v,y,s,a);if(i){if(p>0)for(;g--;)v[g]||y[g]||(y[g]=Y.call(l));y=d(y)}V.apply(l,y),u&&!i&&y.length>0&&p+n.length>1&&e.uniqueSort(l)}return u&&(I=w,T=m),v};return r?i(s):s}(s,o))).selector=t}return a},C=e.select=function(t,e,n,i){var r,o,s,a,l,h="function"==typeof t&&t,f=!i&&_(t=h.selector||t);if(n=n||[],1===f.length){if((o=f[0]=f[0].slice(0)).length>2&&"ID"===(s=o[0]).type&&9===e.nodeType&&F&&x.relative[o[1].type]){if(!(e=(x.find.ID(s.matches[0].replace(gt,vt),e)||[])[0]))return n;h&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(r=ut.needsContext.test(t)?0:o.length;r--&&(s=o[r],!x.relative[a=s.type]);)if((l=x.find[a])&&(i=l(s.matches[0].replace(gt,vt),dt.test(o[0].type)&&u(e.parentNode)||e))){if(o.splice(r,1),!(t=i.length&&c(o)))return V.apply(n,i),n;break}}return(h||k(t,f))(i,e,!F,n,!e||dt.test(t)&&u(e.parentNode)||e),n},m.sortStable=P.split("").sort(W).join("")===P,m.detectDuplicates=!!A,L(),m.sortDetached=r(function(t){return 1&t.compareDocumentPosition(E.createElement("fieldset"))}),r(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),m.attributes&&r(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),r(function(t){return null==t.getAttribute("disabled")})||o(Z,function(t,e,n){var i;if(!n)return!0===t[e]?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),e}(n);ht.find=gt,ht.expr=gt.selectors,ht.expr[":"]=ht.expr.pseudos,ht.uniqueSort=ht.unique=gt.uniqueSort,ht.text=gt.getText,ht.isXMLDoc=gt.isXML,ht.contains=gt.contains,ht.escapeSelector=gt.escape;var vt=function(t,e,n){for(var i=[],r=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&ht(t).is(n))break;i.push(t)}return i},yt=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},mt=ht.expr.match.needsContext,xt=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,bt=/^.[^:#\[\.,]*$/;ht.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?ht.find.matchesSelector(i,t)?[i]:[]:ht.find.matches(t,ht.grep(e,function(t){return 1===t.nodeType}))},ht.fn.extend({find:function(t){var e,n,i=this.length,r=this;if("string"!=typeof t)return this.pushStack(ht(t).filter(function(){for(e=0;e<i;e++)if(ht.contains(r[e],this))return!0}));for(n=this.pushStack([]),e=0;e<i;e++)ht.find(t,r[e],n);return i>1?ht.uniqueSort(n):n},filter:function(t){return this.pushStack(l(this,t||[],!1))},not:function(t){return this.pushStack(l(this,t||[],!0))},is:function(t){return!!l(this,"string"==typeof t&&mt.test(t)?ht(t):t||[],!1).length}});var wt,_t=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(ht.fn.init=function(t,e,n){var i,r;if(!t)return this;if(n=n||wt,"string"==typeof t){if(!(i="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:_t.exec(t))||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof ht?e[0]:e,ht.merge(this,ht.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:J,!0)),xt.test(i[1])&&ht.isPlainObject(e))for(i in e)ht.isFunction(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return(r=J.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):ht.isFunction(t)?void 0!==n.ready?n.ready(t):t(ht):ht.makeArray(t,this)}).prototype=ht.fn,wt=ht(J);var kt=/^(?:parents|prev(?:Until|All))/,Ct={children:!0,contents:!0,next:!0,prev:!0};ht.fn.extend({has:function(t){var e=ht(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(ht.contains(this,e[t]))return!0})},closest:function(t,e){var n,i=0,r=this.length,o=[],s="string"!=typeof t&&ht(t);if(!mt.test(t))for(;i<r;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&ht.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?ht.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?it.call(ht(t),this[0]):it.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(ht.uniqueSort(ht.merge(this.get(),ht(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),ht.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return vt(t,"parentNode")},parentsUntil:function(t,e,n){return vt(t,"parentNode",n)},next:function(t){return u(t,"nextSibling")},prev:function(t){return u(t,"previousSibling")},nextAll:function(t){return vt(t,"nextSibling")},prevAll:function(t){return vt(t,"previousSibling")},nextUntil:function(t,e,n){return vt(t,"nextSibling",n)},prevUntil:function(t,e,n){return vt(t,"previousSibling",n)},siblings:function(t){return yt((t.parentNode||{}).firstChild,t)},children:function(t){return yt(t.firstChild)},contents:function(t){return a(t,"iframe")?t.contentDocument:(a(t,"template")&&(t=t.content||t),ht.merge([],t.childNodes))}},function(t,e){ht.fn[t]=function(n,i){var r=ht.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=ht.filter(i,r)),this.length>1&&(Ct[t]||ht.uniqueSort(r),kt.test(t)&&r.reverse()),this.pushStack(r)}});var Tt=/[^\x20\t\r\n\f]+/g;ht.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return ht.each(t.match(Tt)||[],function(t,n){e[n]=!0}),e}(t):ht.extend({},t);var e,n,i,r,o=[],s=[],a=-1,l=function(){for(r=r||t.once,i=e=!0;s.length;a=-1)for(n=s.shift();++a<o.length;)!1===o[a].apply(n[0],n[1])&&t.stopOnFalse&&(a=o.length,n=!1);t.memory||(n=!1),e=!1,r&&(o=n?[]:"")},u={add:function(){return o&&(n&&!e&&(a=o.length-1,s.push(n)),function e(n){ht.each(n,function(n,i){ht.isFunction(i)?t.unique&&u.has(i)||o.push(i):i&&i.length&&"string"!==ht.type(i)&&e(i)})}(arguments),n&&!e&&l()),this},remove:function(){return ht.each(arguments,function(t,e){for(var n;(n=ht.inArray(e,o,n))>-1;)o.splice(n,1),n<=a&&a--}),this},has:function(t){return t?ht.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=s=[],n||e||(o=n=""),this},locked:function(){return!!r},fireWith:function(t,n){return r||(n=[t,(n=n||[]).slice?n.slice():n],s.push(n),e||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},ht.extend({Deferred:function(t){var e=[["notify","progress",ht.Callbacks("memory"),ht.Callbacks("memory"),2],["resolve","done",ht.Callbacks("once memory"),ht.Callbacks("once memory"),0,"resolved"],["reject","fail",ht.Callbacks("once memory"),ht.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return r.then(null,t)},pipe:function(){var t=arguments;return ht.Deferred(function(n){ht.each(e,function(e,i){var r=ht.isFunction(t[i[4]])&&t[i[4]];o[i[1]](function(){var t=r&&r.apply(this,arguments);t&&ht.isFunction(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[t]:arguments)})}),t=null}).promise()},then:function(t,i,r){function o(t,e,i,r){return function(){var a=this,l=arguments,u=function(){var n,u;if(!(t<s)){if((n=i.apply(a,l))===e.promise())throw new TypeError("Thenable self-resolution");u=n&&("object"==typeof n||"function"==typeof n)&&n.then,ht.isFunction(u)?r?u.call(n,o(s,e,h,r),o(s,e,c,r)):(s++,u.call(n,o(s,e,h,r),o(s,e,c,r),o(s,e,h,e.notifyWith))):(i!==h&&(a=void 0,l=[n]),(r||e.resolveWith)(a,l))}},f=r?u:function(){try{u()}catch(n){ht.Deferred.exceptionHook&&ht.Deferred.exceptionHook(n,f.stackTrace),t+1>=s&&(i!==c&&(a=void 0,l=[n]),e.rejectWith(a,l))}};t?f():(ht.Deferred.getStackHook&&(f.stackTrace=ht.Deferred.getStackHook()),n.setTimeout(f))}}var s=0;return ht.Deferred(function(n){e[0][3].add(o(0,n,ht.isFunction(r)?r:h,n.notifyWith)),e[1][3].add(o(0,n,ht.isFunction(t)?t:h)),e[2][3].add(o(0,n,ht.isFunction(i)?i:c))}).promise()},promise:function(t){return null!=t?ht.extend(t,r):r}},o={};return ht.each(e,function(t,n){var s=n[2],a=n[5];r[n[1]]=s.add,a&&s.add(function(){i=a},e[3-t][2].disable,e[0][2].lock),s.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=s.fireWith}),r.promise(o),t&&t.call(o,o),o},when:function(t){var e=arguments.length,n=e,i=Array(n),r=tt.call(arguments),o=ht.Deferred(),s=function(t){return function(n){i[t]=this,r[t]=arguments.length>1?tt.call(arguments):n,--e||o.resolveWith(i,r)}};if(e<=1&&(f(t,o.done(s(n)).resolve,o.reject,!e),"pending"===o.state()||ht.isFunction(r[n]&&r[n].then)))return o.then();for(;n--;)f(r[n],s(n),o.reject);return o.promise()}});var St=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;ht.Deferred.exceptionHook=function(t,e){n.console&&n.console.warn&&t&&St.test(t.name)&&n.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},ht.readyException=function(t){n.setTimeout(function(){throw t})};var At=ht.Deferred();ht.fn.ready=function(t){return At.then(t).catch(function(t){ht.readyException(t)}),this},ht.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--ht.readyWait:ht.isReady)||(ht.isReady=!0,!0!==t&&--ht.readyWait>0||At.resolveWith(J,[ht]))}}),ht.ready.then=At.then,"complete"===J.readyState||"loading"!==J.readyState&&!J.documentElement.doScroll?n.setTimeout(ht.ready):(J.addEventListener("DOMContentLoaded",p),n.addEventListener("load",p));var Lt=function(t,e,n,i,r,o,s){var a=0,l=t.length,u=null==n;if("object"===ht.type(n)){r=!0;for(a in n)Lt(t,e,a,n[a],!0,o,s)}else if(void 0!==i&&(r=!0,ht.isFunction(i)||(s=!0),u&&(s?(e.call(t,i),e=null):(u=e,e=function(t,e,n){return u.call(ht(t),n)})),e))for(;a<l;a++)e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)));return r?t:u?e.call(t):l?e(t[0],n):o},Et=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};d.uid=1,d.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Et(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,r=this.cache(t);if("string"==typeof e)r[ht.camelCase(e)]=n;else for(i in e)r[ht.camelCase(i)]=e[i];return r},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][ht.camelCase(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i=t[this.expando];if(void 0!==i){if(void 0!==e){n=(e=Array.isArray(e)?e.map(ht.camelCase):(e=ht.camelCase(e))in i?[e]:e.match(Tt)||[]).length;for(;n--;)delete i[e[n]]}(void 0===e||ht.isEmptyObject(i))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!ht.isEmptyObject(e)}};var Mt=new d,Ft=new d,Bt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Dt=/[A-Z]/g;ht.extend({hasData:function(t){return Ft.hasData(t)||Mt.hasData(t)},data:function(t,e,n){return Ft.access(t,e,n)},removeData:function(t,e){Ft.remove(t,e)},_data:function(t,e,n){return Mt.access(t,e,n)},_removeData:function(t,e){Mt.remove(t,e)}}),ht.fn.extend({data:function(t,e){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0===t){if(this.length&&(r=Ft.get(o),1===o.nodeType&&!Mt.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=ht.camelCase(i.slice(5)),g(o,i,r[i]));Mt.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof t?this.each(function(){Ft.set(this,t)}):Lt(this,function(e){var n;if(o&&void 0===e){if(void 0!==(n=Ft.get(o,t)))return n;if(void 0!==(n=g(o,t)))return n}else this.each(function(){Ft.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Ft.remove(this,t)})}}),ht.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=Mt.get(t,e),n&&(!i||Array.isArray(n)?i=Mt.access(t,e,ht.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=ht.queue(t,e),i=n.length,r=n.shift(),o=ht._queueHooks(t,e),s=function(){ht.dequeue(t,e)};"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===e&&n.unshift("inprogress"),delete o.stop,r.call(t,s,o)),!i&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return Mt.get(t,n)||Mt.access(t,n,{empty:ht.Callbacks("once memory").add(function(){Mt.remove(t,[e+"queue",n])})})}}),ht.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?ht.queue(this[0],t):void 0===e?this:this.each(function(){var n=ht.queue(this,t,e);ht._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&ht.dequeue(this,t)})},dequeue:function(t){return this.each(function(){ht.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,r=ht.Deferred(),o=this,s=this.length,a=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)(n=Mt.get(o[s],t+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(e)}});var Nt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,jt=new RegExp("^(?:([+-])=|)("+Nt+")([a-z%]*)$","i"),Pt=["Top","Right","Bottom","Left"],Ht=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&ht.contains(t.ownerDocument,t)&&"none"===ht.css(t,"display")},It=function(t,e,n,i){var r,o,s={};for(o in e)s[o]=t.style[o],t.style[o]=e[o];r=n.apply(t,i||[]);for(o in e)t.style[o]=s[o];return r},qt={};ht.fn.extend({show:function(){return m(this,!0)},hide:function(){return m(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Ht(this)?ht(this).show():ht(this).hide()})}});var Rt=/^(?:checkbox|radio)$/i,Ot=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,zt=/^$|\/(?:java|ecma)script/i,Wt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Wt.optgroup=Wt.option,Wt.tbody=Wt.tfoot=Wt.colgroup=Wt.caption=Wt.thead,Wt.th=Wt.td;var $t=/<|&#?\w+;/;!function(){var t=J.createDocumentFragment().appendChild(J.createElement("div")),e=J.createElement("input");e.setAttribute("type","radio"),e.setAttribute("checked","checked"),e.setAttribute("name","t"),t.appendChild(e),ut.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",ut.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Gt=J.documentElement,Yt=/^key/,Xt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Vt=/^([^.]*)(?:\.(.+)|)/;ht.event={global:{},add:function(t,e,n,i,r){var o,s,a,l,u,h,c,f,p,d,g,v=Mt.get(t);if(v)for(n.handler&&(n=(o=n).handler,r=o.selector),r&&ht.find.matchesSelector(Gt,r),n.guid||(n.guid=ht.guid++),(l=v.events)||(l=v.events={}),(s=v.handle)||(s=v.handle=function(e){return void 0!==ht&&ht.event.triggered!==e.type?ht.event.dispatch.apply(t,arguments):void 0}),u=(e=(e||"").match(Tt)||[""]).length;u--;)p=g=(a=Vt.exec(e[u])||[])[1],d=(a[2]||"").split(".").sort(),p&&(c=ht.event.special[p]||{},p=(r?c.delegateType:c.bindType)||p,c=ht.event.special[p]||{},h=ht.extend({type:p,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&ht.expr.match.needsContext.test(r),namespace:d.join(".")},o),(f=l[p])||((f=l[p]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(t,i,d,s)||t.addEventListener&&t.addEventListener(p,s)),c.add&&(c.add.call(t,h),h.handler.guid||(h.handler.guid=n.guid)),r?f.splice(f.delegateCount++,0,h):f.push(h),ht.event.global[p]=!0)},remove:function(t,e,n,i,r){var o,s,a,l,u,h,c,f,p,d,g,v=Mt.hasData(t)&&Mt.get(t);if(v&&(l=v.events)){for(u=(e=(e||"").match(Tt)||[""]).length;u--;)if(a=Vt.exec(e[u])||[],p=g=a[1],d=(a[2]||"").split(".").sort(),p){for(c=ht.event.special[p]||{},f=l[p=(i?c.delegateType:c.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=f.length;o--;)h=f[o],!r&&g!==h.origType||n&&n.guid!==h.guid||a&&!a.test(h.namespace)||i&&i!==h.selector&&("**"!==i||!h.selector)||(f.splice(o,1),h.selector&&f.delegateCount--,c.remove&&c.remove.call(t,h));s&&!f.length&&(c.teardown&&!1!==c.teardown.call(t,d,v.handle)||ht.removeEvent(t,p,v.handle),delete l[p])}else for(p in l)ht.event.remove(t,p+e[u],n,i,!0);ht.isEmptyObject(l)&&Mt.remove(t,"handle events")}},dispatch:function(t){var e,n,i,r,o,s,a=ht.event.fix(t),l=new Array(arguments.length),u=(Mt.get(this,"events")||{})[a.type]||[],h=ht.event.special[a.type]||{};for(l[0]=a,e=1;e<arguments.length;e++)l[e]=arguments[e];if(a.delegateTarget=this,!h.preDispatch||!1!==h.preDispatch.call(this,a)){for(s=ht.event.handlers.call(this,a,u),e=0;(r=s[e++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(i=((ht.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,l))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return h.postDispatch&&h.postDispatch.call(this,a),a.result}},handlers:function(t,e){var n,i,r,o,s,a=[],l=e.delegateCount,u=t.target;if(l&&u.nodeType&&!("click"===t.type&&t.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==t.type||!0!==u.disabled)){for(o=[],s={},n=0;n<l;n++)void 0===s[r=(i=e[n]).selector+" "]&&(s[r]=i.needsContext?ht(r,this).index(u)>-1:ht.find(r,this,null,[u]).length),s[r]&&o.push(i);o.length&&a.push({elem:u,handlers:o})}return u=this,l<e.length&&a.push({elem:u,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(ht.Event.prototype,t,{enumerable:!0,configurable:!0,get:ht.isFunction(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[ht.expando]?t:new ht.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==C()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===C()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&a(this,"input"))return this.click(),!1},_default:function(t){return a(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},ht.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},ht.Event=function(t,e){if(!(this instanceof ht.Event))return new ht.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?_:k,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&ht.extend(this,e),this.timeStamp=t&&t.timeStamp||ht.now(),this[ht.expando]=!0},ht.Event.prototype={constructor:ht.Event,isDefaultPrevented:k,isPropagationStopped:k,isImmediatePropagationStopped:k,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=_,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=_,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=_,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},ht.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Yt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&Xt.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},ht.event.addProp),ht.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){ht.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=t.relatedTarget,r=t.handleObj;return i&&(i===this||ht.contains(this,i))||(t.type=r.origType,n=r.handler.apply(this,arguments),t.type=e),n}}}),ht.fn.extend({on:function(t,e,n,i){return T(this,t,e,n,i)},one:function(t,e,n,i){return T(this,t,e,n,i,1)},off:function(t,e,n){var i,r;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,ht(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=k),this.each(function(){ht.event.remove(this,t,n,e)})}});var Ut=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Qt=/<script|<style|<link/i,Zt=/checked\s*(?:[^=]|=\s*.checked.)/i,Jt=/^true\/(.*)/,Kt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;ht.extend({htmlPrefilter:function(t){return t.replace(Ut,"<$1></$2>")},clone:function(t,e,n){var i,r,o,s,a=t.cloneNode(!0),l=ht.contains(t.ownerDocument,t);if(!(ut.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||ht.isXMLDoc(t)))for(s=x(a),i=0,r=(o=x(t)).length;i<r;i++)M(o[i],s[i]);if(e)if(n)for(o=o||x(t),s=s||x(a),i=0,r=o.length;i<r;i++)E(o[i],s[i]);else E(t,a);return(s=x(a,"script")).length>0&&b(s,!l&&x(t,"script")),a},cleanData:function(t){for(var e,n,i,r=ht.event.special,o=0;void 0!==(n=t[o]);o++)if(Et(n)){if(e=n[Mt.expando]){if(e.events)for(i in e.events)r[i]?ht.event.remove(n,i):ht.removeEvent(n,i,e.handle);n[Mt.expando]=void 0}n[Ft.expando]&&(n[Ft.expando]=void 0)}}}),ht.fn.extend({detach:function(t){return B(this,t,!0)},remove:function(t){return B(this,t)},text:function(t){return Lt(this,function(t){return void 0===t?ht.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return F(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||S(this,t).appendChild(t)})},prepend:function(){return F(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=S(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return F(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return F(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(ht.cleanData(x(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return ht.clone(this,t,e)})},html:function(t){return Lt(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Qt.test(t)&&!Wt[(Ot.exec(t)||["",""])[1].toLowerCase()]){t=ht.htmlPrefilter(t);try{for(;n<i;n++)1===(e=this[n]||{}).nodeType&&(ht.cleanData(x(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return F(this,arguments,function(e){var n=this.parentNode;ht.inArray(this,t)<0&&(ht.cleanData(x(this)),n&&n.replaceChild(e,this))},t)}}),ht.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){ht.fn[t]=function(t){for(var n,i=[],r=ht(t),o=r.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),ht(r[s])[e](n),nt.apply(i,n.get());return this.pushStack(i)}});var te=/^margin/,ee=new RegExp("^("+Nt+")(?!px)[a-z%]+$","i"),ne=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)};!function(){function t(){if(a){a.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Gt.appendChild(s);var t=n.getComputedStyle(a);e="1%"!==t.top,o="2px"===t.marginLeft,i="4px"===t.width,a.style.marginRight="50%",r="4px"===t.marginRight,Gt.removeChild(s),a=null}}var e,i,r,o,s=J.createElement("div"),a=J.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",ut.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(a),ht.extend(ut,{pixelPosition:function(){return t(),e},boxSizingReliable:function(){return t(),i},pixelMarginRight:function(){return t(),r},reliableMarginLeft:function(){return t(),o}}))}();var ie=/^(none|table(?!-c[ea]).+)/,re=/^--/,oe={position:"absolute",visibility:"hidden",display:"block"},se={letterSpacing:"0",fontWeight:"400"},ae=["Webkit","Moz","ms"],le=J.createElement("div").style;ht.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=D(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,o,s,a=ht.camelCase(e),l=re.test(e),u=t.style;if(l||(e=j(a)),s=ht.cssHooks[e]||ht.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(t,!1,i))?r:u[e];"string"==(o=typeof n)&&(r=jt.exec(n))&&r[1]&&(n=v(t,e,r),o="number"),null!=n&&n==n&&("number"===o&&(n+=r&&r[3]||(ht.cssNumber[a]?"":"px")),ut.clearCloneStyle||""!==n||0!==e.indexOf("background")||(u[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,i))||(l?u.setProperty(e,n):u[e]=n))}},css:function(t,e,n,i){var r,o,s,a=ht.camelCase(e);return re.test(e)||(e=j(a)),(s=ht.cssHooks[e]||ht.cssHooks[a])&&"get"in s&&(r=s.get(t,!0,n)),void 0===r&&(r=D(t,e,i)),"normal"===r&&e in se&&(r=se[e]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),ht.each(["height","width"],function(t,e){ht.cssHooks[e]={get:function(t,n,i){if(n)return!ie.test(ht.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?I(t,e,i):It(t,oe,function(){return I(t,e,i)})},set:function(t,n,i){var r,o=i&&ne(t),s=i&&H(t,e,i,"border-box"===ht.css(t,"boxSizing",!1,o),o);return s&&(r=jt.exec(n))&&"px"!==(r[3]||"px")&&(t.style[e]=n,n=ht.css(t,e)),P(0,n,s)}}}),ht.cssHooks.marginLeft=N(ut.reliableMarginLeft,function(t,e){if(e)return(parseFloat(D(t,"marginLeft"))||t.getBoundingClientRect().left-It(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),ht.each({margin:"",padding:"",border:"Width"},function(t,e){ht.cssHooks[t+e]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[t+Pt[i]+e]=o[i]||o[i-2]||o[0];return r}},te.test(t)||(ht.cssHooks[t+e].set=P)}),ht.fn.extend({css:function(t,e){return Lt(this,function(t,e,n){var i,r,o={},s=0;if(Array.isArray(e)){for(i=ne(t),r=e.length;s<r;s++)o[e[s]]=ht.css(t,e[s],!1,i);return o}return void 0!==n?ht.style(t,e,n):ht.css(t,e)},t,e,arguments.length>1)}}),ht.Tween=q,(q.prototype={constructor:q,init:function(t,e,n,i,r,o){this.elem=t,this.prop=n,this.easing=r||ht.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=o||(ht.cssNumber[n]?"":"px")},cur:function(){var t=q.propHooks[this.prop];return t&&t.get?t.get(this):q.propHooks._default.get(this)},run:function(t){var e,n=q.propHooks[this.prop];return this.options.duration?this.pos=e=ht.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):q.propHooks._default.set(this),this}}).init.prototype=q.prototype,(q.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=ht.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){ht.fx.step[t.prop]?ht.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[ht.cssProps[t.prop]]&&!ht.cssHooks[t.prop]?t.elem[t.prop]=t.now:ht.style(t.elem,t.prop,t.now+t.unit)}}}).scrollTop=q.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},ht.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},ht.fx=q.prototype.init,ht.fx.step={};var ue,he,ce=/^(?:toggle|show|hide)$/,fe=/queueHooks$/;ht.Animation=ht.extend($,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return v(n.elem,t,jt.exec(e),n),n}]},tweener:function(t,e){ht.isFunction(t)?(e=t,t=["*"]):t=t.match(Tt);for(var n,i=0,r=t.length;i<r;i++)n=t[i],$.tweeners[n]=$.tweeners[n]||[],$.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var i,r,o,s,a,l,u,h,c="width"in e||"height"in e,f=this,p={},d=t.style,g=t.nodeType&&Ht(t),v=Mt.get(t,"fxshow");n.queue||(null==(s=ht._queueHooks(t,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,f.always(function(){f.always(function(){s.unqueued--,ht.queue(t,"fx").length||s.empty.fire()})}));for(i in e)if(r=e[i],ce.test(r)){if(delete e[i],o=o||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!v||void 0===v[i])continue;g=!0}p[i]=v&&v[i]||ht.style(t,i)}if((l=!ht.isEmptyObject(e))||!ht.isEmptyObject(p)){c&&1===t.nodeType&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],null==(u=v&&v.display)&&(u=Mt.get(t,"display")),"none"===(h=ht.css(t,"display"))&&(u?h=u:(m([t],!0),u=t.style.display||u,h=ht.css(t,"display"),m([t]))),("inline"===h||"inline-block"===h&&null!=u)&&"none"===ht.css(t,"float")&&(l||(f.done(function(){d.display=u}),null==u&&(h=d.display,u="none"===h?"":h)),d.display="inline-block")),n.overflow&&(d.overflow="hidden",f.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]})),l=!1;for(i in p)l||(v?"hidden"in v&&(g=v.hidden):v=Mt.access(t,"fxshow",{display:u}),o&&(v.hidden=!g),g&&m([t],!0),f.done(function(){g||m([t]),Mt.remove(t,"fxshow");for(i in p)ht.style(t,i,p[i])})),l=W(g?v[i]:0,i,f),i in v||(v[i]=l.start,g&&(l.end=l.start,l.start=0))}}],prefilter:function(t,e){e?$.prefilters.unshift(t):$.prefilters.push(t)}}),ht.speed=function(t,e,n){var i=t&&"object"==typeof t?ht.extend({},t):{complete:n||!n&&e||ht.isFunction(t)&&t,duration:t,easing:n&&e||e&&!ht.isFunction(e)&&e};return ht.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in ht.fx.speeds?i.duration=ht.fx.speeds[i.duration]:i.duration=ht.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){ht.isFunction(i.old)&&i.old.call(this),i.queue&&ht.dequeue(this,i.queue)},i},ht.fn.extend({fadeTo:function(t,e,n,i){return this.filter(Ht).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var r=ht.isEmptyObject(t),o=ht.speed(e,n,i),s=function(){var e=$(this,ht.extend({},t),o);(r||Mt.get(this,"finish"))&&e.stop(!0)};return s.finish=s,r||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var e=!0,r=null!=t&&t+"queueHooks",o=ht.timers,s=Mt.get(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&fe.test(r)&&i(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=t&&o[r].queue!==t||(o[r].anim.stop(n),e=!1,o.splice(r,1));!e&&n||ht.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var e,n=Mt.get(this),i=n[t+"queue"],r=n[t+"queueHooks"],o=ht.timers,s=i?i.length:0;for(n.finish=!0,ht.queue(this,t,[]),r&&r.stop&&r.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<s;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),ht.each(["toggle","show","hide"],function(t,e){var n=ht.fn[e];ht.fn[e]=function(t,i,r){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(z(e,!0),t,i,r)}}),ht.each({slideDown:z("show"),slideUp:z("hide"),slideToggle:z("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){ht.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),ht.timers=[],ht.fx.tick=function(){var t,e=0,n=ht.timers;for(ue=ht.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||ht.fx.stop(),ue=void 0},ht.fx.timer=function(t){ht.timers.push(t),ht.fx.start()},ht.fx.interval=13,ht.fx.start=function(){he||(he=!0,R())},ht.fx.stop=function(){he=null},ht.fx.speeds={slow:600,fast:200,_default:400},ht.fn.delay=function(t,e){return t=ht.fx?ht.fx.speeds[t]||t:t,e=e||"fx",this.queue(e,function(e,i){var r=n.setTimeout(e,t);i.stop=function(){n.clearTimeout(r)}})},function(){var t=J.createElement("input"),e=J.createElement("select").appendChild(J.createElement("option"));t.type="checkbox",ut.checkOn=""!==t.value,ut.optSelected=e.selected,(t=J.createElement("input")).value="t",t.type="radio",ut.radioValue="t"===t.value}();var pe,de=ht.expr.attrHandle;ht.fn.extend({attr:function(t,e){return Lt(this,ht.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){ht.removeAttr(this,t)})}}),ht.extend({attr:function(t,e,n){var i,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?ht.prop(t,e,n):(1===o&&ht.isXMLDoc(t)||(r=ht.attrHooks[e.toLowerCase()]||(ht.expr.match.bool.test(e)?pe:void 0)),void 0!==n?null===n?void ht.removeAttr(t,e):r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:(t.setAttribute(e,n+""),n):r&&"get"in r&&null!==(i=r.get(t,e))?i:null==(i=ht.find.attr(t,e))?void 0:i)},attrHooks:{type:{set:function(t,e){if(!ut.radioValue&&"radio"===e&&a(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i=0,r=e&&e.match(Tt);if(r&&1===t.nodeType)for(;n=r[i++];)t.removeAttribute(n)}}),pe={set:function(t,e,n){return!1===e?ht.removeAttr(t,n):t.setAttribute(n,n),n}},ht.each(ht.expr.match.bool.source.match(/\w+/g),function(t,e){var n=de[e]||ht.find.attr;de[e]=function(t,e,i){var r,o,s=e.toLowerCase();return i||(o=de[s],de[s]=r,r=null!=n(t,e,i)?s:null,de[s]=o),r}});var ge=/^(?:input|select|textarea|button)$/i,ve=/^(?:a|area)$/i;ht.fn.extend({prop:function(t,e){return Lt(this,ht.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[ht.propFix[t]||t]})}}),ht.extend({prop:function(t,e,n){var i,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&ht.isXMLDoc(t)||(e=ht.propFix[e]||e,r=ht.propHooks[e]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:t[e]=n:r&&"get"in r&&null!==(i=r.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=ht.find.attr(t,"tabindex");return e?parseInt(e,10):ge.test(t.nodeName)||ve.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),ut.optSelected||(ht.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),ht.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){ht.propFix[this.toLowerCase()]=this}),ht.fn.extend({addClass:function(t){var e,n,i,r,o,s,a,l=0;if(ht.isFunction(t))return this.each(function(e){ht(this).addClass(t.call(this,e,Y(this)))});if("string"==typeof t&&t)for(e=t.match(Tt)||[];n=this[l++];)if(r=Y(n),i=1===n.nodeType&&" "+G(r)+" "){for(s=0;o=e[s++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(a=G(i))&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,i,r,o,s,a,l=0;if(ht.isFunction(t))return this.each(function(e){ht(this).removeClass(t.call(this,e,Y(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(Tt)||[];n=this[l++];)if(r=Y(n),i=1===n.nodeType&&" "+G(r)+" "){for(s=0;o=e[s++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");r!==(a=G(i))&&n.setAttribute("class",a)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):ht.isFunction(t)?this.each(function(n){ht(this).toggleClass(t.call(this,n,Y(this),e),e)}):this.each(function(){var e,i,r,o;if("string"===n)for(i=0,r=ht(this),o=t.match(Tt)||[];e=o[i++];)r.hasClass(e)?r.removeClass(e):r.addClass(e);else void 0!==t&&"boolean"!==n||((e=Y(this))&&Mt.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":Mt.get(this,"__className__")||""))})},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&(" "+G(Y(n))+" ").indexOf(e)>-1)return!0;return!1}});var ye=/\r/g;ht.fn.extend({val:function(t){var e,n,i,r=this[0];return arguments.length?(i=ht.isFunction(t),this.each(function(n){var r;1===this.nodeType&&(null==(r=i?t.call(this,n,ht(this).val()):t)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=ht.map(r,function(t){return null==t?"":t+""})),(e=ht.valHooks[this.type]||ht.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))})):r?(e=ht.valHooks[r.type]||ht.valHooks[r.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(ye,""):null==n?"":n:void 0}}),ht.extend({valHooks:{option:{get:function(t){var e=ht.find.attr(t,"value");return null!=e?e:G(ht.text(t))}},select:{get:function(t){var e,n,i,r=t.options,o=t.selectedIndex,s="select-one"===t.type,l=s?null:[],u=s?o+1:r.length;for(i=o<0?u:s?o:0;i<u;i++)if(((n=r[i]).selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!a(n.parentNode,"optgroup"))){if(e=ht(n).val(),s)return e;l.push(e)}return l},set:function(t,e){for(var n,i,r=t.options,o=ht.makeArray(e),s=r.length;s--;)((i=r[s]).selected=ht.inArray(ht.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),ht.each(["radio","checkbox"],function(){ht.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=ht.inArray(ht(t).val(),e)>-1}},ut.checkOn||(ht.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var me=/^(?:focusinfocus|focusoutblur)$/;ht.extend(ht.event,{trigger:function(t,e,i,r){var o,s,a,l,u,h,c,f=[i||J],p=st.call(t,"type")?t.type:t,d=st.call(t,"namespace")?t.namespace.split("."):[];if(s=a=i=i||J,3!==i.nodeType&&8!==i.nodeType&&!me.test(p+ht.event.triggered)&&(p.indexOf(".")>-1&&(p=(d=p.split(".")).shift(),d.sort()),u=p.indexOf(":")<0&&"on"+p,t=t[ht.expando]?t:new ht.Event(p,"object"==typeof t&&t),t.isTrigger=r?2:3,t.namespace=d.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),e=null==e?[t]:ht.makeArray(e,[t]),c=ht.event.special[p]||{},r||!c.trigger||!1!==c.trigger.apply(i,e))){if(!r&&!c.noBubble&&!ht.isWindow(i)){for(l=c.delegateType||p,me.test(l+p)||(s=s.parentNode);s;s=s.parentNode)f.push(s),a=s;a===(i.ownerDocument||J)&&f.push(a.defaultView||a.parentWindow||n)}for(o=0;(s=f[o++])&&!t.isPropagationStopped();)t.type=o>1?l:c.bindType||p,(h=(Mt.get(s,"events")||{})[t.type]&&Mt.get(s,"handle"))&&h.apply(s,e),(h=u&&s[u])&&h.apply&&Et(s)&&(t.result=h.apply(s,e),!1===t.result&&t.preventDefault());return t.type=p,r||t.isDefaultPrevented()||c._default&&!1!==c._default.apply(f.pop(),e)||!Et(i)||u&&ht.isFunction(i[p])&&!ht.isWindow(i)&&((a=i[u])&&(i[u]=null),ht.event.triggered=p,i[p](),ht.event.triggered=void 0,a&&(i[u]=a)),t.result}},simulate:function(t,e,n){var i=ht.extend(new ht.Event,n,{type:t,isSimulated:!0});ht.event.trigger(i,null,e)}}),ht.fn.extend({trigger:function(t,e){return this.each(function(){ht.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return ht.event.trigger(t,e,n,!0)}}),ht.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){ht.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),ht.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),ut.focusin="onfocusin"in n,ut.focusin||ht.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){ht.event.simulate(e,t.target,ht.event.fix(t))};ht.event.special[e]={setup:function(){var i=this.ownerDocument||this,r=Mt.access(i,e);r||i.addEventListener(t,n,!0),Mt.access(i,e,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=Mt.access(i,e)-1;r?Mt.access(i,e,r):(i.removeEventListener(t,n,!0),Mt.remove(i,e))}}});var xe=n.location,be=ht.now(),we=/\?/;ht.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||ht.error("Invalid XML: "+t),e};var _e=/\[\]$/,ke=/\r?\n/g,Ce=/^(?:submit|button|image|reset|file)$/i,Te=/^(?:input|select|textarea|keygen)/i;ht.param=function(t,e){var n,i=[],r=function(t,e){var n=ht.isFunction(e)?e():e;i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(t)||t.jquery&&!ht.isPlainObject(t))ht.each(t,function(){r(this.name,this.value)});else for(n in t)X(n,t[n],e,r);return i.join("&")},ht.fn.extend({serialize:function(){return ht.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=ht.prop(this,"elements");return t?ht.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!ht(this).is(":disabled")&&Te.test(this.nodeName)&&!Ce.test(t)&&(this.checked||!Rt.test(t))}).map(function(t,e){var n=ht(this).val();return null==n?null:Array.isArray(n)?ht.map(n,function(t){return{name:e.name,value:t.replace(ke,"\r\n")}}):{name:e.name,value:n.replace(ke,"\r\n")}}).get()}});var Se=/%20/g,Ae=/#.*$/,Le=/([?&])_=[^&]*/,Ee=/^(.*?):[ \t]*([^\r\n]*)$/gm,Me=/^(?:GET|HEAD)$/,Fe=/^\/\//,Be={},De={},Ne="*/".concat("*"),je=J.createElement("a");je.href=xe.href,ht.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:xe.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(xe.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ne,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":ht.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Q(Q(t,ht.ajaxSettings),e):Q(ht.ajaxSettings,t)},ajaxPrefilter:V(Be),ajaxTransport:V(De),ajax:function(t,e){function i(t,e,i,a){var u,f,p,b,w,_=e;h||(h=!0,l&&n.clearTimeout(l),r=void 0,s=a||"",k.readyState=t>0?4:0,u=t>=200&&t<300||304===t,i&&(b=function(t,e,n){for(var i,r,o,s,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||t.converters[r+" "+l[0]]){o=r;break}s||(s=r)}o=o||s}if(o)return o!==l[0]&&l.unshift(o),n[o]}(d,k,i)),b=function(t,e,n,i){var r,o,s,a,l,u={},h=t.dataTypes.slice();if(h[1])for(s in t.converters)u[s.toLowerCase()]=t.converters[s];for(o=h.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=h.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(s=u[l+" "+o]||u["* "+o]))for(r in u)if((a=r.split(" "))[1]===o&&(s=u[l+" "+a[0]]||u["* "+a[0]])){!0===s?s=u[r]:!0!==u[r]&&(o=a[0],h.unshift(a[1]));break}if(!0!==s)if(s&&t.throws)e=s(e);else try{e=s(e)}catch(t){return{state:"parsererror",error:s?t:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}(d,b,k,u),u?(d.ifModified&&((w=k.getResponseHeader("Last-Modified"))&&(ht.lastModified[o]=w),(w=k.getResponseHeader("etag"))&&(ht.etag[o]=w)),204===t||"HEAD"===d.type?_="nocontent":304===t?_="notmodified":(_=b.state,f=b.data,u=!(p=b.error))):(p=_,!t&&_||(_="error",t<0&&(t=0))),k.status=t,k.statusText=(e||_)+"",u?y.resolveWith(g,[f,_,k]):y.rejectWith(g,[k,_,p]),k.statusCode(x),x=void 0,c&&v.trigger(u?"ajaxSuccess":"ajaxError",[k,d,u?f:p]),m.fireWith(g,[k,_]),c&&(v.trigger("ajaxComplete",[k,d]),--ht.active||ht.event.trigger("ajaxStop")))}"object"==typeof t&&(e=t,t=void 0),e=e||{};var r,o,s,a,l,u,h,c,f,p,d=ht.ajaxSetup({},e),g=d.context||d,v=d.context&&(g.nodeType||g.jquery)?ht(g):ht.event,y=ht.Deferred(),m=ht.Callbacks("once memory"),x=d.statusCode||{},b={},w={},_="canceled",k={readyState:0,getResponseHeader:function(t){var e;if(h){if(!a)for(a={};e=Ee.exec(s);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return h?s:null},setRequestHeader:function(t,e){return null==h&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,b[t]=e),this},overrideMimeType:function(t){return null==h&&(d.mimeType=t),this},statusCode:function(t){var e;if(t)if(h)k.always(t[k.status]);else for(e in t)x[e]=[x[e],t[e]];return this},abort:function(t){var e=t||_;return r&&r.abort(e),i(0,e),this}};if(y.promise(k),d.url=((t||d.url||xe.href)+"").replace(Fe,xe.protocol+"//"),d.type=e.method||e.type||d.method||d.type,d.dataTypes=(d.dataType||"*").toLowerCase().match(Tt)||[""],null==d.crossDomain){u=J.createElement("a");try{u.href=d.url,u.href=u.href,d.crossDomain=je.protocol+"//"+je.host!=u.protocol+"//"+u.host}catch(t){d.crossDomain=!0}}if(d.data&&d.processData&&"string"!=typeof d.data&&(d.data=ht.param(d.data,d.traditional)),U(Be,d,e,k),h)return k;(c=ht.event&&d.global)&&0==ht.active++&&ht.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!Me.test(d.type),o=d.url.replace(Ae,""),d.hasContent?d.data&&d.processData&&0===(d.contentType||"").indexOf("application/x-www-form-urlencoded")&&(d.data=d.data.replace(Se,"+")):(p=d.url.slice(o.length),d.data&&(o+=(we.test(o)?"&":"?")+d.data,delete d.data),!1===d.cache&&(o=o.replace(Le,"$1"),p=(we.test(o)?"&":"?")+"_="+be+++p),d.url=o+p),d.ifModified&&(ht.lastModified[o]&&k.setRequestHeader("If-Modified-Since",ht.lastModified[o]),ht.etag[o]&&k.setRequestHeader("If-None-Match",ht.etag[o])),(d.data&&d.hasContent&&!1!==d.contentType||e.contentType)&&k.setRequestHeader("Content-Type",d.contentType),k.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+Ne+"; q=0.01":""):d.accepts["*"]);for(f in d.headers)k.setRequestHeader(f,d.headers[f]);if(d.beforeSend&&(!1===d.beforeSend.call(g,k,d)||h))return k.abort();if(_="abort",m.add(d.complete),k.done(d.success),k.fail(d.error),r=U(De,d,e,k)){if(k.readyState=1,c&&v.trigger("ajaxSend",[k,d]),h)return k;d.async&&d.timeout>0&&(l=n.setTimeout(function(){k.abort("timeout")},d.timeout));try{h=!1,r.send(b,i)}catch(t){if(h)throw t;i(-1,t)}}else i(-1,"No Transport");return k},getJSON:function(t,e,n){return ht.get(t,e,n,"json")},getScript:function(t,e){return ht.get(t,void 0,e,"script")}}),ht.each(["get","post"],function(t,e){ht[e]=function(t,n,i,r){return ht.isFunction(n)&&(r=r||i,i=n,n=void 0),ht.ajax(ht.extend({url:t,type:e,dataType:r,data:n,success:i},ht.isPlainObject(t)&&t))}}),ht._evalUrl=function(t){return ht.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},ht.fn.extend({wrapAll:function(t){var e;return this[0]&&(ht.isFunction(t)&&(t=t.call(this[0])),e=ht(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return ht.isFunction(t)?this.each(function(e){ht(this).wrapInner(t.call(this,e))}):this.each(function(){var e=ht(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=ht.isFunction(t);return this.each(function(n){ht(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){ht(this).replaceWith(this.childNodes)}),this}}),ht.expr.pseudos.hidden=function(t){return!ht.expr.pseudos.visible(t)},ht.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},ht.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var Pe={0:200,1223:204},He=ht.ajaxSettings.xhr();ut.cors=!!He&&"withCredentials"in He,ut.ajax=He=!!He,ht.ajaxTransport(function(t){var e,i;if(ut.cors||He&&!t.crossDomain)return{send:function(r,o){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(s in r)a.setRequestHeader(s,r[s]);e=function(t){return function(){e&&(e=i=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Pe[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=e(),i=a.onerror=e("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout(function(){e&&i()})},e=e("abort");try{a.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}}),ht.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),ht.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return ht.globalEval(t),t}}}),ht.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),ht.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(i,r){e=ht("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&r("error"===t.type?404:200,t.type)}),J.head.appendChild(e[0])},abort:function(){n&&n()}}}});var Ie=[],qe=/(=)\?(?=&|$)|\?\?/;ht.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ie.pop()||ht.expando+"_"+be++;return this[t]=!0,t}}),ht.ajaxPrefilter("json jsonp",function(t,e,i){var r,o,s,a=!1!==t.jsonp&&(qe.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&qe.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=ht.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(qe,"$1"+r):!1!==t.jsonp&&(t.url+=(we.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return s||ht.error(r+" was not called"),s[0]},t.dataTypes[0]="json",o=n[r],n[r]=function(){s=arguments},i.always(function(){void 0===o?ht(n).removeProp(r):n[r]=o,t[r]&&(t.jsonpCallback=e.jsonpCallback,Ie.push(r)),s&&ht.isFunction(o)&&o(s[0]),s=o=void 0}),"script"}),ut.createHTMLDocument=function(){var t=J.implementation.createHTMLDocument("").body;return t.innerHTML="<form></form><form></form>",2===t.childNodes.length}(),ht.parseHTML=function(t,e,n){if("string"!=typeof t)return[];"boolean"==typeof e&&(n=e,e=!1);var i,r,o;return e||(ut.createHTMLDocument?((i=(e=J.implementation.createHTMLDocument("")).createElement("base")).href=J.location.href,e.head.appendChild(i)):e=J),r=xt.exec(t),o=!n&&[],r?[e.createElement(r[1])]:(r=w([t],e,o),o&&o.length&&ht(o).remove(),ht.merge([],r.childNodes))},ht.fn.load=function(t,e,n){var i,r,o,s=this,a=t.indexOf(" ");return a>-1&&(i=G(t.slice(a)),t=t.slice(0,a)),ht.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(r="POST"),s.length>0&&ht.ajax({url:t,type:r||"GET",dataType:"html",data:e}).done(function(t){o=arguments,s.html(i?ht("<div>").append(ht.parseHTML(t)).find(i):t)}).always(n&&function(t,e){s.each(function(){n.apply(this,o||[t.responseText,e,t])})}),this},ht.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){ht.fn[e]=function(t){return this.on(e,t)}}),ht.expr.pseudos.animated=function(t){return ht.grep(ht.timers,function(e){return t===e.elem}).length},ht.offset={setOffset:function(t,e,n){var i,r,o,s,a,l,u=ht.css(t,"position"),h=ht(t),c={};"static"===u&&(t.style.position="relative"),a=h.offset(),o=ht.css(t,"top"),l=ht.css(t,"left"),("absolute"===u||"fixed"===u)&&(o+l).indexOf("auto")>-1?(s=(i=h.position()).top,r=i.left):(s=parseFloat(o)||0,r=parseFloat(l)||0),ht.isFunction(e)&&(e=e.call(t,n,ht.extend({},a))),null!=e.top&&(c.top=e.top-a.top+s),null!=e.left&&(c.left=e.left-a.left+r),"using"in e?e.using.call(t,c):h.css(c)}},ht.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){ht.offset.setOffset(this,t,e)});var e,n,i,r,o=this[0];return o?o.getClientRects().length?(i=o.getBoundingClientRect(),e=o.ownerDocument,n=e.documentElement,r=e.defaultView,{top:i.top+r.pageYOffset-n.clientTop,left:i.left+r.pageXOffset-n.clientLeft}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n=this[0],i={top:0,left:0};return"fixed"===ht.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),a(t[0],"html")||(i=t.offset()),i={top:i.top+ht.css(t[0],"borderTopWidth",!0),left:i.left+ht.css(t[0],"borderLeftWidth",!0)}),{top:e.top-i.top-ht.css(n,"marginTop",!0),left:e.left-i.left-ht.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===ht.css(t,"position");)t=t.offsetParent;return t||Gt})}}),ht.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;ht.fn[t]=function(i){return Lt(this,function(t,i,r){var o;if(ht.isWindow(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===r)return o?o[e]:t[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):t[i]=r},t,i,arguments.length)}}),ht.each(["top","left"],function(t,e){ht.cssHooks[e]=N(ut.pixelPosition,function(t,n){if(n)return n=D(t,e),ee.test(n)?ht(t).position()[e]+"px":n})}),ht.each({Height:"height",Width:"width"},function(t,e){ht.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){ht.fn[i]=function(r,o){var s=arguments.length&&(n||"boolean"!=typeof r),a=n||(!0===r||!0===o?"margin":"border");return Lt(this,function(e,n,r){var o;return ht.isWindow(e)?0===i.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===r?ht.css(e,n,a):ht.style(e,n,r,a)},e,s?r:void 0,s)}})}),ht.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),ht.holdReady=function(t){t?ht.readyWait++:ht.ready(!0)},ht.isArray=Array.isArray,ht.parseJSON=JSON.parse,ht.nodeName=a,void 0===(i=function(){return ht}.apply(e,[]))||(t.exports=i);var Re=n.jQuery,Oe=n.$;return ht.noConflict=function(t){return n.$===ht&&(n.$=Oe),t&&n.jQuery===ht&&(n.jQuery=Re),ht},r||(n.jQuery=n.$=ht),ht})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,